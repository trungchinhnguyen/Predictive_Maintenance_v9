{"version":3,"sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","length","splice","push","env","constructor","this","wasm","webgl","logLevelInternal","logLevel","value","indexOf","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","set","Tensor","arg0","arg1","arg2","type","data","dims","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","reshape","InferenceSession","handler","async","feeds","fetches","options","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","static","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","buffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","fn","ctx","params","arguments","offset","index","pending","Promise","resolve","reject","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","encode","start","end","t","parts","chunk","j","b","String","fromCharCode","slice","invalidEncoding","decode","c","charCodeAt","test","EventEmitter","_listeners","prototype","on","evt","off","listeners","emit","args","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","replace","keys","alloc","SIZE","MAX","slab","utf8","len","read","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","s","codePoint","a","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","EMPTY","isGuid","toString","validator","gen","createEmpty","parse","raw","count","out","random","substring","isEmpty","toJSON","RegExp","WebAssembly","Instance","Module","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","radixToPower","min","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","f","newBuffer","g","emptyArray","message","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","error","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","node","initializer","valueInfo","quantizationAnnotation","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","elemType","shape","version","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","response","setTimeout","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","process","versions","global","window","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","AttributeWithCacheKeyImpl","assign","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","attr","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","o","initialize","dispose","isBackend","WebGLBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","decodeUint8","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActicationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","adjustedAttributes","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","newAttributes","activationAttributes","parseInternalActivationAttributes","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","canvas","document","createElement","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","Date","toISOString","previousConfig","Event","startTime","endCallback","timer","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","__init","builder","numElems","startShape","addDim","endShape","DimensionValue","optionalEncoding","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","UNKNOWN","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","NONE","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","rawDataOffset","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","floatsLength","graphsLength","sOffset","tOffset","gOffset","floatsOffset","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","Profiler","graphInputTypes","graphInputDims","_model","arg","fetch","promisify","readFile","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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","file":"ort.webgl.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.backend === backend) {\n            return;\n        }\n        else {\n            throw new Error(`backend \"${name}\" is already registered`);\n        }\n        if (priority >= 0) {\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\nif (isBigInt64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n}\nif (isBigUint64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n}\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    //#endregion\n    //#region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -1);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('wasm', wasmBackend, 0);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\n\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ?\n        this.session.getTextureData(tensorId, isPacked) :\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, parseAveragePoolAttributes} from './ops/pool';\nimport {globalAveragePool, parseGlobalAveragePoolAttributes} from './ops/pool';\nimport {maxPool, parseMaxPoolAttributes} from './ops/pool';\nimport {globalMaxPool} from './ops/pool';\nimport {reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {parseReduceAttributes} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\nimport {ConcatAttributes} from './concat';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActicationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\nimport {getActicationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/master/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/master/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    roiInputIdx = 1;\n    scalesInputIdx = 2;\n    sizesInputIdx = 3;\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\nfunction createCanvas(): HTMLCanvasElement {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {Tensor} from './tensor';\nimport {LongUtil, ProtoUtil, MIN_CLIP, MAX_CLIP} from './util';\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {LongUtil} from './util';\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}
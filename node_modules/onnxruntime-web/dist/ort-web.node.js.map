{"version":3,"sources":["webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/long/src/long.js","webpack://onnxruntime-web/./node_modules/onnx-proto/dist/onnx.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/wasm/options-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/string-utils.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/./node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/external \"fs\"","webpack://onnxruntime-web/external \"os\"","webpack://onnxruntime-web/external \"path\"","webpack://onnxruntime-web/external \"perf_hooks\"","webpack://onnxruntime-web/external \"util\"","webpack://onnxruntime-web/external \"worker_threads\"","webpack://onnxruntime-web/external {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"names":["_scriptDir","e","document","currentScript","src","__filename","n","R","buffer","Y","z","W","t","P","r","U","a","N","i","o","u","s","Object","assign","ready","Promise","c","f","l","p","d","m","h","g","b","_","window","y","importScripts","w","process","versions","node","v","ENVIRONMENT_IS_PTHREAD","O","A","locateFile","__dirname","normalize","readFileSync","Uint8Array","readFile","argv","length","replace","slice","on","kn","ee","exitCode","D","exit","inspect","console","error","global","Worker","self","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","T","log","bind","S","warn","writeSync","E","M","x","print","printErr","thisProgram","quit","wasmBinary","k","noExitRuntime","WebAssembly","oe","C","F","I","TextDecoder","this","decode","SharedArrayBuffer","call","G","H","subarray","String","fromCharCode","B","j","charCodeAt","q","L","V","dn","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","Q","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Error","byteLength","X","Z","$","J","K","ne","preRun","shift","unshift","te","re","ae","ie","postMessage","cmd","arg","onAbort","RuntimeError","ue","startsWith","se","preloadedImages","preloadedAudios","ce","fe","Tb","Sa","be","le","Sn","En","pe","de","Oa","jb","worker","Pa","Va","fb","Wb","ub","receiveObjectTransfer","zb","threadInit","lb","setExitStatus","Bb","kb","terminate","Ab","Qa","eb","push","splice","vn","Dn","wb","onmessage","data","pb","targetThread","pn","bc","transferList","gn","ye","thread","loaded","Ua","threadId","text","alert","target","filename","lineno","message","urlOrBlob","mainScriptUrlOrBlob","wasmModule","mb","rb","pop","me","Ge","Cn","establishStackSpace","Tn","he","ge","get","_e","Ta","Gb","Db","Eb","Cb","Fb","sb","cb","start_routine","Hb","threadInfoStruct","time","now","Mb","invokeEntryPoint","hrtime","__performance_now_clock_drift","we","ve","Oe","Ae","Te","Se","Ee","Me","xe","De","ke","Re","Qb","Ce","Math","ceil","An","fill","yb","vb","nb","fd","Zb","flags","offset","Fe","mn","Ie","Ye","Rb","We","Pe","Ue","Ne","toTimeString","match","Date","getFullYear","getTimezoneOffset","max","Number","arguments","Mn","yn","He","Be","je","querySelector","qe","Za","ib","Ob","wn","Ya","Xa","getParameter","width","height","viewport","Le","Ve","ze","Qe","Xe","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Ze","forEach","$e","Je","Ke","Ub","Sb","en","nn","tn","rn","an","un","getTime","getMonth","getDate","setDate","setMonth","setFullYear","sn","toString","getDay","Na","bb","Kb","Jb","$a","Wa","Ra","ab","cc","Ib","Lb","RegExp","split","substring","abs","includes","Array","set","cn","fn","bn","_n","Nb","Atomics","exchange","xn","load","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","min","setTime","ob","ln","copyWithin","hardwareConcurrency","apply","grow","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","xb","Xb","gb","qb","$b","ac","hb","getContext","WebGLRenderingContext","Vb","attributes","version","canvas","tb","getExtension","vertexAttribDivisor","vertexAttribDivisorANGLE","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","bindVertexArrayOES","isVertexArray","isVertexArrayOES","drawBuffers","drawBuffersWEBGL","Pb","Yb","getSupportedExtensions","asm","exports","xa","Ba","monitorRunDependencies","clearInterval","instance","module","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","aa","_OrtCreateSessionOptions","ba","_OrtAddSessionConfigEntry","ca","_OrtReleaseSessionOptions","da","_OrtCreateSession","ea","_OrtReleaseSession","fa","_OrtGetInputCount","ga","_OrtGetOutputCount","ha","_OrtGetInputName","ia","_OrtGetOutputName","ja","_OrtFree","ka","_OrtCreateTensor","la","_OrtGetTensorData","ma","_OrtReleaseTensor","na","_OrtCreateRunOptions","oa","_OrtAddRunConfigEntry","pa","_OrtReleaseRunOptions","qa","_OrtRun","ra","_OrtEndProfiling","sa","___errno_location","ta","_pthread_self","ua","_malloc","va","_free","wa","_emscripten_tls_init","hn","___funcs_on_exit","ya","_emscripten_main_thread_process_queued_calls","za","__emscripten_thread_init","Aa","_emscripten_current_thread_process_queued_calls","Ca","_emscripten_sync_run_in_main_thread_4","Da","_emscripten_run_in_main_runtime_thread_js","Ea","_emscripten_dispatch_to_thread_","Fa","__emscripten_thread_free_data","Ga","__emscripten_thread_exit","Ha","On","_memalign","Ia","_emscripten_stack_set_limits","Ja","stackSave","Ka","stackRestore","La","stackAlloc","Ma","__emscripten_main_thread_futex","__emscripten_allow_main_runtime_queued_calls","name","Rn","calledRun","onRuntimeInitialized","postRun","setStatus","setTimeout","onExit","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","PThread","ExitStatus","run","preInit","ortWasm","undefined","fs","ctx","params","index","pending","reject","err","base64","string","charAt","b64","s64","encode","start","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","args","factory","f32","f8b","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","value","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","TypeError","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","count","out","random","isEmpty","toJSON","wasm","Instance","Module","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","radixToPower","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","type","newBuffer","emptyArray","writer","hasOwnProperty","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","async","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","initializeFlags","env","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","wasmBackend","initWasm","promisify","handler","OnnxruntimeWebAssemblySessionHandler","onnxjsBackend","registerBackend","AttributeWithCacheKeyImpl","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","_attributes","Map","attr","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","static","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","root","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","decodeUint8","ArrayBuffer","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActicationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","inputSpatialShapeWithPad","outputSpatialShape","conv2d","adjustedAttributes","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","newAttributes","activationAttributes","parseInternalActivationAttributes","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","createElement","createCanvas","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","scissor","readPixels","isFramebufferReady","getActiveTexture","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","__init","builder","numElems","startShape","addDim","endShape","DimensionValue","optionalEncoding","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","UNKNOWN","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","NONE","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","rawDataOffset","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","floatsLength","graphsLength","sOffset","tOffset","gOffset","floatsOffset","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","getLogLevel","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","BigInt64Array","BigUint64Array","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","path","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","revokeObjectURL","encodeURIComponent","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","Symbol","toStringTag","__webpack_exports__"],"mappings":"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","file":"ort-web.node.js","sourcesContent":["var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function n(){return R.buffer!=Y&&z(R.buffer),W}function t(){return R.buffer!=Y&&z(R.buffer),P}function r(){return R.buffer!=Y&&z(R.buffer),U}function a(){return R.buffer!=Y&&z(R.buffer),N}var i;e=e||{},i||(i=void 0!==e?e:{});var o,u,s=Object.assign;i.ready=new Promise((function(e,n){o=e,u=n}));var c,f,l,p,d,m,h=s({},i),g=\"./this.program\",b=(e,n)=>{throw n},_=\"object\"==typeof window,y=\"function\"==typeof importScripts,w=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=i.ENVIRONMENT_IS_PTHREAD||!1,O=\"\";function A(e){return i.locateFile?i.locateFile(e,O):O+e}if(w){let e;O=y?require(\"path\").dirname(O)+\"/\":__dirname+\"/\",m=()=>{d||(p=require(\"fs\"),d=require(\"path\"))},c=function(e,n){return m(),e=d.normalize(e),p.readFileSync(e,n?null:\"utf8\")},l=e=>((e=c(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,n,t)=>{m(),e=d.normalize(e),p.readFile(e,(function(e,r){e?t(e):n(r.buffer)}))},1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof kn))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),b=(e,n)=>{if(ee())throw process.exitCode=e,n;n instanceof kn||D(\"exiting due to exception: \"+n),process.exit(e)},i.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(_||y)&&(y?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),_scriptDir&&(O=_scriptDir),O=0!==O.indexOf(\"blob:\")?O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",w||(c=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},y&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),f=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));w&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var T=console.log.bind(console),S=console.warn.bind(console);w&&(m(),T=e=>p.writeSync(1,e+\"\\n\"),S=e=>p.writeSync(2,e+\"\\n\"));var E,M,x=i.print||T,D=i.printErr||S;s(i,h),h=null,i.thisProgram&&(g=i.thisProgram),i.quit&&(b=i.quit),i.wasmBinary&&(M=i.wasmBinary);var k=i.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&oe(\"no native wasm support detected\");var R,C,F=!1;function I(e){var n=new TextDecoder(e);this.decode=e=>(e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),n.decode.call(n,e))}var Y,W,P,U,N,G=\"undefined\"!=typeof TextDecoder?new I(\"utf8\"):void 0;function H(e,n,t){var r=n+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.subarray&&G)return G.decode(e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var i=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function B(e,n){return e?H(t(),e,n):\"\"}function j(e,n,t,r){if(!(0<r))return 0;var a=t;r=t+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(t>=r)break;n[t++]=o}else{if(2047>=o){if(t+1>=r)break;n[t++]=192|o>>6}else{if(65535>=o){if(t+2>=r)break;n[t++]=224|o>>12}else{if(t+3>=r)break;n[t++]=240|o>>18,n[t++]=128|o>>12&63}n[t++]=128|o>>6&63}n[t++]=128|63&o}}return n[t]=0,t-a}function q(e,n,r){return j(e,t(),n,r)}function L(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++t)),127>=r?++n:n=2047>=r?n+2:65535>=r?n+3:n+4}return n}function V(e){var t=L(e)+1,r=dn(t);return r&&j(e,n(),r,t),r}function z(e){Y=e,i.HEAP8=W=new Int8Array(e),i.HEAP16=new Int16Array(e),i.HEAP32=U=new Int32Array(e),i.HEAPU8=P=new Uint8Array(e),i.HEAPU16=new Uint16Array(e),i.HEAPU32=new Uint32Array(e),i.HEAPF32=new Float32Array(e),i.HEAPF64=N=new Float64Array(e)}\"undefined\"!=typeof TextDecoder&&new I(\"utf-16le\"),v&&(Y=i.buffer);var Q=i.INITIAL_MEMORY||16777216;if(v)R=i.wasmMemory,Y=i.buffer;else if(i.wasmMemory)R=i.wasmMemory;else if(!((R=new WebAssembly.Memory({initial:Q/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw D(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),w&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");R&&(Y=R.buffer),Q=Y.byteLength,z(Y);var X,Z=[],$=[],J=[],K=[];function ee(){return k||!1}function ne(){var e=i.preRun.shift();Z.unshift(e)}var te,re=0,ae=null,ie=null;function oe(e){throw v?postMessage({cmd:\"onAbort\",arg:e}):i.onAbort&&i.onAbort(e),D(e=\"Aborted(\"+e+\")\"),F=!0,e=new WebAssembly.RuntimeError(e+\". Build with -s ASSERTIONS=1 for more info.\"),u(e),e}function ue(){return te.startsWith(\"data:application/octet-stream;base64,\")}function se(){var e=te;try{if(e==te&&M)return new Uint8Array(M);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){oe(e)}}i.preloadedImages={},i.preloadedAudios={},te=\"ort-wasm-threaded.wasm\",ue()||(te=A(te));var ce={};function fe(e){for(;0<e.length;){var n=e.shift();if(\"function\"==typeof n)n(i);else{var t=n.Tb;\"number\"==typeof t?void 0===n.Sa?be(t)():be(t)(n.Sa):t(void 0===n.Sa?null:n.Sa)}}}function le(e){var n=Sn();return e=e(),En(n),e}function pe(e){var n=de.Oa[e];n&&(r()[e>>2]=0,de.jb(n.worker))}var de={Pa:[],Va:[],fb:[],Wb:function(){},ub:function(){de.receiveObjectTransfer=de.zb,de.threadInit=de.lb,de.setExitStatus=de.Bb},Oa:{},Bb:function(){},kb:function(){for(var e in de.Oa){var n=de.Oa[e];n&&n.worker&&de.jb(n.worker)}for(e=0;e<de.Pa.length;++e)de.Pa[e].terminate();de.Pa=[]},jb:function(e){de.Ab((function(){delete de.Oa[e.Qa.eb],de.Pa.push(e),de.Va.splice(de.Va.indexOf(e),1),vn(e.Qa.eb),e.Qa=void 0}))},Ab:function(e){r()[Dn>>2]=0;try{e()}finally{r()[Dn>>2]=1}},zb:function(){},lb:function(){for(var e in de.fb)de.fb[e]()},wb:function(e,n){e.onmessage=t=>{var a=(t=t.data).cmd;if(e.Qa&&(de.pb=e.Qa.eb),t.targetThread&&t.targetThread!=pn()){var o=de.Oa[t.bc];o?o.worker.postMessage(t,t.transferList):D('Internal error! Worker sent a message \"'+a+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"processQueuedMainThreadWork\"===a?gn():\"spawnThread\"===a?ye(t):\"cleanupThread\"===a?pe(t.thread):\"killThread\"===a?(t=t.thread,r()[t>>2]=0,a=de.Oa[t],delete de.Oa[t],a.worker.terminate(),vn(t),de.Va.splice(de.Va.indexOf(a.worker),1),a.worker.Qa=void 0):\"cancelThread\"===a?de.Oa[t.thread].worker.postMessage({cmd:\"cancel\"}):\"loaded\"===a?(e.loaded=!0,n&&n(e),e.Ua&&(e.Ua(),delete e.Ua)):\"print\"===a?x(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===a?D(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===a?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"onAbort\"===a?i.onAbort&&i.onAbort(t.arg):D(\"worker sent an unknown command \"+a);de.pb=void 0},e.onerror=e=>{throw D(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},w&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:i.mainScriptUrlOrBlob||_scriptDir,wasmMemory:R,wasmModule:C})},mb:function(){var e=A(\"ort-wasm-threaded.worker.js\");de.Pa.push(new Worker(e))},rb:function(){return 0==de.Pa.length&&(de.mb(),de.wb(de.Pa[0])),de.Pa.pop()}};function me(e){if(v)return Ge(1,0,e);try{Cn(e)}catch(e){e instanceof kn||\"unwind\"==e||b(1,e)}}i.establishStackSpace=function(){var e=pn(),n=r()[e+44>>2];e=r()[e+48>>2],Tn(n,n-e),En(n)};var he,ge=[];function be(e){var n=ge[e];return n||(e>=ge.length&&(ge.length=e+1),ge[e]=n=X.get(e)),n}function _e(e){this.Ta=e-16,this.Gb=function(e){r()[this.Ta+4>>2]=e},this.Db=function(e){r()[this.Ta+8>>2]=e},this.Eb=function(){r()[this.Ta>>2]=0},this.Cb=function(){n()[this.Ta+12>>0]=0},this.Fb=function(){n()[this.Ta+13>>0]=0},this.sb=function(e,n){this.Gb(e),this.Db(n),this.Eb(),this.Cb(),this.Fb()}}function ye(e){var n=de.rb();if(!n)return 6;de.Va.push(n);var t=de.Oa[e.cb]={worker:n,eb:e.cb};n.Qa=t;var r={cmd:\"run\",start_routine:e.Hb,arg:e.Sa,threadInfoStruct:e.cb};return n.Ua=()=>{r.time=performance.now(),n.postMessage(r,e.Mb)},n.loaded&&(n.Ua(),delete n.Ua),0}i.invokeEntryPoint=function(e,n){return be(e)(n)},he=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:v?()=>performance.now()-i.__performance_now_clock_drift:()=>performance.now();var we={},ve=[null,[],[]];function Oe(e,n){var t=ve[e];0===n||10===n?((1===e?x:D)(H(t,0)),t.length=0):t.push(n)}var Ae={};function Te(e,n,t){return v?Ge(2,1,e,n,t):0}function Se(e,n){if(v)return Ge(3,1,e,n)}function Ee(e,n,t,r){if(v)return Ge(4,1,e,n,t,r)}function Me(e,n){if(v)return Ge(5,1,e,n)}function xe(e,n,t){if(v)return Ge(6,1,e,n,t)}function De(e,n,t){return v?Ge(7,1,e,n,t):0}function ke(e,n){if(v)return Ge(8,1,e,n)}function Re(e,n){return v?Ge(9,1,e,n):(e=B(e),Ae.Qb(e,n))}function Ce(e,n,r,a,i,o){if(v)n=Ge(10,1,e,n,r,a,i,o);else if(o<<=12,0!=(16&a)&&0!=e%65536)n=-28;else if(0!=(32&a)){var u=65536*Math.ceil(n/65536);(e=An(65536,u))?t().fill(0,e,e+u):e=0,e?(we[e]={yb:e,vb:n,nb:!0,fd:i,Zb:r,flags:a,offset:o},n=e):n=-48}else n=-52;return n}function Fe(e,n){if(v)e=Ge(11,1,e,n);else{var t=we[e];0!==n&&t?(n===t.vb&&(we[e]=null,t.nb&&mn(t.yb)),e=0):e=-28}return e}function Ie(e,n,t){if(v)return Ge(12,1,e,n,t)}function Ye(e,n,t){return v?Ge(13,1,e,n,t):(e=B(e),Ae.Rb(e,n,t))}function We(e){if(v)return Ge(14,1,e)}function Pe(e,n){if(v)return Ge(15,1,e,n)}function Ue(e){if(v)return Ge(16,1,e)}function Ne(e,n,t){function a(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(v)return Ge(17,1,e,n,t);var i=(new Date).getFullYear(),o=new Date(i,0,1),u=new Date(i,6,1);i=o.getTimezoneOffset();var s=u.getTimezoneOffset(),c=Math.max(i,s);r()[e>>2]=60*c,r()[n>>2]=Number(i!=s),e=a(o),n=a(u),e=V(e),n=V(n),s<i?(r()[t>>2]=e,r()[t+4>>2]=n):(r()[t>>2]=n,r()[t+4>>2]=e)}function Ge(e,n){var t=arguments.length-2,r=arguments;return le((function(){for(var i=Mn(8*t),o=i>>3,u=0;u<t;u++){var s=r[2+u];a()[o+u]=s}return yn(e,t,i,n)}))}var He=[],Be=[0,\"undefined\"!=typeof document?document:0,\"undefined\"!=typeof window?window:0];function je(e){return e=2<e?B(e):e,Be[e]||(\"undefined\"!=typeof document?document.querySelector(e):void 0)}function qe(e,n,t){var a=je(e);return a?(a.Za&&(r()[a.Za>>2]=n,r()[a.Za+4>>2]=t),!a.ib&&a.Ob?a.Za?(function(e,n,t,a){le((function(){var i=Mn(12),o=0;if(n){o=L(n)+1;var u=dn(o);q(n,u,o),o=u}r()[i>>2]=o,r()[i+4>>2]=t,r()[i+8>>2]=a,wn(e,657457152,0,o,i)}))}(a=r()[a.Za+8>>2],e=e?B(e):\"\",n,t),1):-4:(a.ib&&(a=a.ib),e=!1,a.Ya&&a.Ya.Xa&&(e=0===(e=a.Ya.Xa.getParameter(2978))[0]&&0===e[1]&&e[2]===a.width&&e[3]===a.height),a.width=n,a.height=t,e&&a.Ya.Xa.viewport(0,0,n,t),0)):-4}function Le(e,n,t){return v?Ge(18,1,e,n,t):qe(e,n,t)}var Ve,ze=[\"default\",\"low-power\",\"high-performance\"],Qe={};function Xe(){if(!Ve){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in Qe)void 0===Qe[e]?delete n[e]:n[e]=Qe[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);Ve=t}return Ve}function Ze(e,t){if(v)return Ge(19,1,e,t);var a=0;return Xe().forEach((function(i,o){var u=t+a;for(o=r()[e+4*o>>2]=u,u=0;u<i.length;++u)n()[o++>>0]=i.charCodeAt(u);n()[o>>0]=0,a+=i.length+1})),0}function $e(e,n){if(v)return Ge(20,1,e,n);var t=Xe();r()[e>>2]=t.length;var a=0;return t.forEach((function(e){a+=e.length+1})),r()[n>>2]=a,0}function Je(e){return v?Ge(21,1,e):0}function Ke(e,n,t,a){return v?Ge(22,1,e,n,t,a):(e=Ae.Ub(e),n=Ae.Sb(e,n,t),r()[a>>2]=n,0)}function en(e,n,t,r,a){if(v)return Ge(23,1,e,n,t,r,a)}function nn(e,n,a,i){if(v)return Ge(24,1,e,n,a,i);for(var o=0,u=0;u<a;u++){var s=r()[n>>2],c=r()[n+4>>2];n+=8;for(var f=0;f<c;f++)Oe(e,t()[s+f]);o+=c}return r()[i>>2]=o,0}function tn(e){return 0==e%4&&(0!=e%100||0==e%400)}function rn(e,n){for(var t=0,r=0;r<=n;t+=e[r++]);return t}var an=[31,29,31,30,31,30,31,31,30,31,30,31],on=[31,28,31,30,31,30,31,31,30,31,30,31];function un(e,n){for(e=new Date(e.getTime());0<n;){var t=e.getMonth(),r=(tn(e.getFullYear())?an:on)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function sn(e,t,a,i){function o(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function u(e,n){return o(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){e=un(new Date(e.Na+1900,0,1),e.bb);var n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4));return n=c(n),0>=s(t,e)?0>=s(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[i+40>>2];for(var p in i={Kb:r()[i>>2],Jb:r()[i+4>>2],$a:r()[i+8>>2],Wa:r()[i+12>>2],Ra:r()[i+16>>2],Na:r()[i+20>>2],ab:r()[i+24>>2],bb:r()[i+28>>2],cc:r()[i+32>>2],Ib:r()[i+36>>2],Lb:l?B(l):\"\"},a=B(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),m=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return d[e.ab].substring(0,3)},\"%A\":function(e){return d[e.ab]},\"%b\":function(e){return m[e.Ra].substring(0,3)},\"%B\":function(e){return m[e.Ra]},\"%C\":function(e){return u((e.Na+1900)/100|0,2)},\"%d\":function(e){return u(e.Wa,2)},\"%e\":function(e){return o(e.Wa,2,\" \")},\"%g\":function(e){return f(e).toString().substring(2)},\"%G\":function(e){return f(e)},\"%H\":function(e){return u(e.$a,2)},\"%I\":function(e){return 0==(e=e.$a)?e=12:12<e&&(e-=12),u(e,2)},\"%j\":function(e){return u(e.Wa+rn(tn(e.Na+1900)?an:on,e.Ra-1),3)},\"%m\":function(e){return u(e.Ra+1,2)},\"%M\":function(e){return u(e.Jb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.$a&&12>e.$a?\"AM\":\"PM\"},\"%S\":function(e){return u(e.Kb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.ab||7},\"%U\":function(e){var n=new Date(e.Na+1900,0,1),t=0===n.getDay()?n:un(n,7-n.getDay());return 0>s(t,e=new Date(e.Na+1900,e.Ra,e.Wa))?u(Math.ceil((31-t.getDate()+(rn(tn(e.getFullYear())?an:on,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(t,n)?\"01\":\"00\"},\"%V\":function(e){var n=new Date(e.Na+1901,0,4),t=c(new Date(e.Na+1900,0,4));n=c(n);var r=un(new Date(e.Na+1900,0,1),e.bb);return 0>s(r,t)?\"53\":0>=s(n,r)?\"01\":u(Math.ceil((t.getFullYear()<e.Na+1900?e.bb+32-t.getDate():e.bb+1-t.getDate())/7),2)},\"%w\":function(e){return e.ab},\"%W\":function(e){var n=new Date(e.Na,0,1),t=1===n.getDay()?n:un(n,0===n.getDay()?1:7-n.getDay()+1);return 0>s(t,e=new Date(e.Na+1900,e.Ra,e.Wa))?u(Math.ceil((31-t.getDate()+(rn(tn(e.getFullYear())?an:on,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(t,n)?\"01\":\"00\"},\"%y\":function(e){return(e.Na+1900).toString().substring(2)},\"%Y\":function(e){return e.Na+1900},\"%z\":function(e){var n=0<=(e=e.Ib);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.Lb},\"%%\":function(){return\"%\"}})a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](i)));return p=function(e){var n=Array(L(e)+1);return j(e,n,0,n.length),n}(a),p.length>t?0:(function(e,t){n().set(e,t)}(p,e),p.length-1)}var cn=[null,me,Te,Se,Ee,Me,xe,De,ke,Re,Ce,Fe,Ie,Ye,We,Pe,Ue,Ne,Le,Ze,$e,Je,Ke,en,nn],fn={b:function(e){return dn(e+16)+16},c:function(e,n,t){throw new _e(e).sb(n,t),e},M:function(e){bn(e,!y,1,!_),de.lb()},n:function(e){v?postMessage({cmd:\"cleanupThread\",thread:e}):pe(e)},p:function(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return D(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return v&&0===a.length?_n(687865856,e,n,t,r):(e={Hb:t,cb:e,Sa:r,Mb:a},v?(e.Nb=\"spawnThread\",postMessage(e,a),0):ye(e))},i:Te,U:Se,R:Ee,y:Me,A:xe,t:De,S:ke,H:Re,G:Ce,F:Fe,o:Ie,z:Ye,w:We,T:Pe,x:Ue,j:function(){oe(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},_:function(){oe(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},E:function(){return 2097152},Z:function(e,n,t){var a=performance.now();for(t=a+t,Atomics.exchange(r(),xn>>2,e);;){if((a=performance.now())>t)return Atomics.exchange(r(),xn>>2,0),-73;if(0==(a=Atomics.exchange(r(),xn>>2,0)))break;if(gn(),Atomics.load(r(),e>>2)!=n)return-6;Atomics.exchange(r(),xn>>2,e)}return 0},N:function(e,n){if(e==n)postMessage({cmd:\"processQueuedMainThreadWork\"});else if(v)postMessage({targetThread:e,cmd:\"processThreadQueue\"});else{if(!(e=(e=de.Oa[e])&&e.worker))return;e.postMessage({cmd:\"processThreadQueue\"})}return 1},V:function(e,n){e=new Date(1e3*r()[e>>2]),r()[n>>2]=e.getUTCSeconds(),r()[n+4>>2]=e.getUTCMinutes(),r()[n+8>>2]=e.getUTCHours(),r()[n+12>>2]=e.getUTCDate(),r()[n+16>>2]=e.getUTCMonth(),r()[n+20>>2]=e.getUTCFullYear()-1900,r()[n+24>>2]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2]=e},W:function(e,n){e=new Date(1e3*r()[e>>2]),r()[n>>2]=e.getSeconds(),r()[n+4>>2]=e.getMinutes(),r()[n+8>>2]=e.getHours(),r()[n+12>>2]=e.getDate(),r()[n+16>>2]=e.getMonth(),r()[n+20>>2]=e.getFullYear()-1900,r()[n+24>>2]=e.getDay();var t=new Date(e.getFullYear(),0,1),a=(e.getTime()-t.getTime())/864e5|0;r()[n+28>>2]=a,r()[n+36>>2]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(t=t.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(t,a)),r()[n+32>>2]=e},X:function(e){var n=new Date(r()[e+20>>2]+1900,r()[e+16>>2],r()[e+12>>2],r()[e+8>>2],r()[e+4>>2],r()[e>>2],0),t=r()[e+32>>2],a=n.getTimezoneOffset(),i=new Date(n.getFullYear(),0,1),o=new Date(n.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),s=Math.min(u,o);return 0>t?r()[e+32>>2]=Number(o!=u&&s==a):0<t!=(s==a)&&(o=Math.max(u,o),n.setTime(n.getTime()+6e4*((0<t?s:o)-a))),r()[e+24>>2]=n.getDay(),t=(n.getTime()-i.getTime())/864e5|0,r()[e+28>>2]=t,r()[e>>2]=n.getSeconds(),r()[e+4>>2]=n.getMinutes(),r()[e+8>>2]=n.getHours(),r()[e+12>>2]=n.getDate(),r()[e+16>>2]=n.getMonth(),n.getTime()/1e3|0},Y:function e(n,t,r){e.ob||(e.ob=!0,Ne(n,t,r))},d:function(){oe(\"\")},q:function(e,n){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return r()[ln()>>2]=28,-1;e=he()}return r()[n>>2]=e/1e3|0,r()[n+4>>2]=e%1e3*1e6|0,0},B:function(e,n){return e-n},m:function(){w||y||(E||(E={}),E[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]||(E[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]=1,D(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\")))},v:function(){return 2147483648},f:he,Q:function(e,n,r){t().copyWithin(e,n,n+r)},g:function(){return w?require(\"os\").cpus().length:navigator.hardwareConcurrency},I:function(e,n,t){He.length=n,t>>=3;for(var r=0;r<n;r++)He[r]=a()[t+r];return(0>e?ce[-e-1]:cn[e]).apply(null,He)},u:function(e){var n=t().length;if((e>>>=0)<=n||2147483648<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296),0<(a=Math.max(e,a))%65536&&(a+=65536-a%65536);e:{try{R.grow(Math.min(2147483648,a)-Y.byteLength+65535>>>16),z(R.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},K:function(e,n,t){return je(e)?qe(e,n,t):Le(e,n,t)},C:function(){throw\"unwind\"},L:function(e,n){n>>=2;var t=r()[n+6];return n={alpha:!!r()[n],depth:!!r()[n+1],stencil:!!r()[n+2],antialias:!!r()[n+3],premultipliedAlpha:!!r()[n+4],preserveDrawingBuffer:!!r()[n+5],powerPreference:ze[t],failIfMajorPerformanceCaveat:!!r()[n+7],xb:r()[n+8],Xb:r()[n+9],gb:r()[n+10],qb:r()[n+11],$b:r()[n+12],ac:r()[n+13]},!(e=je(e))||n.qb?0:function(e,n){e.hb||(e.hb=e.getContext,e.getContext=function(n,t){return\"webgl\"==n==(t=e.hb(n,t))instanceof WebGLRenderingContext?t:null});var t=e.getContext(\"webgl\",n);return t?function(e,n){var t=dn(8);r()[t+4>>2]=pn();var a={Vb:t,attributes:n,version:n.xb,Xa:e};return e.canvas&&(e.canvas.Ya=a),(void 0===n.gb||n.gb)&&function(e){if(e||(e=void 0),!e.tb){e.tb=!0;var n=e.Xa;!function(e){var n=e.getExtension(\"ANGLE_instanced_arrays\");n&&(e.vertexAttribDivisor=function(e,t){n.vertexAttribDivisorANGLE(e,t)},e.drawArraysInstanced=function(e,t,r,a){n.drawArraysInstancedANGLE(e,t,r,a)},e.drawElementsInstanced=function(e,t,r,a,i){n.drawElementsInstancedANGLE(e,t,r,a,i)})}(n),function(e){var n=e.getExtension(\"OES_vertex_array_object\");n&&(e.createVertexArray=function(){return n.createVertexArrayOES()},e.deleteVertexArray=function(e){n.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){n.bindVertexArrayOES(e)},e.isVertexArray=function(e){return n.isVertexArrayOES(e)})}(n),function(e){var n=e.getExtension(\"WEBGL_draw_buffers\");n&&(e.drawBuffers=function(e,t){n.drawBuffersWEBGL(e,t)})}(n),n.Pb=n.getExtension(\"EXT_disjoint_timer_query\"),n.Yb=n.getExtension(\"WEBGL_multi_draw\"),(n.getSupportedExtensions()||[]).forEach((function(e){e.includes(\"lose_context\")||e.includes(\"debug\")||n.getExtension(e)}))}}(a),t}(t,n):0}(e,n)},O:Ze,P:$e,D:function(e){Cn(e)},h:Je,l:Ke,s:en,k:nn,J:function(e){var n=Date.now();return r()[e>>2]=n/1e3|0,r()[e+4>>2]=n%1e3*1e3|0,0},a:R||i.wasmMemory,r:sn,e:function(e,n,t,r){return sn(e,n,t,r)}};!function(){function e(e,n){i.asm=e.exports,de.fb.push(i.asm.xa),X=i.asm.Ba,$.unshift(i.asm.$),C=n,v||(re--,i.monitorRunDependencies&&i.monitorRunDependencies(re),0==re&&(null!==ae&&(clearInterval(ae),ae=null),ie&&(e=ie,ie=null,e())))}function n(n){e(n.instance,n.module)}function t(e){return function(){if(!M&&(_||y)){if(\"function\"==typeof fetch&&!te.startsWith(\"file://\"))return fetch(te,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+te+\"'\";return e.arrayBuffer()})).catch((function(){return se()}));if(f)return new Promise((function(e,n){f(te,(function(n){e(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return se()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){D(\"failed to asynchronously prepare wasm: \"+e),oe(e)}))}var r={a:fn};if(v||(re++,i.monitorRunDependencies&&i.monitorRunDependencies(re)),i.instantiateWasm)try{return i.instantiateWasm(r,e)}catch(e){return D(\"Module.instantiateWasm callback failed with error: \"+e),!1}(M||\"function\"!=typeof WebAssembly.instantiateStreaming||ue()||te.startsWith(\"file://\")||\"function\"!=typeof fetch?t(n):fetch(te,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return D(\"wasm streaming compile failed: \"+e),D(\"falling back to ArrayBuffer instantiation\"),t(n)}))}))).catch(u)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.$).apply(null,arguments)},i._OrtInit=function(){return(i._OrtInit=i.asm.aa).apply(null,arguments)},i._OrtCreateSessionOptions=function(){return(i._OrtCreateSessionOptions=i.asm.ba).apply(null,arguments)},i._OrtAddSessionConfigEntry=function(){return(i._OrtAddSessionConfigEntry=i.asm.ca).apply(null,arguments)},i._OrtReleaseSessionOptions=function(){return(i._OrtReleaseSessionOptions=i.asm.da).apply(null,arguments)},i._OrtCreateSession=function(){return(i._OrtCreateSession=i.asm.ea).apply(null,arguments)},i._OrtReleaseSession=function(){return(i._OrtReleaseSession=i.asm.fa).apply(null,arguments)},i._OrtGetInputCount=function(){return(i._OrtGetInputCount=i.asm.ga).apply(null,arguments)},i._OrtGetOutputCount=function(){return(i._OrtGetOutputCount=i.asm.ha).apply(null,arguments)},i._OrtGetInputName=function(){return(i._OrtGetInputName=i.asm.ia).apply(null,arguments)},i._OrtGetOutputName=function(){return(i._OrtGetOutputName=i.asm.ja).apply(null,arguments)},i._OrtFree=function(){return(i._OrtFree=i.asm.ka).apply(null,arguments)},i._OrtCreateTensor=function(){return(i._OrtCreateTensor=i.asm.la).apply(null,arguments)},i._OrtGetTensorData=function(){return(i._OrtGetTensorData=i.asm.ma).apply(null,arguments)},i._OrtReleaseTensor=function(){return(i._OrtReleaseTensor=i.asm.na).apply(null,arguments)},i._OrtCreateRunOptions=function(){return(i._OrtCreateRunOptions=i.asm.oa).apply(null,arguments)},i._OrtAddRunConfigEntry=function(){return(i._OrtAddRunConfigEntry=i.asm.pa).apply(null,arguments)},i._OrtReleaseRunOptions=function(){return(i._OrtReleaseRunOptions=i.asm.qa).apply(null,arguments)},i._OrtRun=function(){return(i._OrtRun=i.asm.ra).apply(null,arguments)},i._OrtEndProfiling=function(){return(i._OrtEndProfiling=i.asm.sa).apply(null,arguments)};var ln=i.___errno_location=function(){return(ln=i.___errno_location=i.asm.ta).apply(null,arguments)},pn=i._pthread_self=function(){return(pn=i._pthread_self=i.asm.ua).apply(null,arguments)},dn=i._malloc=function(){return(dn=i._malloc=i.asm.va).apply(null,arguments)},mn=i._free=function(){return(mn=i._free=i.asm.wa).apply(null,arguments)};i._emscripten_tls_init=function(){return(i._emscripten_tls_init=i.asm.xa).apply(null,arguments)};var hn=i.___funcs_on_exit=function(){return(hn=i.___funcs_on_exit=i.asm.ya).apply(null,arguments)},gn=i._emscripten_main_thread_process_queued_calls=function(){return(gn=i._emscripten_main_thread_process_queued_calls=i.asm.za).apply(null,arguments)},bn=i.__emscripten_thread_init=function(){return(bn=i.__emscripten_thread_init=i.asm.Aa).apply(null,arguments)};i._emscripten_current_thread_process_queued_calls=function(){return(i._emscripten_current_thread_process_queued_calls=i.asm.Ca).apply(null,arguments)};var _n=i._emscripten_sync_run_in_main_thread_4=function(){return(_n=i._emscripten_sync_run_in_main_thread_4=i.asm.Da).apply(null,arguments)},yn=i._emscripten_run_in_main_runtime_thread_js=function(){return(yn=i._emscripten_run_in_main_runtime_thread_js=i.asm.Ea).apply(null,arguments)},wn=i._emscripten_dispatch_to_thread_=function(){return(wn=i._emscripten_dispatch_to_thread_=i.asm.Fa).apply(null,arguments)},vn=i.__emscripten_thread_free_data=function(){return(vn=i.__emscripten_thread_free_data=i.asm.Ga).apply(null,arguments)};i.__emscripten_thread_exit=function(){return(i.__emscripten_thread_exit=i.asm.Ha).apply(null,arguments)};var On,An=i._memalign=function(){return(An=i._memalign=i.asm.Ia).apply(null,arguments)},Tn=i._emscripten_stack_set_limits=function(){return(Tn=i._emscripten_stack_set_limits=i.asm.Ja).apply(null,arguments)},Sn=i.stackSave=function(){return(Sn=i.stackSave=i.asm.Ka).apply(null,arguments)},En=i.stackRestore=function(){return(En=i.stackRestore=i.asm.La).apply(null,arguments)},Mn=i.stackAlloc=function(){return(Mn=i.stackAlloc=i.asm.Ma).apply(null,arguments)},xn=i.__emscripten_main_thread_futex=687896,Dn=i.__emscripten_allow_main_runtime_queued_calls=683012;function kn(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function Rn(){function e(){if(!On&&(On=!0,i.calledRun=!0,!F)&&(v||fe($),o(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!v)){if(i.postRun)for(\"function\"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;){var e=i.postRun.shift();K.unshift(e)}fe(K)}}if(!(0<re))if(v)o(i),v||fe($),postMessage({cmd:\"loaded\"});else{if(i.preRun)for(\"function\"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)ne();fe(Z),0<re||(i.setStatus?(i.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){i.setStatus(\"\")}),1),e()}),1)):e())}}function Cn(e){if(v)throw me(e),\"unwind\";ee()||v||(hn(),fe(J),ve[1].length&&Oe(1,10),ve[2].length&&Oe(2,10),de.kb()),ee()||(de.kb(),i.onExit&&i.onExit(e),F=!0),b(e,new kn(e))}if(i.UTF8ToString=B,i.stringToUTF8=q,i.lengthBytesUTF8=L,i.keepRuntimeAlive=ee,i.PThread=de,i.stackSave=Sn,i.stackRestore=En,i.stackAlloc=Mn,i.PThread=de,i.wasmMemory=R,i.ExitStatus=kn,ie=function e(){On||Rn(),On||(ie=e)},i.run=Rn,i.preInit)for(\"function\"==typeof i.preInit&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return v&&(k=!1,de.ub()),Rn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar c;c||(c=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa=Object.assign,ba,g;c.ready=new Promise(function(a,b){ba=a;g=b});var ca=aa({},c),r=\"./this.program\",da=\"object\"===typeof window,t=\"function\"===typeof importScripts,ea=\"object\"===typeof process&&\"object\"===typeof process.versions&&\"string\"===typeof process.versions.node,w=\"\",x,y,A,fs,B,C;\r\nif(ea)w=t?require(\"path\").dirname(w)+\"/\":__dirname+\"/\",C=()=>{B||(fs=require(\"fs\"),B=require(\"path\"))},x=function(a,b){C();a=B.normalize(a);return fs.readFileSync(a,b?null:\"utf8\")},A=a=>{a=x(a,!0);a.buffer||(a=new Uint8Array(a));return a},y=(a,b,e)=>{C();a=B.normalize(a);fs.readFile(a,function(f,h){f?e(f):b(h.buffer)})},1<process.argv.length&&(r=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){throw a;}),process.on(\"unhandledRejection\",function(a){throw a;\r\n}),c.inspect=function(){return\"[Emscripten Module object]\"};else if(da||t)t?w=self.location.href:\"undefined\"!==typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),0!==w.indexOf(\"blob:\")?w=w.substr(0,w.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):w=\"\",x=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},t&&(A=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),\r\ny=(a,b,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?b(f.response):e()};f.onerror=e;f.send(null)};var fa=c.print||console.log.bind(console),D=c.printErr||console.warn.bind(console);aa(c,ca);ca=null;c.thisProgram&&(r=c.thisProgram);var E;c.wasmBinary&&(E=c.wasmBinary);var noExitRuntime=c.noExitRuntime||!1;\"object\"!==typeof WebAssembly&&F(\"no native wasm support detected\");\r\nvar G,ha=!1,ia=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ja(a,b,e){var f=b+e;for(e=b;a[e]&&!(e>=f);)++e;if(16<e-b&&a.subarray&&ia)return ia.decode(a.subarray(b,e));for(f=\"\";b<e;){var h=a[b++];if(h&128){var k=a[b++]&63;if(192==(h&224))f+=String.fromCharCode((h&31)<<6|k);else{var l=a[b++]&63;h=224==(h&240)?(h&15)<<12|k<<6|l:(h&7)<<18|k<<12|l<<6|a[b++]&63;65536>h?f+=String.fromCharCode(h):(h-=65536,f+=String.fromCharCode(55296|h>>10,56320|h&1023))}}else f+=String.fromCharCode(h)}return f}function H(a,b){return a?ja(I,a,b):\"\"}\r\nfunction J(a,b,e,f){if(!(0<f))return 0;var h=e;f=e+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var p=a.charCodeAt(++k);l=65536+((l&1023)<<10)|p&1023}if(127>=l){if(e>=f)break;b[e++]=l}else{if(2047>=l){if(e+1>=f)break;b[e++]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;b[e++]=224|l>>12}else{if(e+3>=f)break;b[e++]=240|l>>18;b[e++]=128|l>>12&63}b[e++]=128|l>>6&63}b[e++]=128|l&63}}b[e]=0;return e-h}\r\nfunction K(a){for(var b=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);55296<=f&&57343>=f&&(f=65536+((f&1023)<<10)|a.charCodeAt(++e)&1023);127>=f?++b:b=2047>=f?b+2:65535>=f?b+3:b+4}return b}function ka(a){var b=K(a)+1,e=L(b);e&&J(a,M,e,b);return e}var la,M,I,N;\r\nfunction ma(){var a=G.buffer;la=a;c.HEAP8=M=new Int8Array(a);c.HEAP16=new Int16Array(a);c.HEAP32=N=new Int32Array(a);c.HEAPU8=I=new Uint8Array(a);c.HEAPU16=new Uint16Array(a);c.HEAPU32=new Uint32Array(a);c.HEAPF32=new Float32Array(a);c.HEAPF64=new Float64Array(a)}var na,oa=[],pa=[],qa=[];function ra(){var a=c.preRun.shift();oa.unshift(a)}var O=0,P=null,Q=null;c.preloadedImages={};c.preloadedAudios={};\r\nfunction F(a){if(c.onAbort)c.onAbort(a);a=\"Aborted(\"+a+\")\";D(a);ha=!0;a=new WebAssembly.RuntimeError(a+\". Build with -s ASSERTIONS=1 for more info.\");g(a);throw a;}function sa(){return R.startsWith(\"data:application/octet-stream;base64,\")}var R;R=\"ort-wasm.wasm\";if(!sa()){var ta=R;R=c.locateFile?c.locateFile(ta,w):w+ta}function ua(){var a=R;try{if(a==R&&E)return new Uint8Array(E);if(A)return A(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){F(b)}}\r\nfunction va(){if(!E&&(da||t)){if(\"function\"===typeof fetch&&!R.startsWith(\"file://\"))return fetch(R,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+R+\"'\";return a.arrayBuffer()}).catch(function(){return ua()});if(y)return new Promise(function(a,b){y(R,function(e){a(new Uint8Array(e))},b)})}return Promise.resolve().then(function(){return ua()})}\r\nfunction S(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(c);else{var e=b.Na;\"number\"===typeof e?void 0===b.va?wa(e)():wa(e)(b.va):e(void 0===b.va?null:b.va)}}}var T=[];function wa(a){var b=T[a];b||(a>=T.length&&(T.length=a+1),T[a]=b=na.get(a));return b}\r\nfunction xa(a){this.qa=a-16;this.Fa=function(b){N[this.qa+4>>2]=b};this.Ca=function(b){N[this.qa+8>>2]=b};this.Da=function(){N[this.qa>>2]=0};this.Ba=function(){M[this.qa+12>>0]=0};this.Ea=function(){M[this.qa+13>>0]=0};this.ya=function(b,e){this.Fa(b);this.Ca(e);this.Da();this.Ba();this.Ea()}}var ya=0,za={},Aa=[null,[],[]],U={};\r\nfunction Ba(a,b,e){function f(v){return(v=v.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?v[1]:\"GMT\"}var h=(new Date).getFullYear(),k=new Date(h,0,1),l=new Date(h,6,1);h=k.getTimezoneOffset();var p=l.getTimezoneOffset();N[a>>2]=60*Math.max(h,p);N[b>>2]=Number(h!=p);a=f(k);b=f(l);a=ka(a);b=ka(b);p<h?(N[e>>2]=a,N[e+4>>2]=b):(N[e>>2]=b,N[e+4>>2]=a)}function Ca(a,b,e){Ca.xa||(Ca.xa=!0,Ba(a,b,e))}var Ga;Ga=ea?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var Ha={};\r\nfunction Ia(){if(!Ja){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:r||\"./this.program\"},b;for(b in Ha)void 0===Ha[b]?delete a[b]:a[b]=Ha[b];var e=[];for(b in a)e.push(b+\"=\"+a[b]);Ja=e}return Ja}var Ja;function V(a){return 0===a%4&&(0!==a%100||0===a%400)}function Ka(a,b){for(var e=0,f=0;f<=b;e+=a[f++]);return e}\r\nvar W=[31,29,31,30,31,30,31,31,30,31,30,31],X=[31,28,31,30,31,30,31,31,30,31,30,31];function Y(a,b){for(a=new Date(a.getTime());0<b;){var e=a.getMonth(),f=(V(a.getFullYear())?W:X)[e];if(b>f-a.getDate())b-=f-a.getDate()+1,a.setDate(1),11>e?a.setMonth(e+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\r\nfunction La(a,b,e,f){function h(d,m,n){for(d=\"number\"===typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function k(d,m){return h(d,m,\"0\")}function l(d,m){function n(Da){return 0>Da?-1:0<Da?1:0}var z;0===(z=n(d.getFullYear()-m.getFullYear()))&&0===(z=n(d.getMonth()-m.getMonth()))&&(z=n(d.getDate()-m.getDate()));return z}function p(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function v(d){d=Y(new Date(d.oa+1900,0,1),d.ua);var m=new Date(d.getFullYear()+1,0,4),n=p(new Date(d.getFullYear(),0,4));m=p(m);return 0>=l(n,d)?0>=l(m,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var u=N[f+40>>2];f={Ia:N[f>>2],Ha:N[f+4>>2],sa:N[f+8>>2],ra:N[f+12>>2],pa:N[f+16>>2],oa:N[f+20>>2],ta:N[f+24>>2],ua:N[f+28>>2],Qa:N[f+32>>2],Ga:N[f+\r\n36>>2],Ja:u?H(u):\"\"};e=H(e);u={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var q in u)e=e.replace(new RegExp(q,\"g\"),u[q]);var Ea=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),\r\nFa=\"January February March April May June July August September October November December\".split(\" \");u={\"%a\":function(d){return Ea[d.ta].substring(0,3)},\"%A\":function(d){return Ea[d.ta]},\"%b\":function(d){return Fa[d.pa].substring(0,3)},\"%B\":function(d){return Fa[d.pa]},\"%C\":function(d){return k((d.oa+1900)/100|0,2)},\"%d\":function(d){return k(d.ra,2)},\"%e\":function(d){return h(d.ra,2,\" \")},\"%g\":function(d){return v(d).toString().substring(2)},\"%G\":function(d){return v(d)},\"%H\":function(d){return k(d.sa,\r\n2)},\"%I\":function(d){d=d.sa;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":function(d){return k(d.ra+Ka(V(d.oa+1900)?W:X,d.pa-1),3)},\"%m\":function(d){return k(d.pa+1,2)},\"%M\":function(d){return k(d.Ha,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.sa&&12>d.sa?\"AM\":\"PM\"},\"%S\":function(d){return k(d.Ia,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ta||7},\"%U\":function(d){var m=new Date(d.oa+1900,0,1),n=0===m.getDay()?m:Y(m,7-m.getDay());d=new Date(d.oa+1900,d.pa,d.ra);return 0>\r\nl(n,d)?k(Math.ceil((31-n.getDate()+(Ka(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%V\":function(d){var m=new Date(d.oa+1901,0,4),n=p(new Date(d.oa+1900,0,4));m=p(m);var z=Y(new Date(d.oa+1900,0,1),d.ua);return 0>l(z,n)?\"53\":0>=l(m,z)?\"01\":k(Math.ceil((n.getFullYear()<d.oa+1900?d.ua+32-n.getDate():d.ua+1-n.getDate())/7),2)},\"%w\":function(d){return d.ta},\"%W\":function(d){var m=new Date(d.oa,0,1),n=1===m.getDay()?m:Y(m,0===m.getDay()?1:7-m.getDay()+1);d=new Date(d.oa+\r\n1900,d.pa,d.ra);return 0>l(n,d)?k(Math.ceil((31-n.getDate()+(Ka(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%y\":function(d){return(d.oa+1900).toString().substring(2)},\"%Y\":function(d){return d.oa+1900},\"%z\":function(d){d=d.Ga;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Ja},\"%%\":function(){return\"%\"}};for(q in u)e.includes(q)&&(e=e.replace(new RegExp(q,\"g\"),u[q](f)));q=Ma(e);if(q.length>b)return 0;\r\nM.set(q,a);return q.length-1}function Ma(a){var b=Array(K(a)+1);J(a,b,0,b.length);return b}\r\nvar Qa={a:function(a){return L(a+16)+16},b:function(a,b,e){(new xa(a)).ya(b,e);ya++;throw a;},g:function(){return 0},I:function(){},F:function(){},v:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(a,b){a=H(a);return U.Ka(a,b)},A:function(a,b,e,f,h,k){k<<=12;if(0!==(f&16)&&0!==a%65536)b=-28;else if(0!==(f&32)){a=65536*Math.ceil(b/65536);var l=Na(65536,a);l?(I.fill(0,l,l+a),a=l):a=0;a?(za[a]={Aa:a,za:b,wa:!0,fd:h,Pa:e,flags:f,offset:k},b=a):b=-48}else b=-52;return b},z:function(a,\r\nb){var e=za[a];0!==b&&e?(b===e.za&&(za[a]=null,e.wa&&Oa(e.Aa)),a=0):a=-28;return a},k:function(){},x:function(a,b,e){a=H(a);return U.La(a,b,e)},t:function(){},H:function(){},u:function(){},h:function(){F(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},n:function(){F(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},J:function(a,b){a=new Date(1E3*\r\nN[a>>2]);N[b>>2]=a.getUTCSeconds();N[b+4>>2]=a.getUTCMinutes();N[b+8>>2]=a.getUTCHours();N[b+12>>2]=a.getUTCDate();N[b+16>>2]=a.getUTCMonth();N[b+20>>2]=a.getUTCFullYear()-1900;N[b+24>>2]=a.getUTCDay();N[b+28>>2]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},K:function(a,b){a=new Date(1E3*N[a>>2]);N[b>>2]=a.getSeconds();N[b+4>>2]=a.getMinutes();N[b+8>>2]=a.getHours();N[b+12>>2]=a.getDate();N[b+16>>2]=a.getMonth();N[b+20>>2]=a.getFullYear()-1900;N[b+24>>2]=a.getDay();var e=new Date(a.getFullYear(),\r\n0,1);N[b+28>>2]=(a.getTime()-e.getTime())/864E5|0;N[b+36>>2]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=e.getTimezoneOffset();N[b+32>>2]=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0},L:function(a){var b=new Date(N[a+20>>2]+1900,N[a+16>>2],N[a+12>>2],N[a+8>>2],N[a+4>>2],N[a>>2],0),e=N[a+32>>2],f=b.getTimezoneOffset(),h=new Date(b.getFullYear(),0,1),k=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),l=h.getTimezoneOffset(),p=Math.min(l,k);0>e?N[a+32>>\r\n2]=Number(k!=l&&p==f):0<e!=(p==f)&&(k=Math.max(l,k),b.setTime(b.getTime()+6E4*((0<e?p:k)-f)));N[a+24>>2]=b.getDay();N[a+28>>2]=(b.getTime()-h.getTime())/864E5|0;N[a>>2]=b.getSeconds();N[a+4>>2]=b.getMinutes();N[a+8>>2]=b.getHours();N[a+12>>2]=b.getDate();N[a+16>>2]=b.getMonth();return b.getTime()/1E3|0},M:Ca,d:function(){F(\"\")},m:function(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=Ga();else return N[Pa()>>2]=28,-1;N[b>>2]=a/1E3|0;N[b+4>>2]=a%1E3*1E6|0;return 0},p:function(a,b){return a-b},\r\ns:function(){return 2147483648},l:Ga,E:function(a,b,e){I.copyWithin(a,b,b+e)},f:function(a){var b=I.length;a>>>=0;if(2147483648<a)return!1;for(var e=1;4>=e;e*=2){var f=b*(1+.2/e);f=Math.min(f,a+100663296);f=Math.max(a,f);0<f%65536&&(f+=65536-f%65536);a:{try{G.grow(Math.min(2147483648,f)-la.byteLength+65535>>>16);ma();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},C:function(a,b){var e=0;Ia().forEach(function(f,h){var k=b+e;h=N[a+4*h>>2]=k;for(k=0;k<f.length;++k)M[h++>>0]=f.charCodeAt(k);\r\nM[h>>0]=0;e+=f.length+1});return 0},D:function(a,b){var e=Ia();N[a>>2]=e.length;var f=0;e.forEach(function(h){f+=h.length+1});N[b>>2]=f;return 0},e:function(){return 0},j:function(a,b,e,f){a=U.Oa(a);b=U.Ma(a,b,e);N[f>>2]=b;return 0},q:function(){},i:function(a,b,e,f){for(var h=0,k=0;k<e;k++){var l=N[b>>2],p=N[b+4>>2];b+=8;for(var v=0;v<p;v++){var u=I[l+v],q=Aa[a];0===u||10===u?((1===a?fa:D)(ja(q,0)),q.length=0):q.push(u)}h+=p}N[f>>2]=h;return 0},w:function(a){var b=Date.now();N[a>>2]=b/1E3|0;N[a+\r\n4>>2]=b%1E3*1E3|0;return 0},o:La,c:function(a,b,e,f){return La(a,b,e,f)}};\r\n(function(){function a(h){c.asm=h.exports;G=c.asm.N;ma();na=c.asm.ja;pa.unshift(c.asm.O);O--;c.monitorRunDependencies&&c.monitorRunDependencies(O);0==O&&(null!==P&&(clearInterval(P),P=null),Q&&(h=Q,Q=null,h()))}function b(h){a(h.instance)}function e(h){return va().then(function(k){return WebAssembly.instantiate(k,f)}).then(function(k){return k}).then(h,function(k){D(\"failed to asynchronously prepare wasm: \"+k);F(k)})}var f={a:Qa};O++;c.monitorRunDependencies&&c.monitorRunDependencies(O);if(c.instantiateWasm)try{return c.instantiateWasm(f,\r\na)}catch(h){return D(\"Module.instantiateWasm callback failed with error: \"+h),!1}(function(){return E||\"function\"!==typeof WebAssembly.instantiateStreaming||sa()||R.startsWith(\"file://\")||\"function\"!==typeof fetch?e(b):fetch(R,{credentials:\"same-origin\"}).then(function(h){return WebAssembly.instantiateStreaming(h,f).then(b,function(k){D(\"wasm streaming compile failed: \"+k);D(\"falling back to ArrayBuffer instantiation\");return e(b)})})})().catch(g);return{}})();\r\nc.___wasm_call_ctors=function(){return(c.___wasm_call_ctors=c.asm.O).apply(null,arguments)};c._OrtInit=function(){return(c._OrtInit=c.asm.P).apply(null,arguments)};c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.Q).apply(null,arguments)};c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.R).apply(null,arguments)};c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.S).apply(null,arguments)};\r\nc._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.T).apply(null,arguments)};c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.U).apply(null,arguments)};c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.V).apply(null,arguments)};c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm.W).apply(null,arguments)};c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.X).apply(null,arguments)};\r\nc._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.Y).apply(null,arguments)};c._OrtFree=function(){return(c._OrtFree=c.asm.Z).apply(null,arguments)};c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm._).apply(null,arguments)};c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.$).apply(null,arguments)};c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.aa).apply(null,arguments)};\r\nc._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.ba).apply(null,arguments)};c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.ca).apply(null,arguments)};c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.da).apply(null,arguments)};c._OrtRun=function(){return(c._OrtRun=c.asm.ea).apply(null,arguments)};c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.fa).apply(null,arguments)};\r\nvar Pa=c.___errno_location=function(){return(Pa=c.___errno_location=c.asm.ga).apply(null,arguments)},L=c._malloc=function(){return(L=c._malloc=c.asm.ha).apply(null,arguments)},Oa=c._free=function(){return(Oa=c._free=c.asm.ia).apply(null,arguments)},Na=c._memalign=function(){return(Na=c._memalign=c.asm.ka).apply(null,arguments)},Ra=c.stackSave=function(){return(Ra=c.stackSave=c.asm.la).apply(null,arguments)},Sa=c.stackRestore=function(){return(Sa=c.stackRestore=c.asm.ma).apply(null,arguments)},Ta=\r\nc.stackAlloc=function(){return(Ta=c.stackAlloc=c.asm.na).apply(null,arguments)};c.UTF8ToString=H;c.stringToUTF8=function(a,b,e){return J(a,I,b,e)};c.lengthBytesUTF8=K;c.stackSave=Ra;c.stackRestore=Sa;c.stackAlloc=Ta;var Z;Q=function Ua(){Z||Va();Z||(Q=Ua)};\r\nfunction Va(){function a(){if(!Z&&(Z=!0,c.calledRun=!0,!ha)){S(pa);ba(c);if(c.onRuntimeInitialized)c.onRuntimeInitialized();if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var b=c.postRun.shift();qa.unshift(b)}S(qa)}}if(!(0<O)){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)ra();S(oa);0<O||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){c.setStatus(\"\")},1);a()},1)):a())}}c.run=Va;\r\nif(c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();Va();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\nimport {promisify} from 'util';\nimport {initWasm} from './wasm/proxy-wrapper';\n\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    let buffer: Uint8Array;\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        buffer = await promisify(readFile)(pathOrBuffer);\n      } else {\n        // browser\n        const response = await fetch(pathOrBuffer);\n        const arrayBuffer = await response.arrayBuffer();\n        buffer = new Uint8Array(arrayBuffer);\n      }\n    } else {\n      buffer = pathOrBuffer;\n    }\n\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(buffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -1);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('wasm', wasmBackend, 0);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\n\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ?\n        this.session.getTextureData(tensorId, isPacked) :\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, parseAveragePoolAttributes} from './ops/pool';\nimport {globalAveragePool, parseGlobalAveragePoolAttributes} from './ops/pool';\nimport {maxPool, parseMaxPoolAttributes} from './ops/pool';\nimport {globalMaxPool} from './ops/pool';\nimport {reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {parseReduceAttributes} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\nimport {ConcatAttributes} from './concat';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActicationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\nimport {getActicationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/master/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/master/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    roiInputIdx = 1;\n    scalesInputIdx = 2;\n    sizesInputIdx = 3;\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\nfunction createCanvas(): HTMLCanvasElement {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {Tensor} from './tensor';\nimport {LongUtil, ProtoUtil, MIN_CLIP, MAX_CLIP} from './util';\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {LongUtil} from './util';\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\nimport {OrtWasmMessage, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, (scriptSrc as string).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {createSession, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\nimport {SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n      const modelDataOffset = wasm._malloc(model.byteLength);\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        wasm.HEAPU8.set(model, modelDataOffset);\n        sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelDataOffset);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int32';\n    case DataType.uint64:\n      return 'uint32';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't get a tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.11.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={474:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||__filename,function(e){function t(){return C.buffer!=U&&$(C.buffer),W}function r(){return C.buffer!=U&&$(C.buffer),L}function a(){return C.buffer!=U&&$(C.buffer),H}function o(){return C.buffer!=U&&$(C.buffer),Y}var i;e=e||{},i||(i=void 0!==e?e:{});var s,u,c=Object.assign;i.ready=new Promise((function(e,t){s=e,u=t}));var l,f,p,d,m,g,h=c({},i),y=\\\"./this.program\\\",b=(e,t)=>{throw t},v=\\\"object\\\"==typeof window,_=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=i.ENVIRONMENT_IS_PTHREAD||!1,A=\\\"\\\";function S(e){return i.locateFile?i.locateFile(e,A):A+e}if(w){let t;A=_?n(622).dirname(A)+\\\"/\\\":__dirname+\\\"/\\\",g=()=>{m||(d=n(747),m=n(622))},l=function(e,t){return g(),e=m.normalize(e),d.readFileSync(e,t?null:\\\"utf8\\\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{g(),e=m.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof xt))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),b=(e,t)=>{if(te())throw process.exitCode=e,t;t instanceof xt||x(\\\"exiting due to exception: \\\"+t),process.exit(e)},i.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=n(13)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(v||_)&&(_?A=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\\\"blob:\\\")?A.substr(0,A.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},_&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(global.performance=n(630).performance);var E=console.log.bind(console),T=console.warn.bind(console);w&&(g(),E=e=>d.writeSync(1,e+\\\"\\\\n\\\"),T=e=>d.writeSync(2,e+\\\"\\\\n\\\"));var M,D,R=i.print||E,x=i.printErr||T;c(i,h),h=null,i.thisProgram&&(y=i.thisProgram),i.quit&&(b=i.quit),i.wasmBinary&&(D=i.wasmBinary);var k=i.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&se(\\\"no native wasm support detected\\\");var C,F,P=!1;function I(e){var t=new TextDecoder(e);this.decode=e=>(e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),t.decode.call(t,e))}var U,W,L,H,Y,j=\\\"undefined\\\"!=typeof TextDecoder?new I(\\\"utf8\\\"):void 0;function B(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&j)return j.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function N(e,t){return e?B(r(),e,t):\\\"\\\"}function G(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++]=i}else{if(2047>=i){if(n+1>=r)break;t[n++]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++]=224|i>>12}else{if(n+3>=r)break;t[n++]=240|i>>18,t[n++]=128|i>>12&63}t[n++]=128|i>>6&63}t[n++]=128|63&i}}return t[n]=0,n-a}function z(e,t,n){return G(e,r(),t,n)}function q(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function V(e){var n=q(e)+1,r=dt(n);return r&&G(e,t(),r,n),r}function $(e){U=e,i.HEAP8=W=new Int8Array(e),i.HEAP16=new Int16Array(e),i.HEAP32=H=new Int32Array(e),i.HEAPU8=L=new Uint8Array(e),i.HEAPU16=new Uint16Array(e),i.HEAPU32=new Uint32Array(e),i.HEAPF32=new Float32Array(e),i.HEAPF64=Y=new Float64Array(e)}\\\"undefined\\\"!=typeof TextDecoder&&new I(\\\"utf-16le\\\"),O&&(U=i.buffer);var X=i.INITIAL_MEMORY||16777216;if(O)C=i.wasmMemory,U=i.buffer;else if(i.wasmMemory)C=i.wasmMemory;else if(!((C=new WebAssembly.Memory({initial:X/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");C&&(U=C.buffer),X=U.byteLength,$(U);var Q,J=[],Z=[],K=[],ee=[];function te(){return k||!1}function ne(){var e=i.preRun.shift();J.unshift(e)}var re,ae=0,oe=null,ie=null;function se(e){throw O?postMessage({cmd:\\\"onAbort\\\",arg:e}):i.onAbort&&i.onAbort(e),x(e=\\\"Aborted(\\\"+e+\\\")\\\"),P=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -s ASSERTIONS=1 for more info.\\\"),u(e),e}function ue(){return re.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ce(){var e=re;try{if(e==re&&D)return new Uint8Array(D);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){se(e)}}i.preloadedImages={},i.preloadedAudios={},re=\\\"ort-wasm-threaded.wasm\\\",ue()||(re=S(re));var le={};function fe(e){for(;0<e.length;){var t=e.shift();if(\\\"function\\\"==typeof t)t(i);else{var n=t.Tb;\\\"number\\\"==typeof n?void 0===t.Sa?be(n)():be(n)(t.Sa):n(void 0===t.Sa?null:t.Sa)}}}function pe(e){var t=Et();return e=e(),Tt(t),e}function de(e){var t=me.Oa[e];t&&(a()[e>>2]=0,me.jb(t.worker))}var me={Pa:[],Va:[],fb:[],Wb:function(){},ub:function(){me.receiveObjectTransfer=me.zb,me.threadInit=me.lb,me.setExitStatus=me.Bb},Oa:{},Bb:function(){},kb:function(){for(var e in me.Oa){var t=me.Oa[e];t&&t.worker&&me.jb(t.worker)}for(e=0;e<me.Pa.length;++e)me.Pa[e].terminate();me.Pa=[]},jb:function(e){me.Ab((function(){delete me.Oa[e.Qa.eb],me.Pa.push(e),me.Va.splice(me.Va.indexOf(e),1),wt(e.Qa.eb),e.Qa=void 0}))},Ab:function(e){a()[Rt>>2]=0;try{e()}finally{a()[Rt>>2]=1}},zb:function(){},lb:function(){for(var e in me.fb)me.fb[e]()},wb:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.Qa&&(me.pb=e.Qa.eb),n.targetThread&&n.targetThread!=pt()){var o=me.Oa[n.bc];o?o.worker.postMessage(n,n.transferList):x('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processQueuedMainThreadWork\\\"===r?ht():\\\"spawnThread\\\"===r?_e(n):\\\"cleanupThread\\\"===r?de(n.thread):\\\"killThread\\\"===r?(n=n.thread,a()[n>>2]=0,r=me.Oa[n],delete me.Oa[n],r.worker.terminate(),wt(n),me.Va.splice(me.Va.indexOf(r.worker),1),r.worker.Qa=void 0):\\\"cancelThread\\\"===r?me.Oa[n.thread].worker.postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t&&t(e),e.Ua&&(e.Ua(),delete e.Ua)):\\\"print\\\"===r?R(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"onAbort\\\"===r?i.onAbort&&i.onAbort(n.arg):x(\\\"worker sent an unknown command \\\"+r);me.pb=void 0},e.onerror=e=>{throw x(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:i.mainScriptUrlOrBlob||_scriptDir,wasmMemory:C,wasmModule:F})},mb:function(){var e=S(\\\"ort-wasm-threaded.worker.js\\\");me.Pa.push(new Worker(e))},rb:function(){return 0==me.Pa.length&&(me.mb(),me.wb(me.Pa[0])),me.Pa.pop()}};function ge(e){if(O)return je(1,0,e);try{Ct(e)}catch(e){e instanceof xt||\\\"unwind\\\"==e||b(1,e)}}i.establishStackSpace=function(){var e=pt(),t=a()[e+44>>2];e=a()[e+48>>2],St(t,t-e),Tt(t)};var he,ye=[];function be(e){var t=ye[e];return t||(e>=ye.length&&(ye.length=e+1),ye[e]=t=Q.get(e)),t}function ve(e){this.Ta=e-16,this.Gb=function(e){a()[this.Ta+4>>2]=e},this.Db=function(e){a()[this.Ta+8>>2]=e},this.Eb=function(){a()[this.Ta>>2]=0},this.Cb=function(){t()[this.Ta+12>>0]=0},this.Fb=function(){t()[this.Ta+13>>0]=0},this.sb=function(e,t){this.Gb(e),this.Db(t),this.Eb(),this.Cb(),this.Fb()}}function _e(e){var t=me.rb();if(!t)return 6;me.Va.push(t);var n=me.Oa[e.cb]={worker:t,eb:e.cb};t.Qa=n;var r={cmd:\\\"run\\\",start_routine:e.Hb,arg:e.Sa,threadInfoStruct:e.cb};return t.Ua=()=>{r.time=performance.now(),t.postMessage(r,e.Mb)},t.loaded&&(t.Ua(),delete t.Ua),0}i.invokeEntryPoint=function(e,t){return be(e)(t)},he=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-i.__performance_now_clock_drift:()=>performance.now();var we={},Oe=[null,[],[]];function Ae(e,t){var n=Oe[e];0===t||10===t?((1===e?R:x)(B(n,0)),n.length=0):n.push(t)}var Se={};function Ee(e,t,n){return O?je(2,1,e,t,n):0}function Te(e,t){if(O)return je(3,1,e,t)}function Me(e,t,n,r){if(O)return je(4,1,e,t,n,r)}function De(e,t){if(O)return je(5,1,e,t)}function Re(e,t,n){if(O)return je(6,1,e,t,n)}function xe(e,t,n){return O?je(7,1,e,t,n):0}function ke(e,t){if(O)return je(8,1,e,t)}function Ce(e,t){return O?je(9,1,e,t):(e=N(e),Se.Qb(e,t))}function Fe(e,t,n,a,o,i){if(O)t=je(10,1,e,t,n,a,o,i);else if(i<<=12,0!=(16&a)&&0!=e%65536)t=-28;else if(0!=(32&a)){var s=65536*Math.ceil(t/65536);(e=At(65536,s))?r().fill(0,e,e+s):e=0,e?(we[e]={yb:e,vb:t,nb:!0,fd:o,Zb:n,flags:a,offset:i},t=e):t=-48}else t=-52;return t}function Pe(e,t){if(O)e=je(11,1,e,t);else{var n=we[e];0!==t&&n?(t===n.vb&&(we[e]=null,n.nb&&mt(n.yb)),e=0):e=-28}return e}function Ie(e,t,n){if(O)return je(12,1,e,t,n)}function Ue(e,t,n){return O?je(13,1,e,t,n):(e=N(e),Se.Rb(e,t,n))}function We(e){if(O)return je(14,1,e)}function Le(e,t){if(O)return je(15,1,e,t)}function He(e){if(O)return je(16,1,e)}function Ye(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return je(17,1,e,t,n);var o=(new Date).getFullYear(),i=new Date(o,0,1),s=new Date(o,6,1);o=i.getTimezoneOffset();var u=s.getTimezoneOffset(),c=Math.max(o,u);a()[e>>2]=60*c,a()[t>>2]=Number(o!=u),e=r(i),t=r(s),e=V(e),t=V(t),u<o?(a()[n>>2]=e,a()[n+4>>2]=t):(a()[n>>2]=t,a()[n+4>>2]=e)}function je(e,t){var n=arguments.length-2,r=arguments;return pe((function(){for(var a=Mt(8*n),i=a>>3,s=0;s<n;s++){var u=r[2+s];o()[i+s]=u}return vt(e,n,a,t)}))}var Be=[],Ne=[0,\\\"undefined\\\"!=typeof document?document:0,\\\"undefined\\\"!=typeof window?window:0];function Ge(e){return e=2<e?N(e):e,Ne[e]||(\\\"undefined\\\"!=typeof document?document.querySelector(e):void 0)}function ze(e,t,n){var r=Ge(e);return r?(r.Za&&(a()[r.Za>>2]=t,a()[r.Za+4>>2]=n),!r.ib&&r.Ob?r.Za?(function(e,t,n,r){pe((function(){var o=Mt(12),i=0;if(t){i=q(t)+1;var s=dt(i);z(t,s,i),i=s}a()[o>>2]=i,a()[o+4>>2]=n,a()[o+8>>2]=r,_t(e,657457152,0,i,o)}))}(r=a()[r.Za+8>>2],e=e?N(e):\\\"\\\",t,n),1):-4:(r.ib&&(r=r.ib),e=!1,r.Ya&&r.Ya.Xa&&(e=0===(e=r.Ya.Xa.getParameter(2978))[0]&&0===e[1]&&e[2]===r.width&&e[3]===r.height),r.width=t,r.height=n,e&&r.Ya.Xa.viewport(0,0,t,n),0)):-4}function qe(e,t,n){return O?je(18,1,e,t,n):ze(e,t,n)}var Ve,$e=[\\\"default\\\",\\\"low-power\\\",\\\"high-performance\\\"],Xe={};function Qe(){if(!Ve){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Ve=n}return Ve}function Je(e,n){if(O)return je(19,1,e,n);var r=0;return Qe().forEach((function(o,i){var s=n+r;for(i=a()[e+4*i>>2]=s,s=0;s<o.length;++s)t()[i++>>0]=o.charCodeAt(s);t()[i>>0]=0,r+=o.length+1})),0}function Ze(e,t){if(O)return je(20,1,e,t);var n=Qe();a()[e>>2]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),a()[t>>2]=r,0}function Ke(e){return O?je(21,1,e):0}function et(e,t,n,r){return O?je(22,1,e,t,n,r):(e=Se.Ub(e),t=Se.Sb(e,t,n),a()[r>>2]=t,0)}function tt(e,t,n,r,a){if(O)return je(23,1,e,t,n,r,a)}function nt(e,t,n,o){if(O)return je(24,1,e,t,n,o);for(var i=0,s=0;s<n;s++){var u=a()[t>>2],c=a()[t+4>>2];t+=8;for(var l=0;l<c;l++)Ae(e,r()[u+l]);i+=c}return a()[o>>2]=i,0}function rt(e){return 0==e%4&&(0!=e%100||0==e%400)}function at(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var ot=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31];function st(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(rt(e.getFullYear())?ot:it)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function ut(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function s(e,t){return i(e,t,\\\"0\\\")}function u(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){e=st(new Date(e.Na+1900,0,1),e.bb);var t=new Date(e.getFullYear()+1,0,4),n=c(new Date(e.getFullYear(),0,4));return t=c(t),0>=u(n,e)?0>=u(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2];for(var p in o={Kb:a()[o>>2],Jb:a()[o+4>>2],$a:a()[o+8>>2],Wa:a()[o+12>>2],Ra:a()[o+16>>2],Na:a()[o+20>>2],ab:a()[o+24>>2],bb:a()[o+28>>2],cc:a()[o+32>>2],Ib:a()[o+36>>2],Lb:f?N(f):\\\"\\\"},r=N(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),m=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.ab].substring(0,3)},\\\"%A\\\":function(e){return d[e.ab]},\\\"%b\\\":function(e){return m[e.Ra].substring(0,3)},\\\"%B\\\":function(e){return m[e.Ra]},\\\"%C\\\":function(e){return s((e.Na+1900)/100|0,2)},\\\"%d\\\":function(e){return s(e.Wa,2)},\\\"%e\\\":function(e){return i(e.Wa,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return s(e.$a,2)},\\\"%I\\\":function(e){return 0==(e=e.$a)?e=12:12<e&&(e-=12),s(e,2)},\\\"%j\\\":function(e){return s(e.Wa+at(rt(e.Na+1900)?ot:it,e.Ra-1),3)},\\\"%m\\\":function(e){return s(e.Ra+1,2)},\\\"%M\\\":function(e){return s(e.Jb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.$a&&12>e.$a?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return s(e.Kb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ab||7},\\\"%U\\\":function(e){var t=new Date(e.Na+1900,0,1),n=0===t.getDay()?t:st(t,7-t.getDay());return 0>u(n,e=new Date(e.Na+1900,e.Ra,e.Wa))?s(Math.ceil((31-n.getDate()+(at(rt(e.getFullYear())?ot:it,e.getMonth()-1)-31)+e.getDate())/7),2):0===u(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%V\\\":function(e){var t=new Date(e.Na+1901,0,4),n=c(new Date(e.Na+1900,0,4));t=c(t);var r=st(new Date(e.Na+1900,0,1),e.bb);return 0>u(r,n)?\\\"53\\\":0>=u(t,r)?\\\"01\\\":s(Math.ceil((n.getFullYear()<e.Na+1900?e.bb+32-n.getDate():e.bb+1-n.getDate())/7),2)},\\\"%w\\\":function(e){return e.ab},\\\"%W\\\":function(e){var t=new Date(e.Na,0,1),n=1===t.getDay()?t:st(t,0===t.getDay()?1:7-t.getDay()+1);return 0>u(n,e=new Date(e.Na+1900,e.Ra,e.Wa))?s(Math.ceil((31-n.getDate()+(at(rt(e.getFullYear())?ot:it,e.getMonth()-1)-31)+e.getDate())/7),2):0===u(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%y\\\":function(e){return(e.Na+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Na+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ib);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Lb},\\\"%%\\\":function(){return\\\"%\\\"}})r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(q(e)+1);return G(e,t,0,t.length),t}(r),p.length>n?0:(function(e,n){t().set(e,n)}(p,e),p.length-1)}var ct=[null,ge,Ee,Te,Me,De,Re,xe,ke,Ce,Fe,Pe,Ie,Ue,We,Le,He,Ye,qe,Je,Ze,Ke,et,tt,nt],lt={b:function(e){return dt(e+16)+16},c:function(e,t,n){throw new ve(e).sb(t,n),e},M:function(e){yt(e,!_,1,!v),me.lb()},n:function(e){O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):de(e)},p:function(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?bt(687865856,e,t,n,r):(e={Hb:n,cb:e,Sa:r,Mb:a},O?(e.Nb=\\\"spawnThread\\\",postMessage(e,a),0):_e(e))},i:Ee,U:Te,R:Me,y:De,A:Re,t:xe,S:ke,H:Ce,G:Fe,F:Pe,o:Ie,z:Ue,w:We,T:Le,x:He,j:function(){se(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},_:function(){se(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},E:function(){return 2097152},Z:function(e,t,n){var r=performance.now();for(n=r+n,Atomics.exchange(a(),Dt>>2,e);;){if((r=performance.now())>n)return Atomics.exchange(a(),Dt>>2,0),-73;if(0==(r=Atomics.exchange(a(),Dt>>2,0)))break;if(ht(),Atomics.load(a(),e>>2)!=t)return-6;Atomics.exchange(a(),Dt>>2,e)}return 0},N:function(e,t){if(e==t)postMessage({cmd:\\\"processQueuedMainThreadWork\\\"});else if(O)postMessage({targetThread:e,cmd:\\\"processThreadQueue\\\"});else{if(!(e=(e=me.Oa[e])&&e.worker))return;e.postMessage({cmd:\\\"processThreadQueue\\\"})}return 1},V:function(e,t){e=new Date(1e3*a()[e>>2]),a()[t>>2]=e.getUTCSeconds(),a()[t+4>>2]=e.getUTCMinutes(),a()[t+8>>2]=e.getUTCHours(),a()[t+12>>2]=e.getUTCDate(),a()[t+16>>2]=e.getUTCMonth(),a()[t+20>>2]=e.getUTCFullYear()-1900,a()[t+24>>2]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2]=e},W:function(e,t){e=new Date(1e3*a()[e>>2]),a()[t>>2]=e.getSeconds(),a()[t+4>>2]=e.getMinutes(),a()[t+8>>2]=e.getHours(),a()[t+12>>2]=e.getDate(),a()[t+16>>2]=e.getMonth(),a()[t+20>>2]=e.getFullYear()-1900,a()[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2]=r,a()[t+36>>2]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2]=e},X:function(e){var t=new Date(a()[e+20>>2]+1900,a()[e+16>>2],a()[e+12>>2],a()[e+8>>2],a()[e+4>>2],a()[e>>2],0),n=a()[e+32>>2],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),s=o.getTimezoneOffset(),u=Math.min(s,i);return 0>n?a()[e+32>>2]=Number(i!=s&&u==r):0<n!=(u==r)&&(i=Math.max(s,i),t.setTime(t.getTime()+6e4*((0<n?u:i)-r))),a()[e+24>>2]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2]=n,a()[e>>2]=t.getSeconds(),a()[e+4>>2]=t.getMinutes(),a()[e+8>>2]=t.getHours(),a()[e+12>>2]=t.getDate(),a()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},Y:function e(t,n,r){e.ob||(e.ob=!0,Ye(t,n,r))},d:function(){se(\\\"\\\")},q:function(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return a()[ft()>>2]=28,-1;e=he()}return a()[t>>2]=e/1e3|0,a()[t+4>>2]=e%1e3*1e6|0,0},B:function(e,t){return e-t},m:function(){w||_||(M||(M={}),M[\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\"]||(M[\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\"]=1,x(\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\")))},v:function(){return 2147483648},f:he,Q:function(e,t,n){r().copyWithin(e,t,t+n)},g:function(){return w?n(87).cpus().length:navigator.hardwareConcurrency},I:function(e,t,n){Be.length=t,n>>=3;for(var r=0;r<t;r++)Be[r]=o()[n+r];return(0>e?le[-e-1]:ct[e]).apply(null,Be)},u:function(e){var t=r().length;if((e>>>=0)<=t||2147483648<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296),0<(a=Math.max(e,a))%65536&&(a+=65536-a%65536);e:{try{C.grow(Math.min(2147483648,a)-U.byteLength+65535>>>16),$(C.buffer);var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},K:function(e,t,n){return Ge(e)?ze(e,t,n):qe(e,t,n)},C:function(){throw\\\"unwind\\\"},L:function(e,t){t>>=2;var n=a()[t+6];return t={alpha:!!a()[t],depth:!!a()[t+1],stencil:!!a()[t+2],antialias:!!a()[t+3],premultipliedAlpha:!!a()[t+4],preserveDrawingBuffer:!!a()[t+5],powerPreference:$e[n],failIfMajorPerformanceCaveat:!!a()[t+7],xb:a()[t+8],Xb:a()[t+9],gb:a()[t+10],qb:a()[t+11],$b:a()[t+12],ac:a()[t+13]},!(e=Ge(e))||t.qb?0:function(e,t){e.hb||(e.hb=e.getContext,e.getContext=function(t,n){return\\\"webgl\\\"==t==(n=e.hb(t,n))instanceof WebGLRenderingContext?n:null});var n=e.getContext(\\\"webgl\\\",t);return n?function(e,t){var n=dt(8);a()[n+4>>2]=pt();var r={Vb:n,attributes:t,version:t.xb,Xa:e};return e.canvas&&(e.canvas.Ya=r),(void 0===t.gb||t.gb)&&function(e){if(e||(e=void 0),!e.tb){e.tb=!0;var t=e.Xa;!function(e){var t=e.getExtension(\\\"ANGLE_instanced_arrays\\\");t&&(e.vertexAttribDivisor=function(e,n){t.vertexAttribDivisorANGLE(e,n)},e.drawArraysInstanced=function(e,n,r,a){t.drawArraysInstancedANGLE(e,n,r,a)},e.drawElementsInstanced=function(e,n,r,a,o){t.drawElementsInstancedANGLE(e,n,r,a,o)})}(t),function(e){var t=e.getExtension(\\\"OES_vertex_array_object\\\");t&&(e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)})}(t),function(e){var t=e.getExtension(\\\"WEBGL_draw_buffers\\\");t&&(e.drawBuffers=function(e,n){t.drawBuffersWEBGL(e,n)})}(t),t.Pb=t.getExtension(\\\"EXT_disjoint_timer_query\\\"),t.Yb=t.getExtension(\\\"WEBGL_multi_draw\\\"),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes(\\\"lose_context\\\")||e.includes(\\\"debug\\\")||t.getExtension(e)}))}}(r),n}(n,t):0}(e,t)},O:Je,P:Ze,D:function(e){Ct(e)},h:Ke,l:et,s:tt,k:nt,J:function(e){var t=Date.now();return a()[e>>2]=t/1e3|0,a()[e+4>>2]=t%1e3*1e3|0,0},a:C||i.wasmMemory,r:ut,e:function(e,t,n,r){return ut(e,t,n,r)}};!function(){function e(e,t){i.asm=e.exports,me.fb.push(i.asm.xa),Q=i.asm.Ba,Z.unshift(i.asm.$),F=t,O||(ae--,i.monitorRunDependencies&&i.monitorRunDependencies(ae),0==ae&&(null!==oe&&(clearInterval(oe),oe=null),ie&&(e=ie,ie=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!D&&(v||_)){if(\\\"function\\\"==typeof fetch&&!re.startsWith(\\\"file://\\\"))return fetch(re,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+re+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return ce()}));if(f)return new Promise((function(e,t){f(re,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ce()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\\\"failed to asynchronously prepare wasm: \\\"+e),se(e)}))}var r={a:lt};if(O||(ae++,i.monitorRunDependencies&&i.monitorRunDependencies(ae)),i.instantiateWasm)try{return i.instantiateWasm(r,e)}catch(e){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(D||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ue()||re.startsWith(\\\"file://\\\")||\\\"function\\\"!=typeof fetch?n(t):fetch(re,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return x(\\\"wasm streaming compile failed: \\\"+e),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(u)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.$).apply(null,arguments)},i._OrtInit=function(){return(i._OrtInit=i.asm.aa).apply(null,arguments)},i._OrtCreateSessionOptions=function(){return(i._OrtCreateSessionOptions=i.asm.ba).apply(null,arguments)},i._OrtAddSessionConfigEntry=function(){return(i._OrtAddSessionConfigEntry=i.asm.ca).apply(null,arguments)},i._OrtReleaseSessionOptions=function(){return(i._OrtReleaseSessionOptions=i.asm.da).apply(null,arguments)},i._OrtCreateSession=function(){return(i._OrtCreateSession=i.asm.ea).apply(null,arguments)},i._OrtReleaseSession=function(){return(i._OrtReleaseSession=i.asm.fa).apply(null,arguments)},i._OrtGetInputCount=function(){return(i._OrtGetInputCount=i.asm.ga).apply(null,arguments)},i._OrtGetOutputCount=function(){return(i._OrtGetOutputCount=i.asm.ha).apply(null,arguments)},i._OrtGetInputName=function(){return(i._OrtGetInputName=i.asm.ia).apply(null,arguments)},i._OrtGetOutputName=function(){return(i._OrtGetOutputName=i.asm.ja).apply(null,arguments)},i._OrtFree=function(){return(i._OrtFree=i.asm.ka).apply(null,arguments)},i._OrtCreateTensor=function(){return(i._OrtCreateTensor=i.asm.la).apply(null,arguments)},i._OrtGetTensorData=function(){return(i._OrtGetTensorData=i.asm.ma).apply(null,arguments)},i._OrtReleaseTensor=function(){return(i._OrtReleaseTensor=i.asm.na).apply(null,arguments)},i._OrtCreateRunOptions=function(){return(i._OrtCreateRunOptions=i.asm.oa).apply(null,arguments)},i._OrtAddRunConfigEntry=function(){return(i._OrtAddRunConfigEntry=i.asm.pa).apply(null,arguments)},i._OrtReleaseRunOptions=function(){return(i._OrtReleaseRunOptions=i.asm.qa).apply(null,arguments)},i._OrtRun=function(){return(i._OrtRun=i.asm.ra).apply(null,arguments)},i._OrtEndProfiling=function(){return(i._OrtEndProfiling=i.asm.sa).apply(null,arguments)};var ft=i.___errno_location=function(){return(ft=i.___errno_location=i.asm.ta).apply(null,arguments)},pt=i._pthread_self=function(){return(pt=i._pthread_self=i.asm.ua).apply(null,arguments)},dt=i._malloc=function(){return(dt=i._malloc=i.asm.va).apply(null,arguments)},mt=i._free=function(){return(mt=i._free=i.asm.wa).apply(null,arguments)};i._emscripten_tls_init=function(){return(i._emscripten_tls_init=i.asm.xa).apply(null,arguments)};var gt=i.___funcs_on_exit=function(){return(gt=i.___funcs_on_exit=i.asm.ya).apply(null,arguments)},ht=i._emscripten_main_thread_process_queued_calls=function(){return(ht=i._emscripten_main_thread_process_queued_calls=i.asm.za).apply(null,arguments)},yt=i.__emscripten_thread_init=function(){return(yt=i.__emscripten_thread_init=i.asm.Aa).apply(null,arguments)};i._emscripten_current_thread_process_queued_calls=function(){return(i._emscripten_current_thread_process_queued_calls=i.asm.Ca).apply(null,arguments)};var bt=i._emscripten_sync_run_in_main_thread_4=function(){return(bt=i._emscripten_sync_run_in_main_thread_4=i.asm.Da).apply(null,arguments)},vt=i._emscripten_run_in_main_runtime_thread_js=function(){return(vt=i._emscripten_run_in_main_runtime_thread_js=i.asm.Ea).apply(null,arguments)},_t=i._emscripten_dispatch_to_thread_=function(){return(_t=i._emscripten_dispatch_to_thread_=i.asm.Fa).apply(null,arguments)},wt=i.__emscripten_thread_free_data=function(){return(wt=i.__emscripten_thread_free_data=i.asm.Ga).apply(null,arguments)};i.__emscripten_thread_exit=function(){return(i.__emscripten_thread_exit=i.asm.Ha).apply(null,arguments)};var Ot,At=i._memalign=function(){return(At=i._memalign=i.asm.Ia).apply(null,arguments)},St=i._emscripten_stack_set_limits=function(){return(St=i._emscripten_stack_set_limits=i.asm.Ja).apply(null,arguments)},Et=i.stackSave=function(){return(Et=i.stackSave=i.asm.Ka).apply(null,arguments)},Tt=i.stackRestore=function(){return(Tt=i.stackRestore=i.asm.La).apply(null,arguments)},Mt=i.stackAlloc=function(){return(Mt=i.stackAlloc=i.asm.Ma).apply(null,arguments)},Dt=i.__emscripten_main_thread_futex=687896,Rt=i.__emscripten_allow_main_runtime_queued_calls=683012;function xt(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function kt(){function e(){if(!Ot&&(Ot=!0,i.calledRun=!0,!P)&&(O||fe(Z),s(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!O)){if(i.postRun)for(\\\"function\\\"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;){var e=i.postRun.shift();ee.unshift(e)}fe(ee)}}if(!(0<ae))if(O)s(i),O||fe(Z),postMessage({cmd:\\\"loaded\\\"});else{if(i.preRun)for(\\\"function\\\"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)ne();fe(J),0<ae||(i.setStatus?(i.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){i.setStatus(\\\"\\\")}),1),e()}),1)):e())}}function Ct(e){if(O)throw ge(e),\\\"unwind\\\";te()||O||(gt(),fe(K),Oe[1].length&&Ae(1,10),Oe[2].length&&Ae(2,10),me.kb()),te()||(me.kb(),i.onExit&&i.onExit(e),P=!0),b(e,new xt(e))}if(i.UTF8ToString=N,i.stringToUTF8=z,i.lengthBytesUTF8=q,i.keepRuntimeAlive=te,i.PThread=me,i.stackSave=Et,i.stackRestore=Tt,i.stackAlloc=Mt,i.PThread=me,i.wasmMemory=C,i.ExitStatus=xt,ie=function e(){Ot||kt(),Ot||(ie=e)},i.run=kt,i.preInit)for(\\\"function\\\"==typeof i.preInit&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return O&&(k=!1,me.ub()),kt(),e.ready});e.exports=r},118:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={};if(\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node){var t=require(\\\"worker_threads\\\"),r=t.parentPort;r.on(\\\"message\\\",(function(e){onmessage({data:e})}));var a=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:t.Worker,importScripts:function(e){(0,eval)(a.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){r.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.threadInfoStruct,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInit();try{var a=e.invokeEntryPoint(t.data.start_routine,t.data.arg);e.keepRuntimeAlive()?e.PThread.setExitStatus(a):e.__emscripten_thread_exit(a)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processThreadQueue\\\"===t.data.cmd?e._pthread_self()&&e._emscripten_current_thread_process_queued_calls():(s(\\\"worker.js received unknown command \\\"+t.data.cmd),s(t.data)))}catch(e){throw s(\\\"worker.js onmessage() captured an uncaught exception: \\\"+e),e&&e.stack&&s(e.stack),e}};\\\\n'},932:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||__filename,function(e){var t;e=e||{},t||(t=void 0!==e?e:{});var r,a,o=Object.assign;t.ready=new Promise((function(e,t){r=e,a=t}));var i,s,u,c,l,f,p=o({},t),d=\\\"./this.program\\\",m=\\\"object\\\"==typeof window,g=\\\"function\\\"==typeof importScripts,h=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,y=\\\"\\\";h?(y=g?n(622).dirname(y)+\\\"/\\\":__dirname+\\\"/\\\",f=()=>{l||(c=n(747),l=n(622))},i=function(e,t){return f(),e=l.normalize(e),c.readFileSync(e,t?null:\\\"utf8\\\")},u=e=>((e=i(e,!0)).buffer||(e=new Uint8Array(e)),e),s=(e,t,n)=>{f(),e=l.normalize(e),c.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(d=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(m||g)&&(g?y=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),y=0!==y.indexOf(\\\"blob:\\\")?y.substr(0,y.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",i=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},g&&(u=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),s=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var b,v=t.print||console.log.bind(console),_=t.printErr||console.warn.bind(console);o(t,p),p=null,t.thisProgram&&(d=t.thisProgram),t.wasmBinary&&(b=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&N(\\\"no native wasm support detected\\\");var w,O,A,S,E,T=!1,M=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function D(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&M)return M.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function R(e,t){return e?D(S,e,t):\\\"\\\"}function x(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++]=i}else{if(2047>=i){if(n+1>=r)break;t[n++]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++]=224|i>>12}else{if(n+3>=r)break;t[n++]=240|i>>18,t[n++]=128|i>>12&63}t[n++]=128|i>>6&63}t[n++]=128|63&i}}return t[n]=0,n-a}function k(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function C(e){var t=k(e)+1,n=de(t);return n&&x(e,A,n,t),n}function F(){var e=w.buffer;O=e,t.HEAP8=A=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=E=new Int32Array(e),t.HEAPU8=S=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var P,I=[],U=[],W=[];function L(){var e=t.preRun.shift();I.unshift(e)}var H,Y=0,j=null,B=null;function N(e){throw t.onAbort&&t.onAbort(e),_(e=\\\"Aborted(\\\"+e+\\\")\\\"),T=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -s ASSERTIONS=1 for more info.\\\"),a(e),e}function G(){return H.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(t.preloadedImages={},t.preloadedAudios={},H=\\\"ort-wasm.wasm\\\",!G()){var z=H;H=t.locateFile?t.locateFile(z,y):y+z}function q(){var e=H;try{if(e==H&&b)return new Uint8Array(b);if(u)return u(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){N(e)}}function V(e){for(;0<e.length;){var n=e.shift();if(\\\"function\\\"==typeof n)n(t);else{var r=n.Na;\\\"number\\\"==typeof r?void 0===n.va?X(r)():X(r)(n.va):r(void 0===n.va?null:n.va)}}}var $=[];function X(e){var t=$[e];return t||(e>=$.length&&($.length=e+1),$[e]=t=P.get(e)),t}function Q(e){this.qa=e-16,this.Fa=function(e){E[this.qa+4>>2]=e},this.Ca=function(e){E[this.qa+8>>2]=e},this.Da=function(){E[this.qa>>2]=0},this.Ba=function(){A[this.qa+12>>0]=0},this.Ea=function(){A[this.qa+13>>0]=0},this.ya=function(e,t){this.Fa(e),this.Ca(t),this.Da(),this.Ba(),this.Ea()}}var J,Z,K={},ee=[null,[],[]],te={},ne={};function re(){if(!Z){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:d||\\\"./this.program\\\"};for(e in ne)void 0===ne[e]?delete t[e]:t[e]=ne[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Z=n}return Z}function ae(e){return 0==e%4&&(0!=e%100||0==e%400)}function oe(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var ie=[31,29,31,30,31,30,31,31,30,31,30,31],se=[31,28,31,30,31,30,31,31,30,31,30,31];function ue(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(ae(e.getFullYear())?ie:se)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function ce(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){e=ue(new Date(e.oa+1900,0,1),e.ua);var t=new Date(e.getFullYear()+1,0,4),n=s(new Date(e.getFullYear(),0,4));return t=s(t),0>=i(n,e)?0>=i(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=E[r+40>>2];for(var l in r={Ia:E[r>>2],Ha:E[r+4>>2],sa:E[r+8>>2],ra:E[r+12>>2],pa:E[r+16>>2],oa:E[r+20>>2],ta:E[r+24>>2],ua:E[r+28>>2],Qa:E[r+32>>2],Ga:E[r+36>>2],Ja:c?R(c):\\\"\\\"},n=R(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.ta].substring(0,3)},\\\"%A\\\":function(e){return f[e.ta]},\\\"%b\\\":function(e){return p[e.pa].substring(0,3)},\\\"%B\\\":function(e){return p[e.pa]},\\\"%C\\\":function(e){return o((e.oa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.ra,2)},\\\"%e\\\":function(e){return a(e.ra,2,\\\" \\\")},\\\"%g\\\":function(e){return u(e).toString().substring(2)},\\\"%G\\\":function(e){return u(e)},\\\"%H\\\":function(e){return o(e.sa,2)},\\\"%I\\\":function(e){return 0==(e=e.sa)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){return o(e.ra+oe(ae(e.oa+1900)?ie:se,e.pa-1),3)},\\\"%m\\\":function(e){return o(e.pa+1,2)},\\\"%M\\\":function(e){return o(e.Ha,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.sa&&12>e.sa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.Ia,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ta||7},\\\"%U\\\":function(e){var t=new Date(e.oa+1900,0,1),n=0===t.getDay()?t:ue(t,7-t.getDay());return 0>i(n,e=new Date(e.oa+1900,e.pa,e.ra))?o(Math.ceil((31-n.getDate()+(oe(ae(e.getFullYear())?ie:se,e.getMonth()-1)-31)+e.getDate())/7),2):0===i(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%V\\\":function(e){var t=new Date(e.oa+1901,0,4),n=s(new Date(e.oa+1900,0,4));t=s(t);var r=ue(new Date(e.oa+1900,0,1),e.ua);return 0>i(r,n)?\\\"53\\\":0>=i(t,r)?\\\"01\\\":o(Math.ceil((n.getFullYear()<e.oa+1900?e.ua+32-n.getDate():e.ua+1-n.getDate())/7),2)},\\\"%w\\\":function(e){return e.ta},\\\"%W\\\":function(e){var t=new Date(e.oa,0,1),n=1===t.getDay()?t:ue(t,0===t.getDay()?1:7-t.getDay()+1);return 0>i(n,e=new Date(e.oa+1900,e.pa,e.ra))?o(Math.ceil((31-n.getDate()+(oe(ae(e.getFullYear())?ie:se,e.getMonth()-1)-31)+e.getDate())/7),2):0===i(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%y\\\":function(e){return(e.oa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.oa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ga);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Ja},\\\"%%\\\":function(){return\\\"%\\\"}})n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(k(e)+1);return x(e,t,0,t.length),t}(n),l.length>t?0:(A.set(l,e),l.length-1)}var le={a:function(e){return de(e+16)+16},b:function(e,t,n){throw new Q(e).ya(t,n),e},g:function(){return 0},I:function(){},F:function(){},v:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(e,t){return e=R(e),te.Ka(e,t)},A:function(e,t,n,r,a,o){if(o<<=12,0!=(16&r)&&0!=e%65536)t=-28;else if(0!=(32&r)){e=65536*Math.ceil(t/65536);var i=ge(65536,e);i?(S.fill(0,i,i+e),e=i):e=0,e?(K[e]={Aa:e,za:t,wa:!0,fd:a,Pa:n,flags:r,offset:o},t=e):t=-48}else t=-52;return t},z:function(e,t){var n=K[e];return 0!==t&&n?(t===n.za&&(K[e]=null,n.wa&&me(n.Aa)),e=0):e=-28,e},k:function(){},x:function(e,t,n){return e=R(e),te.La(e,t,n)},t:function(){},H:function(){},u:function(){},h:function(){N(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},n:function(){N(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},J:function(e,t){e=new Date(1e3*E[e>>2]),E[t>>2]=e.getUTCSeconds(),E[t+4>>2]=e.getUTCMinutes(),E[t+8>>2]=e.getUTCHours(),E[t+12>>2]=e.getUTCDate(),E[t+16>>2]=e.getUTCMonth(),E[t+20>>2]=e.getUTCFullYear()-1900,E[t+24>>2]=e.getUTCDay(),E[t+28>>2]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},K:function(e,t){e=new Date(1e3*E[e>>2]),E[t>>2]=e.getSeconds(),E[t+4>>2]=e.getMinutes(),E[t+8>>2]=e.getHours(),E[t+12>>2]=e.getDate(),E[t+16>>2]=e.getMonth(),E[t+20>>2]=e.getFullYear()-1900,E[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1);E[t+28>>2]=(e.getTime()-n.getTime())/864e5|0,E[t+36>>2]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[t+32>>2]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},L:function(e){var t=new Date(E[e+20>>2]+1900,E[e+16>>2],E[e+12>>2],E[e+8>>2],E[e+4>>2],E[e>>2],0),n=E[e+32>>2],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),s=Math.min(i,o);return 0>n?E[e+32>>2]=Number(o!=i&&s==r):0<n!=(s==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-r))),E[e+24>>2]=t.getDay(),E[e+28>>2]=(t.getTime()-a.getTime())/864e5|0,E[e>>2]=t.getSeconds(),E[e+4>>2]=t.getMinutes(),E[e+8>>2]=t.getHours(),E[e+12>>2]=t.getDate(),E[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},M:function e(t,n,r){e.xa||(e.xa=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();E[e>>2]=60*Math.max(a,s),E[t>>2]=Number(a!=s),e=r(o),t=r(i),e=C(e),t=C(t),s<a?(E[n>>2]=e,E[n+4>>2]=t):(E[n>>2]=t,E[n+4>>2]=e)}(t,n,r))},d:function(){N(\\\"\\\")},m:function(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return E[pe()>>2]=28,-1;e=J()}return E[t>>2]=e/1e3|0,E[t+4>>2]=e%1e3*1e6|0,0},p:function(e,t){return e-t},s:function(){return 2147483648},l:J=h?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),E:function(e,t,n){S.copyWithin(e,t,t+n)},f:function(e){var t=S.length;if(2147483648<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296),0<(r=Math.max(e,r))%65536&&(r+=65536-r%65536);e:{try{w.grow(Math.min(2147483648,r)-O.byteLength+65535>>>16),F();var a=1;break e}catch(e){}a=void 0}if(a)return!0}return!1},C:function(e,t){var n=0;return re().forEach((function(r,a){var o=t+n;for(a=E[e+4*a>>2]=o,o=0;o<r.length;++o)A[a++>>0]=r.charCodeAt(o);A[a>>0]=0,n+=r.length+1})),0},D:function(e,t){var n=re();E[e>>2]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),E[t>>2]=r,0},e:function(){return 0},j:function(e,t,n,r){return e=te.Oa(e),t=te.Ma(e,t,n),E[r>>2]=t,0},q:function(){},i:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=E[t>>2],s=E[t+4>>2];t+=8;for(var u=0;u<s;u++){var c=S[i+u],l=ee[e];0===c||10===c?((1===e?v:_)(D(l,0)),l.length=0):l.push(c)}a+=s}return E[r>>2]=a,0},w:function(e){var t=Date.now();return E[e>>2]=t/1e3|0,E[e+4>>2]=t%1e3*1e3|0,0},o:ce,c:function(e,t,n,r){return ce(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,w=t.asm.N,F(),P=t.asm.ja,U.unshift(t.asm.O),Y--,t.monitorRunDependencies&&t.monitorRunDependencies(Y),0==Y&&(null!==j&&(clearInterval(j),j=null),B&&(e=B,B=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!b&&(m||g)){if(\\\"function\\\"==typeof fetch&&!H.startsWith(\\\"file://\\\"))return fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+H+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return q()}));if(s)return new Promise((function(e,t){s(H,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return q()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){_(\\\"failed to asynchronously prepare wasm: \\\"+e),N(e)}))}var o={a:le};if(Y++,t.monitorRunDependencies&&t.monitorRunDependencies(Y),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return _(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(b||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||G()||H.startsWith(\\\"file://\\\")||\\\"function\\\"!=typeof fetch?r(n):fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return _(\\\"wasm streaming compile failed: \\\"+e),_(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.O).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.P).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.Q).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.R).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.S).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.T).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.U).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.V).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.W).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.X).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.Y).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.Z).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm._).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.$).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.aa).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.ba).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.ca).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.da).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.ea).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.fa).apply(null,arguments)};var fe,pe=t.___errno_location=function(){return(pe=t.___errno_location=t.asm.ga).apply(null,arguments)},de=t._malloc=function(){return(de=t._malloc=t.asm.ha).apply(null,arguments)},me=t._free=function(){return(me=t._free=t.asm.ia).apply(null,arguments)},ge=t._memalign=function(){return(ge=t._memalign=t.asm.ka).apply(null,arguments)},he=t.stackSave=function(){return(he=t.stackSave=t.asm.la).apply(null,arguments)},ye=t.stackRestore=function(){return(ye=t.stackRestore=t.asm.ma).apply(null,arguments)},be=t.stackAlloc=function(){return(be=t.stackAlloc=t.asm.na).apply(null,arguments)};function ve(){function e(){if(!fe&&(fe=!0,t.calledRun=!0,!T)){if(V(U),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();W.unshift(e)}V(W)}}if(!(0<Y)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)L();V(I),0<Y||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.UTF8ToString=R,t.stringToUTF8=function(e,t,n){return x(e,S,t,n)},t.lengthBytesUTF8=k,t.stackSave=he,t.stackRestore=ye,t.stackAlloc=be,B=function e(){fe||ve(),fe||(B=e)},t.run=ve,t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return ve(),e.ready});e.exports=r},967:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=(e,n,r,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(r.has(e))throw new Error(\\\"Circular reference in options\\\");r.add(e)}Object.entries(e).forEach((([e,o])=>{const i=n?n+e:e;if(\\\"object\\\"==typeof o)t.iterateExtraOptions(o,i+\\\".\\\",r,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))}},586:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const r=n(967),a=n(983),o=n(361);t.setRunOptions=e=>{const t=o.getInstance();let n=0;const i=[],s=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(s.terminate=!1);let o=0;if(void 0!==(null==e?void 0:e.tag)&&(o=a.allocWasmString(e.tag,i)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,o),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=a.allocWasmString(e,i),s=a.allocWasmString(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,s))throw new Error(`Can't set a run config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},919:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const r=n(967),a=n(983),o=n(361);t.setSessionOptions=e=>{const t=o.getInstance();let n=0;const i=[],s=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\")})(s);try{void 0===(null==e?void 0:e.graphOptimizationLevel)&&(s.graphOptimizationLevel=\\\"all\\\");const o=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(s.graphOptimizationLevel);void 0===(null==e?void 0:e.enableCpuMemArena)&&(s.enableCpuMemArena=!0),void 0===(null==e?void 0:e.enableMemPattern)&&(s.enableMemPattern=!0),void 0===(null==e?void 0:e.executionMode)&&(s.executionMode=\\\"sequential\\\");const u=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(s.executionMode);let c=0;if(void 0!==(null==e?void 0:e.logId)&&(c=a.allocWasmString(e.logId,i)),void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);if(void 0===(null==e?void 0:e.enableProfiling)&&(s.enableProfiling=!1),n=t._OrtCreateSessionOptions(o,!!s.enableCpuMemArena,!!s.enableMemPattern,u,!!s.enableProfiling,0,c,s.logSeverityLevel,s.logVerbosityLevel),0===n)throw new Error(\\\"Can't create session options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=a.allocWasmString(e,i),s=a.allocWasmString(r,i);if(0!==t._OrtAddSessionConfigEntry(n,o,s))throw new Error(`Can't set a session config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),i.forEach(t._free),e}}},983:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;const r=n(361);t.allocWasmString=(e,t)=>{const n=r.getInstance(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},349:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.initOrt=void 0;const r=n(586),a=n(919),o=n(983),i=n(361);t.initOrt=(e,t)=>{const n=i.getInstance()._OrtInit(e,t);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const s=new Map;t.createSession=(e,t)=>{const n=i.getInstance(),r=n._malloc(e.byteLength);let o=0,u=0,c=[];try{if([u,c]=a.setSessionOptions(t),n.HEAPU8.set(e,r),o=n._OrtCreateSession(r,e.byteLength,u),0===o)throw new Error(\\\"Can't create a session\\\")}finally{n._free(r),n._OrtReleaseSessionOptions(u),c.forEach(n._free)}const l=n._OrtGetInputCount(o),f=n._OrtGetOutputCount(o),p=[],d=[],m=[],g=[];for(let e=0;e<l;e++){const t=n._OrtGetInputName(o,e);if(0===t)throw new Error(\\\"Can't get an input name\\\");d.push(t),p.push(n.UTF8ToString(t))}for(let e=0;e<f;e++){const t=n._OrtGetOutputName(o,e);if(0===t)throw new Error(\\\"Can't get an output name\\\");g.push(t),m.push(n.UTF8ToString(t))}return s.set(o,[o,d,g]),[o,p,m]},t.releaseSession=e=>{const t=i.getInstance(),n=s.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),s.delete(e)};const u=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},c=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:case 7:return\\\"int32\\\";case 12:case 13:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";default:throw new Error(`unsupported data type: ${e}`)}},l=e=>{switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}};t.run=(e,t,n,a,f)=>{const p=i.getInstance(),d=s.get(e);if(!d)throw new Error(\\\"invalid session id\\\");const m=d[0],g=d[1],h=d[2],y=t.length,b=a.length;let v=0,_=[];const w=[],O=[];try{[v,_]=r.setRunOptions(f);for(let e=0;e<y;e++){const t=n[e][0],r=n[e][1],a=n[e][2];let i,s;if(Array.isArray(a)){s=4*a.length,i=p._malloc(s),O.push(i);let e=i/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);p.HEAPU32[e++]=o.allocWasmString(a[t],O)}}else s=a.byteLength,i=p._malloc(s),O.push(i),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,s),i);const c=p.stackSave(),l=p.stackAlloc(4*r.length);try{let e=l/4;r.forEach((t=>p.HEAP32[e++]=t));const n=p._OrtCreateTensor(u(t),i,s,l,r.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");w.push(n)}finally{p.stackRestore(c)}}const e=p.stackSave(),i=p.stackAlloc(4*y),s=p.stackAlloc(4*y),d=p.stackAlloc(4*b),A=p.stackAlloc(4*b);try{let n=i/4,r=s/4,o=d/4,u=A/4;for(let e=0;e<y;e++)p.HEAPU32[n++]=w[e],p.HEAPU32[r++]=g[t[e]];for(let e=0;e<b;e++)p.HEAPU32[o++]=0,p.HEAPU32[u++]=h[a[e]];let f=p._OrtRun(m,s,i,y,A,b,d,v);const _=[];if(0===f)for(let e=0;e<b;e++){const t=p.HEAPU32[d/4+e],n=p.stackSave(),r=p.stackAlloc(16);let a,o=0;try{if(f=p._OrtGetTensorData(t,r,r+4,r+8,r+12),0!==f)throw new Error(`Can't get a tensor data. error code = ${f}`);let e=r/4;const i=p.HEAPU32[e++];o=p.HEAPU32[e++];const s=p.HEAPU32[e++],u=p.HEAPU32[e++],d=[];for(let e=0;e<u;e++)d.push(p.HEAPU32[s/4+e]);p._OrtFree(s);const m=0===d.length?1:d.reduce(((e,t)=>e*t));if(a=c(i),\\\"string\\\"===a){const e=[];let t=o/4;for(let n=0;n<m;n++){const r=p.HEAPU32[t++],a=n===m-1?void 0:p.HEAPU32[t]-r;e.push(p.UTF8ToString(r,a))}_.push([a,d,e])}else{const e=new(l(a))(m);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(p.HEAPU8.subarray(o,o+e.byteLength)),_.push([a,d,e])}}finally{p.stackRestore(n),\\\"string\\\"===a&&o&&p._free(o),p._OrtReleaseTensor(t)}}if(0===f)return _;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(e)}}finally{w.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(v),_.forEach(p._free)}},t.endProfiling=e=>{const t=i.getInstance(),n=s.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},361:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const s=o(n(622)),u=i(n(932)),c=n(474);let l,f=!1,p=!1,d=!1;const m=(e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\";t.initializeWebAssembly=async e=>{if(f)return Promise.resolve();if(p)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(d)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");p=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),i=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),g=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,h=m(!1,o),y=m(i,o),b=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[y]:void 0;let v=!1;const _=[];if(t>0&&_.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),_.push(new Promise(((e,t)=>{const r=o?c:u.default,a={locateFile:(e,t)=>{if(o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob)return URL.createObjectURL(new Blob([n(118)],{type:\\\"text/javascript\\\"}));if(e===h){const e=null!=g?g:t;return null!=b?b:e+y}return t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}r(a).then((t=>{p=!1,f=!0,l=t,e()}),(e=>{p=!1,d=!0,t(e)}))}))),await Promise.race(_),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(f&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!f||p||d||(p=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,p=!1,f=!1,d=!0)}},747:e=>{\\\"use strict\\\";e.exports=require(\\\"fs\\\")},87:e=>{\\\"use strict\\\";e.exports=require(\\\"os\\\")},622:e=>{\\\"use strict\\\";e.exports=require(\\\"path\\\")},630:e=>{\\\"use strict\\\";e.exports=require(\\\"perf_hooks\\\")},13:e=>{\\\"use strict\\\";e.exports=require(\\\"worker_threads\\\")}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}(()=>{\\\"use strict\\\";const e=n(349),t=n(361);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":t.initializeWebAssembly(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})));break;case\\\"init-ort\\\":try{const{numThreads:t,loggingLevel:r}=n.data.in;e.initOrt(t,r),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:r}=n.data.in,a=e.createSession(t,r);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=n.data.in;e.releaseSession(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:o,options:i}=n.data.in,s=e.run(t,r,a,o,i);postMessage({type:\\\"run\\\",out:s},e.extractTransferableBuffers(s))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=n.data.in;e.endProfiling(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","module.exports = require(\"perf_hooks\");;","module.exports = require(\"util\");;","module.exports = require(\"worker_threads\");;","module.exports = require(\"onnxruntime-common\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}
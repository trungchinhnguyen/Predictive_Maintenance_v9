{"version":3,"sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/./node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","length","splice","push","env","constructor","this","wasm","webgl","logLevelInternal","logLevel","value","indexOf","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","set","Tensor","arg0","arg1","arg2","type","data","dims","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","reshape","InferenceSession","handler","async","feeds","fetches","options","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","static","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","buffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","_scriptDir","document","currentScript","src","n","R","Y","z","W","t","P","r","U","a","N","o","u","s","assign","ready","Promise","c","f","l","p","d","m","h","g","b","_","window","y","importScripts","w","process","versions","node","ENVIRONMENT_IS_PTHREAD","O","A","locateFile","__dirname","normalize","readFileSync","readFile","argv","replace","slice","on","kn","ee","exitCode","D","exit","inspect","console","error","Worker","location","href","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","T","log","bind","S","warn","writeSync","E","M","x","print","printErr","thisProgram","quit","wasmBinary","k","noExitRuntime","WebAssembly","oe","C","F","I","TextDecoder","decode","G","H","subarray","String","fromCharCode","B","j","charCodeAt","q","L","V","dn","HEAP8","HEAP16","HEAP32","HEAPU8","HEAPU16","HEAPU32","HEAPF32","HEAPF64","Q","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","X","Z","$","J","K","ne","preRun","shift","unshift","te","re","ae","ie","postMessage","cmd","arg","onAbort","RuntimeError","ue","startsWith","se","preloadedImages","preloadedAudios","ce","fe","Tb","Sa","be","le","Sn","En","pe","de","Oa","jb","worker","Pa","Va","fb","Wb","ub","receiveObjectTransfer","zb","threadInit","lb","setExitStatus","Bb","kb","terminate","Ab","Qa","eb","vn","Dn","wb","onmessage","pb","targetThread","pn","bc","transferList","gn","ye","thread","loaded","Ua","threadId","text","alert","target","filename","lineno","message","urlOrBlob","mainScriptUrlOrBlob","wasmModule","mb","rb","pop","me","Ge","Cn","establishStackSpace","Tn","he","ge","_e","Ta","Gb","Db","Eb","Cb","Fb","sb","cb","start_routine","Hb","threadInfoStruct","time","now","Mb","invokeEntryPoint","hrtime","__performance_now_clock_drift","we","ve","Oe","Ae","Te","Se","Ee","Me","xe","De","ke","Re","Qb","Ce","Math","ceil","An","fill","yb","vb","nb","fd","Zb","flags","offset","Fe","mn","Ie","Ye","Rb","We","Pe","Ue","Ne","toTimeString","match","Date","getFullYear","getTimezoneOffset","max","arguments","Mn","yn","He","Be","je","querySelector","qe","Za","ib","Ob","wn","Ya","Xa","getParameter","width","height","viewport","Le","Ve","ze","Qe","Xe","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Ze","forEach","$e","Je","Ke","Ub","Sb","en","nn","tn","rn","an","un","getTime","getMonth","getDate","setDate","setMonth","setFullYear","sn","toString","getDay","Na","bb","Kb","Jb","$a","Wa","Ra","ab","cc","Ib","Lb","RegExp","split","substring","abs","includes","cn","fn","bn","_n","Nb","Atomics","exchange","xn","load","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","min","setTime","ob","ln","copyWithin","hardwareConcurrency","apply","grow","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","xb","Xb","gb","qb","$b","ac","hb","getContext","WebGLRenderingContext","Vb","attributes","version","canvas","tb","getExtension","vertexAttribDivisor","vertexAttribDivisorANGLE","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","bindVertexArrayOES","isVertexArray","isVertexArrayOES","drawBuffers","drawBuffersWEBGL","Pb","Yb","getSupportedExtensions","asm","xa","Ba","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","aa","_OrtCreateSessionOptions","ba","_OrtAddSessionConfigEntry","ca","_OrtReleaseSessionOptions","da","_OrtCreateSession","ea","_OrtReleaseSession","fa","_OrtGetInputCount","ga","_OrtGetOutputCount","ha","_OrtGetInputName","ia","_OrtGetOutputName","ja","_OrtFree","ka","_OrtCreateTensor","la","_OrtGetTensorData","ma","_OrtReleaseTensor","na","_OrtCreateRunOptions","oa","_OrtAddRunConfigEntry","pa","_OrtReleaseRunOptions","qa","_OrtRun","ra","_OrtEndProfiling","sa","___errno_location","ta","_pthread_self","ua","_malloc","va","_free","wa","_emscripten_tls_init","hn","___funcs_on_exit","ya","_emscripten_main_thread_process_queued_calls","za","__emscripten_thread_init","Aa","_emscripten_current_thread_process_queued_calls","Ca","_emscripten_sync_run_in_main_thread_4","Da","_emscripten_run_in_main_runtime_thread_js","Ea","_emscripten_dispatch_to_thread_","Fa","__emscripten_thread_free_data","Ga","__emscripten_thread_exit","Ha","On","_memalign","Ia","_emscripten_stack_set_limits","Ja","stackSave","Ka","stackRestore","La","stackAlloc","Ma","__emscripten_main_thread_futex","__emscripten_allow_main_runtime_queued_calls","Rn","calledRun","onRuntimeInitialized","postRun","setStatus","setTimeout","onExit","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","PThread","ExitStatus","preInit","ortWasm","fs","ctx","params","index","pending","reject","base64","string","charAt","b64","s64","encode","start","end","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","args","f32","f8b","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","SIZE","MAX","slab","utf8","len","read","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","count","out","random","isEmpty","toJSON","Instance","Module","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","radixToPower","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","newBuffer","emptyArray","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","elemType","shape","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","initWasm","promisify","OnnxruntimeWebAssemblySessionHandler","wasmBackend","OnnxruntimeWebAssemblyBackend","_cacheKey","sort","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","_attributes","attr","Attribute","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","initialize","dispose","WebGLBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encodeUint8","endianness","EncodingGlslLib","decodeUint8","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","channels","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActicationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","adjustedAttributes","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","newAttributes","activationAttributes","parseInternalActivationAttributes","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","_dataType","checkFn","delayFn","maxCounter","_counter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","createElement","createCanvas","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","scissor","readPixels","isFramebufferReady","getActiveTexture","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","GraphImpl","_from","_to","tensorValueTypeFromProto","_nodeProto","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","_severity","_content","_category","severity","content","category","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","toISOString","previousConfig","startTime","endCallback","timer","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","__init","getRootAsShape","Shape","getSizePrefixedRootAsShape","startShape","builder","addDim","createDimVector","startDimVector","numElems","endShape","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","optionalEncoding","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","UNKNOWN","startDimensionValue","addDimType","addDimValue","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","NONE","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawDataLength","rawDataArray","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","floatsLength","graphsLength","startAttribute","addF","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","fromData","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","typeProto","tensorDataTypeStringToEnum","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","getLogLevel","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","path","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","revokeObjectURL","encodeURIComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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","file":"ort.es5.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.backend === backend) {\n            return;\n        }\n        else {\n            throw new Error(`backend \"${name}\" is already registered`);\n        }\n        if (priority >= 0) {\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\nif (isBigInt64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n}\nif (isBigUint64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n}\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    //#endregion\n    //#region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function n(){return R.buffer!=Y&&z(R.buffer),W}function t(){return R.buffer!=Y&&z(R.buffer),P}function r(){return R.buffer!=Y&&z(R.buffer),U}function a(){return R.buffer!=Y&&z(R.buffer),N}var i;e=e||{},i||(i=void 0!==e?e:{});var o,u,s=Object.assign;i.ready=new Promise((function(e,n){o=e,u=n}));var c,f,l,p,d,m,h=s({},i),g=\"./this.program\",b=(e,n)=>{throw n},_=\"object\"==typeof window,y=\"function\"==typeof importScripts,w=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=i.ENVIRONMENT_IS_PTHREAD||!1,O=\"\";function A(e){return i.locateFile?i.locateFile(e,O):O+e}if(w){let e;O=y?require(\"path\").dirname(O)+\"/\":__dirname+\"/\",m=()=>{d||(p=require(\"fs\"),d=require(\"path\"))},c=function(e,n){return m(),e=d.normalize(e),p.readFileSync(e,n?null:\"utf8\")},l=e=>((e=c(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,n,t)=>{m(),e=d.normalize(e),p.readFile(e,(function(e,r){e?t(e):n(r.buffer)}))},1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof kn))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),b=(e,n)=>{if(ee())throw process.exitCode=e,n;n instanceof kn||D(\"exiting due to exception: \"+n),process.exit(e)},i.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(_||y)&&(y?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),_scriptDir&&(O=_scriptDir),O=0!==O.indexOf(\"blob:\")?O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",w||(c=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},y&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),f=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));w&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var T=console.log.bind(console),S=console.warn.bind(console);w&&(m(),T=e=>p.writeSync(1,e+\"\\n\"),S=e=>p.writeSync(2,e+\"\\n\"));var E,M,x=i.print||T,D=i.printErr||S;s(i,h),h=null,i.thisProgram&&(g=i.thisProgram),i.quit&&(b=i.quit),i.wasmBinary&&(M=i.wasmBinary);var k=i.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&oe(\"no native wasm support detected\");var R,C,F=!1;function I(e){var n=new TextDecoder(e);this.decode=e=>(e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),n.decode.call(n,e))}var Y,W,P,U,N,G=\"undefined\"!=typeof TextDecoder?new I(\"utf8\"):void 0;function H(e,n,t){var r=n+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.subarray&&G)return G.decode(e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var i=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function B(e,n){return e?H(t(),e,n):\"\"}function j(e,n,t,r){if(!(0<r))return 0;var a=t;r=t+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(t>=r)break;n[t++]=o}else{if(2047>=o){if(t+1>=r)break;n[t++]=192|o>>6}else{if(65535>=o){if(t+2>=r)break;n[t++]=224|o>>12}else{if(t+3>=r)break;n[t++]=240|o>>18,n[t++]=128|o>>12&63}n[t++]=128|o>>6&63}n[t++]=128|63&o}}return n[t]=0,t-a}function q(e,n,r){return j(e,t(),n,r)}function L(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++t)),127>=r?++n:n=2047>=r?n+2:65535>=r?n+3:n+4}return n}function V(e){var t=L(e)+1,r=dn(t);return r&&j(e,n(),r,t),r}function z(e){Y=e,i.HEAP8=W=new Int8Array(e),i.HEAP16=new Int16Array(e),i.HEAP32=U=new Int32Array(e),i.HEAPU8=P=new Uint8Array(e),i.HEAPU16=new Uint16Array(e),i.HEAPU32=new Uint32Array(e),i.HEAPF32=new Float32Array(e),i.HEAPF64=N=new Float64Array(e)}\"undefined\"!=typeof TextDecoder&&new I(\"utf-16le\"),v&&(Y=i.buffer);var Q=i.INITIAL_MEMORY||16777216;if(v)R=i.wasmMemory,Y=i.buffer;else if(i.wasmMemory)R=i.wasmMemory;else if(!((R=new WebAssembly.Memory({initial:Q/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw D(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),w&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");R&&(Y=R.buffer),Q=Y.byteLength,z(Y);var X,Z=[],$=[],J=[],K=[];function ee(){return k||!1}function ne(){var e=i.preRun.shift();Z.unshift(e)}var te,re=0,ae=null,ie=null;function oe(e){throw v?postMessage({cmd:\"onAbort\",arg:e}):i.onAbort&&i.onAbort(e),D(e=\"Aborted(\"+e+\")\"),F=!0,e=new WebAssembly.RuntimeError(e+\". Build with -s ASSERTIONS=1 for more info.\"),u(e),e}function ue(){return te.startsWith(\"data:application/octet-stream;base64,\")}function se(){var e=te;try{if(e==te&&M)return new Uint8Array(M);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){oe(e)}}i.preloadedImages={},i.preloadedAudios={},te=\"ort-wasm-threaded.wasm\",ue()||(te=A(te));var ce={};function fe(e){for(;0<e.length;){var n=e.shift();if(\"function\"==typeof n)n(i);else{var t=n.Tb;\"number\"==typeof t?void 0===n.Sa?be(t)():be(t)(n.Sa):t(void 0===n.Sa?null:n.Sa)}}}function le(e){var n=Sn();return e=e(),En(n),e}function pe(e){var n=de.Oa[e];n&&(r()[e>>2]=0,de.jb(n.worker))}var de={Pa:[],Va:[],fb:[],Wb:function(){},ub:function(){de.receiveObjectTransfer=de.zb,de.threadInit=de.lb,de.setExitStatus=de.Bb},Oa:{},Bb:function(){},kb:function(){for(var e in de.Oa){var n=de.Oa[e];n&&n.worker&&de.jb(n.worker)}for(e=0;e<de.Pa.length;++e)de.Pa[e].terminate();de.Pa=[]},jb:function(e){de.Ab((function(){delete de.Oa[e.Qa.eb],de.Pa.push(e),de.Va.splice(de.Va.indexOf(e),1),vn(e.Qa.eb),e.Qa=void 0}))},Ab:function(e){r()[Dn>>2]=0;try{e()}finally{r()[Dn>>2]=1}},zb:function(){},lb:function(){for(var e in de.fb)de.fb[e]()},wb:function(e,n){e.onmessage=t=>{var a=(t=t.data).cmd;if(e.Qa&&(de.pb=e.Qa.eb),t.targetThread&&t.targetThread!=pn()){var o=de.Oa[t.bc];o?o.worker.postMessage(t,t.transferList):D('Internal error! Worker sent a message \"'+a+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"processQueuedMainThreadWork\"===a?gn():\"spawnThread\"===a?ye(t):\"cleanupThread\"===a?pe(t.thread):\"killThread\"===a?(t=t.thread,r()[t>>2]=0,a=de.Oa[t],delete de.Oa[t],a.worker.terminate(),vn(t),de.Va.splice(de.Va.indexOf(a.worker),1),a.worker.Qa=void 0):\"cancelThread\"===a?de.Oa[t.thread].worker.postMessage({cmd:\"cancel\"}):\"loaded\"===a?(e.loaded=!0,n&&n(e),e.Ua&&(e.Ua(),delete e.Ua)):\"print\"===a?x(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===a?D(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===a?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"onAbort\"===a?i.onAbort&&i.onAbort(t.arg):D(\"worker sent an unknown command \"+a);de.pb=void 0},e.onerror=e=>{throw D(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},w&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:i.mainScriptUrlOrBlob||_scriptDir,wasmMemory:R,wasmModule:C})},mb:function(){var e=A(\"ort-wasm-threaded.worker.js\");de.Pa.push(new Worker(e))},rb:function(){return 0==de.Pa.length&&(de.mb(),de.wb(de.Pa[0])),de.Pa.pop()}};function me(e){if(v)return Ge(1,0,e);try{Cn(e)}catch(e){e instanceof kn||\"unwind\"==e||b(1,e)}}i.establishStackSpace=function(){var e=pn(),n=r()[e+44>>2];e=r()[e+48>>2],Tn(n,n-e),En(n)};var he,ge=[];function be(e){var n=ge[e];return n||(e>=ge.length&&(ge.length=e+1),ge[e]=n=X.get(e)),n}function _e(e){this.Ta=e-16,this.Gb=function(e){r()[this.Ta+4>>2]=e},this.Db=function(e){r()[this.Ta+8>>2]=e},this.Eb=function(){r()[this.Ta>>2]=0},this.Cb=function(){n()[this.Ta+12>>0]=0},this.Fb=function(){n()[this.Ta+13>>0]=0},this.sb=function(e,n){this.Gb(e),this.Db(n),this.Eb(),this.Cb(),this.Fb()}}function ye(e){var n=de.rb();if(!n)return 6;de.Va.push(n);var t=de.Oa[e.cb]={worker:n,eb:e.cb};n.Qa=t;var r={cmd:\"run\",start_routine:e.Hb,arg:e.Sa,threadInfoStruct:e.cb};return n.Ua=()=>{r.time=performance.now(),n.postMessage(r,e.Mb)},n.loaded&&(n.Ua(),delete n.Ua),0}i.invokeEntryPoint=function(e,n){return be(e)(n)},he=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:v?()=>performance.now()-i.__performance_now_clock_drift:()=>performance.now();var we={},ve=[null,[],[]];function Oe(e,n){var t=ve[e];0===n||10===n?((1===e?x:D)(H(t,0)),t.length=0):t.push(n)}var Ae={};function Te(e,n,t){return v?Ge(2,1,e,n,t):0}function Se(e,n){if(v)return Ge(3,1,e,n)}function Ee(e,n,t,r){if(v)return Ge(4,1,e,n,t,r)}function Me(e,n){if(v)return Ge(5,1,e,n)}function xe(e,n,t){if(v)return Ge(6,1,e,n,t)}function De(e,n,t){return v?Ge(7,1,e,n,t):0}function ke(e,n){if(v)return Ge(8,1,e,n)}function Re(e,n){return v?Ge(9,1,e,n):(e=B(e),Ae.Qb(e,n))}function Ce(e,n,r,a,i,o){if(v)n=Ge(10,1,e,n,r,a,i,o);else if(o<<=12,0!=(16&a)&&0!=e%65536)n=-28;else if(0!=(32&a)){var u=65536*Math.ceil(n/65536);(e=An(65536,u))?t().fill(0,e,e+u):e=0,e?(we[e]={yb:e,vb:n,nb:!0,fd:i,Zb:r,flags:a,offset:o},n=e):n=-48}else n=-52;return n}function Fe(e,n){if(v)e=Ge(11,1,e,n);else{var t=we[e];0!==n&&t?(n===t.vb&&(we[e]=null,t.nb&&mn(t.yb)),e=0):e=-28}return e}function Ie(e,n,t){if(v)return Ge(12,1,e,n,t)}function Ye(e,n,t){return v?Ge(13,1,e,n,t):(e=B(e),Ae.Rb(e,n,t))}function We(e){if(v)return Ge(14,1,e)}function Pe(e,n){if(v)return Ge(15,1,e,n)}function Ue(e){if(v)return Ge(16,1,e)}function Ne(e,n,t){function a(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(v)return Ge(17,1,e,n,t);var i=(new Date).getFullYear(),o=new Date(i,0,1),u=new Date(i,6,1);i=o.getTimezoneOffset();var s=u.getTimezoneOffset(),c=Math.max(i,s);r()[e>>2]=60*c,r()[n>>2]=Number(i!=s),e=a(o),n=a(u),e=V(e),n=V(n),s<i?(r()[t>>2]=e,r()[t+4>>2]=n):(r()[t>>2]=n,r()[t+4>>2]=e)}function Ge(e,n){var t=arguments.length-2,r=arguments;return le((function(){for(var i=Mn(8*t),o=i>>3,u=0;u<t;u++){var s=r[2+u];a()[o+u]=s}return yn(e,t,i,n)}))}var He=[],Be=[0,\"undefined\"!=typeof document?document:0,\"undefined\"!=typeof window?window:0];function je(e){return e=2<e?B(e):e,Be[e]||(\"undefined\"!=typeof document?document.querySelector(e):void 0)}function qe(e,n,t){var a=je(e);return a?(a.Za&&(r()[a.Za>>2]=n,r()[a.Za+4>>2]=t),!a.ib&&a.Ob?a.Za?(function(e,n,t,a){le((function(){var i=Mn(12),o=0;if(n){o=L(n)+1;var u=dn(o);q(n,u,o),o=u}r()[i>>2]=o,r()[i+4>>2]=t,r()[i+8>>2]=a,wn(e,657457152,0,o,i)}))}(a=r()[a.Za+8>>2],e=e?B(e):\"\",n,t),1):-4:(a.ib&&(a=a.ib),e=!1,a.Ya&&a.Ya.Xa&&(e=0===(e=a.Ya.Xa.getParameter(2978))[0]&&0===e[1]&&e[2]===a.width&&e[3]===a.height),a.width=n,a.height=t,e&&a.Ya.Xa.viewport(0,0,n,t),0)):-4}function Le(e,n,t){return v?Ge(18,1,e,n,t):qe(e,n,t)}var Ve,ze=[\"default\",\"low-power\",\"high-performance\"],Qe={};function Xe(){if(!Ve){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in Qe)void 0===Qe[e]?delete n[e]:n[e]=Qe[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);Ve=t}return Ve}function Ze(e,t){if(v)return Ge(19,1,e,t);var a=0;return Xe().forEach((function(i,o){var u=t+a;for(o=r()[e+4*o>>2]=u,u=0;u<i.length;++u)n()[o++>>0]=i.charCodeAt(u);n()[o>>0]=0,a+=i.length+1})),0}function $e(e,n){if(v)return Ge(20,1,e,n);var t=Xe();r()[e>>2]=t.length;var a=0;return t.forEach((function(e){a+=e.length+1})),r()[n>>2]=a,0}function Je(e){return v?Ge(21,1,e):0}function Ke(e,n,t,a){return v?Ge(22,1,e,n,t,a):(e=Ae.Ub(e),n=Ae.Sb(e,n,t),r()[a>>2]=n,0)}function en(e,n,t,r,a){if(v)return Ge(23,1,e,n,t,r,a)}function nn(e,n,a,i){if(v)return Ge(24,1,e,n,a,i);for(var o=0,u=0;u<a;u++){var s=r()[n>>2],c=r()[n+4>>2];n+=8;for(var f=0;f<c;f++)Oe(e,t()[s+f]);o+=c}return r()[i>>2]=o,0}function tn(e){return 0==e%4&&(0!=e%100||0==e%400)}function rn(e,n){for(var t=0,r=0;r<=n;t+=e[r++]);return t}var an=[31,29,31,30,31,30,31,31,30,31,30,31],on=[31,28,31,30,31,30,31,31,30,31,30,31];function un(e,n){for(e=new Date(e.getTime());0<n;){var t=e.getMonth(),r=(tn(e.getFullYear())?an:on)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function sn(e,t,a,i){function o(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function u(e,n){return o(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){e=un(new Date(e.Na+1900,0,1),e.bb);var n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4));return n=c(n),0>=s(t,e)?0>=s(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[i+40>>2];for(var p in i={Kb:r()[i>>2],Jb:r()[i+4>>2],$a:r()[i+8>>2],Wa:r()[i+12>>2],Ra:r()[i+16>>2],Na:r()[i+20>>2],ab:r()[i+24>>2],bb:r()[i+28>>2],cc:r()[i+32>>2],Ib:r()[i+36>>2],Lb:l?B(l):\"\"},a=B(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),m=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return d[e.ab].substring(0,3)},\"%A\":function(e){return d[e.ab]},\"%b\":function(e){return m[e.Ra].substring(0,3)},\"%B\":function(e){return m[e.Ra]},\"%C\":function(e){return u((e.Na+1900)/100|0,2)},\"%d\":function(e){return u(e.Wa,2)},\"%e\":function(e){return o(e.Wa,2,\" \")},\"%g\":function(e){return f(e).toString().substring(2)},\"%G\":function(e){return f(e)},\"%H\":function(e){return u(e.$a,2)},\"%I\":function(e){return 0==(e=e.$a)?e=12:12<e&&(e-=12),u(e,2)},\"%j\":function(e){return u(e.Wa+rn(tn(e.Na+1900)?an:on,e.Ra-1),3)},\"%m\":function(e){return u(e.Ra+1,2)},\"%M\":function(e){return u(e.Jb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.$a&&12>e.$a?\"AM\":\"PM\"},\"%S\":function(e){return u(e.Kb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.ab||7},\"%U\":function(e){var n=new Date(e.Na+1900,0,1),t=0===n.getDay()?n:un(n,7-n.getDay());return 0>s(t,e=new Date(e.Na+1900,e.Ra,e.Wa))?u(Math.ceil((31-t.getDate()+(rn(tn(e.getFullYear())?an:on,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(t,n)?\"01\":\"00\"},\"%V\":function(e){var n=new Date(e.Na+1901,0,4),t=c(new Date(e.Na+1900,0,4));n=c(n);var r=un(new Date(e.Na+1900,0,1),e.bb);return 0>s(r,t)?\"53\":0>=s(n,r)?\"01\":u(Math.ceil((t.getFullYear()<e.Na+1900?e.bb+32-t.getDate():e.bb+1-t.getDate())/7),2)},\"%w\":function(e){return e.ab},\"%W\":function(e){var n=new Date(e.Na,0,1),t=1===n.getDay()?n:un(n,0===n.getDay()?1:7-n.getDay()+1);return 0>s(t,e=new Date(e.Na+1900,e.Ra,e.Wa))?u(Math.ceil((31-t.getDate()+(rn(tn(e.getFullYear())?an:on,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(t,n)?\"01\":\"00\"},\"%y\":function(e){return(e.Na+1900).toString().substring(2)},\"%Y\":function(e){return e.Na+1900},\"%z\":function(e){var n=0<=(e=e.Ib);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.Lb},\"%%\":function(){return\"%\"}})a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](i)));return p=function(e){var n=Array(L(e)+1);return j(e,n,0,n.length),n}(a),p.length>t?0:(function(e,t){n().set(e,t)}(p,e),p.length-1)}var cn=[null,me,Te,Se,Ee,Me,xe,De,ke,Re,Ce,Fe,Ie,Ye,We,Pe,Ue,Ne,Le,Ze,$e,Je,Ke,en,nn],fn={b:function(e){return dn(e+16)+16},c:function(e,n,t){throw new _e(e).sb(n,t),e},M:function(e){bn(e,!y,1,!_),de.lb()},n:function(e){v?postMessage({cmd:\"cleanupThread\",thread:e}):pe(e)},p:function(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return D(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return v&&0===a.length?_n(687865856,e,n,t,r):(e={Hb:t,cb:e,Sa:r,Mb:a},v?(e.Nb=\"spawnThread\",postMessage(e,a),0):ye(e))},i:Te,U:Se,R:Ee,y:Me,A:xe,t:De,S:ke,H:Re,G:Ce,F:Fe,o:Ie,z:Ye,w:We,T:Pe,x:Ue,j:function(){oe(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},_:function(){oe(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},E:function(){return 2097152},Z:function(e,n,t){var a=performance.now();for(t=a+t,Atomics.exchange(r(),xn>>2,e);;){if((a=performance.now())>t)return Atomics.exchange(r(),xn>>2,0),-73;if(0==(a=Atomics.exchange(r(),xn>>2,0)))break;if(gn(),Atomics.load(r(),e>>2)!=n)return-6;Atomics.exchange(r(),xn>>2,e)}return 0},N:function(e,n){if(e==n)postMessage({cmd:\"processQueuedMainThreadWork\"});else if(v)postMessage({targetThread:e,cmd:\"processThreadQueue\"});else{if(!(e=(e=de.Oa[e])&&e.worker))return;e.postMessage({cmd:\"processThreadQueue\"})}return 1},V:function(e,n){e=new Date(1e3*r()[e>>2]),r()[n>>2]=e.getUTCSeconds(),r()[n+4>>2]=e.getUTCMinutes(),r()[n+8>>2]=e.getUTCHours(),r()[n+12>>2]=e.getUTCDate(),r()[n+16>>2]=e.getUTCMonth(),r()[n+20>>2]=e.getUTCFullYear()-1900,r()[n+24>>2]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2]=e},W:function(e,n){e=new Date(1e3*r()[e>>2]),r()[n>>2]=e.getSeconds(),r()[n+4>>2]=e.getMinutes(),r()[n+8>>2]=e.getHours(),r()[n+12>>2]=e.getDate(),r()[n+16>>2]=e.getMonth(),r()[n+20>>2]=e.getFullYear()-1900,r()[n+24>>2]=e.getDay();var t=new Date(e.getFullYear(),0,1),a=(e.getTime()-t.getTime())/864e5|0;r()[n+28>>2]=a,r()[n+36>>2]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(t=t.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(t,a)),r()[n+32>>2]=e},X:function(e){var n=new Date(r()[e+20>>2]+1900,r()[e+16>>2],r()[e+12>>2],r()[e+8>>2],r()[e+4>>2],r()[e>>2],0),t=r()[e+32>>2],a=n.getTimezoneOffset(),i=new Date(n.getFullYear(),0,1),o=new Date(n.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),s=Math.min(u,o);return 0>t?r()[e+32>>2]=Number(o!=u&&s==a):0<t!=(s==a)&&(o=Math.max(u,o),n.setTime(n.getTime()+6e4*((0<t?s:o)-a))),r()[e+24>>2]=n.getDay(),t=(n.getTime()-i.getTime())/864e5|0,r()[e+28>>2]=t,r()[e>>2]=n.getSeconds(),r()[e+4>>2]=n.getMinutes(),r()[e+8>>2]=n.getHours(),r()[e+12>>2]=n.getDate(),r()[e+16>>2]=n.getMonth(),n.getTime()/1e3|0},Y:function e(n,t,r){e.ob||(e.ob=!0,Ne(n,t,r))},d:function(){oe(\"\")},q:function(e,n){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return r()[ln()>>2]=28,-1;e=he()}return r()[n>>2]=e/1e3|0,r()[n+4>>2]=e%1e3*1e6|0,0},B:function(e,n){return e-n},m:function(){w||y||(E||(E={}),E[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]||(E[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]=1,D(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\")))},v:function(){return 2147483648},f:he,Q:function(e,n,r){t().copyWithin(e,n,n+r)},g:function(){return w?require(\"os\").cpus().length:navigator.hardwareConcurrency},I:function(e,n,t){He.length=n,t>>=3;for(var r=0;r<n;r++)He[r]=a()[t+r];return(0>e?ce[-e-1]:cn[e]).apply(null,He)},u:function(e){var n=t().length;if((e>>>=0)<=n||2147483648<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296),0<(a=Math.max(e,a))%65536&&(a+=65536-a%65536);e:{try{R.grow(Math.min(2147483648,a)-Y.byteLength+65535>>>16),z(R.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},K:function(e,n,t){return je(e)?qe(e,n,t):Le(e,n,t)},C:function(){throw\"unwind\"},L:function(e,n){n>>=2;var t=r()[n+6];return n={alpha:!!r()[n],depth:!!r()[n+1],stencil:!!r()[n+2],antialias:!!r()[n+3],premultipliedAlpha:!!r()[n+4],preserveDrawingBuffer:!!r()[n+5],powerPreference:ze[t],failIfMajorPerformanceCaveat:!!r()[n+7],xb:r()[n+8],Xb:r()[n+9],gb:r()[n+10],qb:r()[n+11],$b:r()[n+12],ac:r()[n+13]},!(e=je(e))||n.qb?0:function(e,n){e.hb||(e.hb=e.getContext,e.getContext=function(n,t){return\"webgl\"==n==(t=e.hb(n,t))instanceof WebGLRenderingContext?t:null});var t=e.getContext(\"webgl\",n);return t?function(e,n){var t=dn(8);r()[t+4>>2]=pn();var a={Vb:t,attributes:n,version:n.xb,Xa:e};return e.canvas&&(e.canvas.Ya=a),(void 0===n.gb||n.gb)&&function(e){if(e||(e=void 0),!e.tb){e.tb=!0;var n=e.Xa;!function(e){var n=e.getExtension(\"ANGLE_instanced_arrays\");n&&(e.vertexAttribDivisor=function(e,t){n.vertexAttribDivisorANGLE(e,t)},e.drawArraysInstanced=function(e,t,r,a){n.drawArraysInstancedANGLE(e,t,r,a)},e.drawElementsInstanced=function(e,t,r,a,i){n.drawElementsInstancedANGLE(e,t,r,a,i)})}(n),function(e){var n=e.getExtension(\"OES_vertex_array_object\");n&&(e.createVertexArray=function(){return n.createVertexArrayOES()},e.deleteVertexArray=function(e){n.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){n.bindVertexArrayOES(e)},e.isVertexArray=function(e){return n.isVertexArrayOES(e)})}(n),function(e){var n=e.getExtension(\"WEBGL_draw_buffers\");n&&(e.drawBuffers=function(e,t){n.drawBuffersWEBGL(e,t)})}(n),n.Pb=n.getExtension(\"EXT_disjoint_timer_query\"),n.Yb=n.getExtension(\"WEBGL_multi_draw\"),(n.getSupportedExtensions()||[]).forEach((function(e){e.includes(\"lose_context\")||e.includes(\"debug\")||n.getExtension(e)}))}}(a),t}(t,n):0}(e,n)},O:Ze,P:$e,D:function(e){Cn(e)},h:Je,l:Ke,s:en,k:nn,J:function(e){var n=Date.now();return r()[e>>2]=n/1e3|0,r()[e+4>>2]=n%1e3*1e3|0,0},a:R||i.wasmMemory,r:sn,e:function(e,n,t,r){return sn(e,n,t,r)}};!function(){function e(e,n){i.asm=e.exports,de.fb.push(i.asm.xa),X=i.asm.Ba,$.unshift(i.asm.$),C=n,v||(re--,i.monitorRunDependencies&&i.monitorRunDependencies(re),0==re&&(null!==ae&&(clearInterval(ae),ae=null),ie&&(e=ie,ie=null,e())))}function n(n){e(n.instance,n.module)}function t(e){return function(){if(!M&&(_||y)){if(\"function\"==typeof fetch&&!te.startsWith(\"file://\"))return fetch(te,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+te+\"'\";return e.arrayBuffer()})).catch((function(){return se()}));if(f)return new Promise((function(e,n){f(te,(function(n){e(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return se()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){D(\"failed to asynchronously prepare wasm: \"+e),oe(e)}))}var r={a:fn};if(v||(re++,i.monitorRunDependencies&&i.monitorRunDependencies(re)),i.instantiateWasm)try{return i.instantiateWasm(r,e)}catch(e){return D(\"Module.instantiateWasm callback failed with error: \"+e),!1}(M||\"function\"!=typeof WebAssembly.instantiateStreaming||ue()||te.startsWith(\"file://\")||\"function\"!=typeof fetch?t(n):fetch(te,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return D(\"wasm streaming compile failed: \"+e),D(\"falling back to ArrayBuffer instantiation\"),t(n)}))}))).catch(u)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.$).apply(null,arguments)},i._OrtInit=function(){return(i._OrtInit=i.asm.aa).apply(null,arguments)},i._OrtCreateSessionOptions=function(){return(i._OrtCreateSessionOptions=i.asm.ba).apply(null,arguments)},i._OrtAddSessionConfigEntry=function(){return(i._OrtAddSessionConfigEntry=i.asm.ca).apply(null,arguments)},i._OrtReleaseSessionOptions=function(){return(i._OrtReleaseSessionOptions=i.asm.da).apply(null,arguments)},i._OrtCreateSession=function(){return(i._OrtCreateSession=i.asm.ea).apply(null,arguments)},i._OrtReleaseSession=function(){return(i._OrtReleaseSession=i.asm.fa).apply(null,arguments)},i._OrtGetInputCount=function(){return(i._OrtGetInputCount=i.asm.ga).apply(null,arguments)},i._OrtGetOutputCount=function(){return(i._OrtGetOutputCount=i.asm.ha).apply(null,arguments)},i._OrtGetInputName=function(){return(i._OrtGetInputName=i.asm.ia).apply(null,arguments)},i._OrtGetOutputName=function(){return(i._OrtGetOutputName=i.asm.ja).apply(null,arguments)},i._OrtFree=function(){return(i._OrtFree=i.asm.ka).apply(null,arguments)},i._OrtCreateTensor=function(){return(i._OrtCreateTensor=i.asm.la).apply(null,arguments)},i._OrtGetTensorData=function(){return(i._OrtGetTensorData=i.asm.ma).apply(null,arguments)},i._OrtReleaseTensor=function(){return(i._OrtReleaseTensor=i.asm.na).apply(null,arguments)},i._OrtCreateRunOptions=function(){return(i._OrtCreateRunOptions=i.asm.oa).apply(null,arguments)},i._OrtAddRunConfigEntry=function(){return(i._OrtAddRunConfigEntry=i.asm.pa).apply(null,arguments)},i._OrtReleaseRunOptions=function(){return(i._OrtReleaseRunOptions=i.asm.qa).apply(null,arguments)},i._OrtRun=function(){return(i._OrtRun=i.asm.ra).apply(null,arguments)},i._OrtEndProfiling=function(){return(i._OrtEndProfiling=i.asm.sa).apply(null,arguments)};var ln=i.___errno_location=function(){return(ln=i.___errno_location=i.asm.ta).apply(null,arguments)},pn=i._pthread_self=function(){return(pn=i._pthread_self=i.asm.ua).apply(null,arguments)},dn=i._malloc=function(){return(dn=i._malloc=i.asm.va).apply(null,arguments)},mn=i._free=function(){return(mn=i._free=i.asm.wa).apply(null,arguments)};i._emscripten_tls_init=function(){return(i._emscripten_tls_init=i.asm.xa).apply(null,arguments)};var hn=i.___funcs_on_exit=function(){return(hn=i.___funcs_on_exit=i.asm.ya).apply(null,arguments)},gn=i._emscripten_main_thread_process_queued_calls=function(){return(gn=i._emscripten_main_thread_process_queued_calls=i.asm.za).apply(null,arguments)},bn=i.__emscripten_thread_init=function(){return(bn=i.__emscripten_thread_init=i.asm.Aa).apply(null,arguments)};i._emscripten_current_thread_process_queued_calls=function(){return(i._emscripten_current_thread_process_queued_calls=i.asm.Ca).apply(null,arguments)};var _n=i._emscripten_sync_run_in_main_thread_4=function(){return(_n=i._emscripten_sync_run_in_main_thread_4=i.asm.Da).apply(null,arguments)},yn=i._emscripten_run_in_main_runtime_thread_js=function(){return(yn=i._emscripten_run_in_main_runtime_thread_js=i.asm.Ea).apply(null,arguments)},wn=i._emscripten_dispatch_to_thread_=function(){return(wn=i._emscripten_dispatch_to_thread_=i.asm.Fa).apply(null,arguments)},vn=i.__emscripten_thread_free_data=function(){return(vn=i.__emscripten_thread_free_data=i.asm.Ga).apply(null,arguments)};i.__emscripten_thread_exit=function(){return(i.__emscripten_thread_exit=i.asm.Ha).apply(null,arguments)};var On,An=i._memalign=function(){return(An=i._memalign=i.asm.Ia).apply(null,arguments)},Tn=i._emscripten_stack_set_limits=function(){return(Tn=i._emscripten_stack_set_limits=i.asm.Ja).apply(null,arguments)},Sn=i.stackSave=function(){return(Sn=i.stackSave=i.asm.Ka).apply(null,arguments)},En=i.stackRestore=function(){return(En=i.stackRestore=i.asm.La).apply(null,arguments)},Mn=i.stackAlloc=function(){return(Mn=i.stackAlloc=i.asm.Ma).apply(null,arguments)},xn=i.__emscripten_main_thread_futex=687896,Dn=i.__emscripten_allow_main_runtime_queued_calls=683012;function kn(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function Rn(){function e(){if(!On&&(On=!0,i.calledRun=!0,!F)&&(v||fe($),o(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!v)){if(i.postRun)for(\"function\"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;){var e=i.postRun.shift();K.unshift(e)}fe(K)}}if(!(0<re))if(v)o(i),v||fe($),postMessage({cmd:\"loaded\"});else{if(i.preRun)for(\"function\"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)ne();fe(Z),0<re||(i.setStatus?(i.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){i.setStatus(\"\")}),1),e()}),1)):e())}}function Cn(e){if(v)throw me(e),\"unwind\";ee()||v||(hn(),fe(J),ve[1].length&&Oe(1,10),ve[2].length&&Oe(2,10),de.kb()),ee()||(de.kb(),i.onExit&&i.onExit(e),F=!0),b(e,new kn(e))}if(i.UTF8ToString=B,i.stringToUTF8=q,i.lengthBytesUTF8=L,i.keepRuntimeAlive=ee,i.PThread=de,i.stackSave=Sn,i.stackRestore=En,i.stackAlloc=Mn,i.PThread=de,i.wasmMemory=R,i.ExitStatus=kn,ie=function e(){On||Rn(),On||(ie=e)},i.run=Rn,i.preInit)for(\"function\"==typeof i.preInit&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return v&&(k=!1,de.ub()),Rn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar c;c||(c=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa=Object.assign,ba,g;c.ready=new Promise(function(a,b){ba=a;g=b});var ca=aa({},c),r=\"./this.program\",da=\"object\"===typeof window,t=\"function\"===typeof importScripts,ea=\"object\"===typeof process&&\"object\"===typeof process.versions&&\"string\"===typeof process.versions.node,w=\"\",x,y,A,fs,B,C;\r\nif(ea)w=t?require(\"path\").dirname(w)+\"/\":__dirname+\"/\",C=()=>{B||(fs=require(\"fs\"),B=require(\"path\"))},x=function(a,b){C();a=B.normalize(a);return fs.readFileSync(a,b?null:\"utf8\")},A=a=>{a=x(a,!0);a.buffer||(a=new Uint8Array(a));return a},y=(a,b,e)=>{C();a=B.normalize(a);fs.readFile(a,function(f,h){f?e(f):b(h.buffer)})},1<process.argv.length&&(r=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){throw a;}),process.on(\"unhandledRejection\",function(a){throw a;\r\n}),c.inspect=function(){return\"[Emscripten Module object]\"};else if(da||t)t?w=self.location.href:\"undefined\"!==typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),0!==w.indexOf(\"blob:\")?w=w.substr(0,w.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):w=\"\",x=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},t&&(A=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),\r\ny=(a,b,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?b(f.response):e()};f.onerror=e;f.send(null)};var fa=c.print||console.log.bind(console),D=c.printErr||console.warn.bind(console);aa(c,ca);ca=null;c.thisProgram&&(r=c.thisProgram);var E;c.wasmBinary&&(E=c.wasmBinary);var noExitRuntime=c.noExitRuntime||!1;\"object\"!==typeof WebAssembly&&F(\"no native wasm support detected\");\r\nvar G,ha=!1,ia=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ja(a,b,e){var f=b+e;for(e=b;a[e]&&!(e>=f);)++e;if(16<e-b&&a.subarray&&ia)return ia.decode(a.subarray(b,e));for(f=\"\";b<e;){var h=a[b++];if(h&128){var k=a[b++]&63;if(192==(h&224))f+=String.fromCharCode((h&31)<<6|k);else{var l=a[b++]&63;h=224==(h&240)?(h&15)<<12|k<<6|l:(h&7)<<18|k<<12|l<<6|a[b++]&63;65536>h?f+=String.fromCharCode(h):(h-=65536,f+=String.fromCharCode(55296|h>>10,56320|h&1023))}}else f+=String.fromCharCode(h)}return f}function H(a,b){return a?ja(I,a,b):\"\"}\r\nfunction J(a,b,e,f){if(!(0<f))return 0;var h=e;f=e+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var p=a.charCodeAt(++k);l=65536+((l&1023)<<10)|p&1023}if(127>=l){if(e>=f)break;b[e++]=l}else{if(2047>=l){if(e+1>=f)break;b[e++]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;b[e++]=224|l>>12}else{if(e+3>=f)break;b[e++]=240|l>>18;b[e++]=128|l>>12&63}b[e++]=128|l>>6&63}b[e++]=128|l&63}}b[e]=0;return e-h}\r\nfunction K(a){for(var b=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);55296<=f&&57343>=f&&(f=65536+((f&1023)<<10)|a.charCodeAt(++e)&1023);127>=f?++b:b=2047>=f?b+2:65535>=f?b+3:b+4}return b}function ka(a){var b=K(a)+1,e=L(b);e&&J(a,M,e,b);return e}var la,M,I,N;\r\nfunction ma(){var a=G.buffer;la=a;c.HEAP8=M=new Int8Array(a);c.HEAP16=new Int16Array(a);c.HEAP32=N=new Int32Array(a);c.HEAPU8=I=new Uint8Array(a);c.HEAPU16=new Uint16Array(a);c.HEAPU32=new Uint32Array(a);c.HEAPF32=new Float32Array(a);c.HEAPF64=new Float64Array(a)}var na,oa=[],pa=[],qa=[];function ra(){var a=c.preRun.shift();oa.unshift(a)}var O=0,P=null,Q=null;c.preloadedImages={};c.preloadedAudios={};\r\nfunction F(a){if(c.onAbort)c.onAbort(a);a=\"Aborted(\"+a+\")\";D(a);ha=!0;a=new WebAssembly.RuntimeError(a+\". Build with -s ASSERTIONS=1 for more info.\");g(a);throw a;}function sa(){return R.startsWith(\"data:application/octet-stream;base64,\")}var R;R=\"ort-wasm.wasm\";if(!sa()){var ta=R;R=c.locateFile?c.locateFile(ta,w):w+ta}function ua(){var a=R;try{if(a==R&&E)return new Uint8Array(E);if(A)return A(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){F(b)}}\r\nfunction va(){if(!E&&(da||t)){if(\"function\"===typeof fetch&&!R.startsWith(\"file://\"))return fetch(R,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+R+\"'\";return a.arrayBuffer()}).catch(function(){return ua()});if(y)return new Promise(function(a,b){y(R,function(e){a(new Uint8Array(e))},b)})}return Promise.resolve().then(function(){return ua()})}\r\nfunction S(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(c);else{var e=b.Na;\"number\"===typeof e?void 0===b.va?wa(e)():wa(e)(b.va):e(void 0===b.va?null:b.va)}}}var T=[];function wa(a){var b=T[a];b||(a>=T.length&&(T.length=a+1),T[a]=b=na.get(a));return b}\r\nfunction xa(a){this.qa=a-16;this.Fa=function(b){N[this.qa+4>>2]=b};this.Ca=function(b){N[this.qa+8>>2]=b};this.Da=function(){N[this.qa>>2]=0};this.Ba=function(){M[this.qa+12>>0]=0};this.Ea=function(){M[this.qa+13>>0]=0};this.ya=function(b,e){this.Fa(b);this.Ca(e);this.Da();this.Ba();this.Ea()}}var ya=0,za={},Aa=[null,[],[]],U={};\r\nfunction Ba(a,b,e){function f(v){return(v=v.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?v[1]:\"GMT\"}var h=(new Date).getFullYear(),k=new Date(h,0,1),l=new Date(h,6,1);h=k.getTimezoneOffset();var p=l.getTimezoneOffset();N[a>>2]=60*Math.max(h,p);N[b>>2]=Number(h!=p);a=f(k);b=f(l);a=ka(a);b=ka(b);p<h?(N[e>>2]=a,N[e+4>>2]=b):(N[e>>2]=b,N[e+4>>2]=a)}function Ca(a,b,e){Ca.xa||(Ca.xa=!0,Ba(a,b,e))}var Ga;Ga=ea?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var Ha={};\r\nfunction Ia(){if(!Ja){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:r||\"./this.program\"},b;for(b in Ha)void 0===Ha[b]?delete a[b]:a[b]=Ha[b];var e=[];for(b in a)e.push(b+\"=\"+a[b]);Ja=e}return Ja}var Ja;function V(a){return 0===a%4&&(0!==a%100||0===a%400)}function Ka(a,b){for(var e=0,f=0;f<=b;e+=a[f++]);return e}\r\nvar W=[31,29,31,30,31,30,31,31,30,31,30,31],X=[31,28,31,30,31,30,31,31,30,31,30,31];function Y(a,b){for(a=new Date(a.getTime());0<b;){var e=a.getMonth(),f=(V(a.getFullYear())?W:X)[e];if(b>f-a.getDate())b-=f-a.getDate()+1,a.setDate(1),11>e?a.setMonth(e+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\r\nfunction La(a,b,e,f){function h(d,m,n){for(d=\"number\"===typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function k(d,m){return h(d,m,\"0\")}function l(d,m){function n(Da){return 0>Da?-1:0<Da?1:0}var z;0===(z=n(d.getFullYear()-m.getFullYear()))&&0===(z=n(d.getMonth()-m.getMonth()))&&(z=n(d.getDate()-m.getDate()));return z}function p(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function v(d){d=Y(new Date(d.oa+1900,0,1),d.ua);var m=new Date(d.getFullYear()+1,0,4),n=p(new Date(d.getFullYear(),0,4));m=p(m);return 0>=l(n,d)?0>=l(m,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var u=N[f+40>>2];f={Ia:N[f>>2],Ha:N[f+4>>2],sa:N[f+8>>2],ra:N[f+12>>2],pa:N[f+16>>2],oa:N[f+20>>2],ta:N[f+24>>2],ua:N[f+28>>2],Qa:N[f+32>>2],Ga:N[f+\r\n36>>2],Ja:u?H(u):\"\"};e=H(e);u={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var q in u)e=e.replace(new RegExp(q,\"g\"),u[q]);var Ea=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),\r\nFa=\"January February March April May June July August September October November December\".split(\" \");u={\"%a\":function(d){return Ea[d.ta].substring(0,3)},\"%A\":function(d){return Ea[d.ta]},\"%b\":function(d){return Fa[d.pa].substring(0,3)},\"%B\":function(d){return Fa[d.pa]},\"%C\":function(d){return k((d.oa+1900)/100|0,2)},\"%d\":function(d){return k(d.ra,2)},\"%e\":function(d){return h(d.ra,2,\" \")},\"%g\":function(d){return v(d).toString().substring(2)},\"%G\":function(d){return v(d)},\"%H\":function(d){return k(d.sa,\r\n2)},\"%I\":function(d){d=d.sa;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":function(d){return k(d.ra+Ka(V(d.oa+1900)?W:X,d.pa-1),3)},\"%m\":function(d){return k(d.pa+1,2)},\"%M\":function(d){return k(d.Ha,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.sa&&12>d.sa?\"AM\":\"PM\"},\"%S\":function(d){return k(d.Ia,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ta||7},\"%U\":function(d){var m=new Date(d.oa+1900,0,1),n=0===m.getDay()?m:Y(m,7-m.getDay());d=new Date(d.oa+1900,d.pa,d.ra);return 0>\r\nl(n,d)?k(Math.ceil((31-n.getDate()+(Ka(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%V\":function(d){var m=new Date(d.oa+1901,0,4),n=p(new Date(d.oa+1900,0,4));m=p(m);var z=Y(new Date(d.oa+1900,0,1),d.ua);return 0>l(z,n)?\"53\":0>=l(m,z)?\"01\":k(Math.ceil((n.getFullYear()<d.oa+1900?d.ua+32-n.getDate():d.ua+1-n.getDate())/7),2)},\"%w\":function(d){return d.ta},\"%W\":function(d){var m=new Date(d.oa,0,1),n=1===m.getDay()?m:Y(m,0===m.getDay()?1:7-m.getDay()+1);d=new Date(d.oa+\r\n1900,d.pa,d.ra);return 0>l(n,d)?k(Math.ceil((31-n.getDate()+(Ka(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%y\":function(d){return(d.oa+1900).toString().substring(2)},\"%Y\":function(d){return d.oa+1900},\"%z\":function(d){d=d.Ga;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Ja},\"%%\":function(){return\"%\"}};for(q in u)e.includes(q)&&(e=e.replace(new RegExp(q,\"g\"),u[q](f)));q=Ma(e);if(q.length>b)return 0;\r\nM.set(q,a);return q.length-1}function Ma(a){var b=Array(K(a)+1);J(a,b,0,b.length);return b}\r\nvar Qa={a:function(a){return L(a+16)+16},b:function(a,b,e){(new xa(a)).ya(b,e);ya++;throw a;},g:function(){return 0},I:function(){},F:function(){},v:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(a,b){a=H(a);return U.Ka(a,b)},A:function(a,b,e,f,h,k){k<<=12;if(0!==(f&16)&&0!==a%65536)b=-28;else if(0!==(f&32)){a=65536*Math.ceil(b/65536);var l=Na(65536,a);l?(I.fill(0,l,l+a),a=l):a=0;a?(za[a]={Aa:a,za:b,wa:!0,fd:h,Pa:e,flags:f,offset:k},b=a):b=-48}else b=-52;return b},z:function(a,\r\nb){var e=za[a];0!==b&&e?(b===e.za&&(za[a]=null,e.wa&&Oa(e.Aa)),a=0):a=-28;return a},k:function(){},x:function(a,b,e){a=H(a);return U.La(a,b,e)},t:function(){},H:function(){},u:function(){},h:function(){F(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},n:function(){F(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},J:function(a,b){a=new Date(1E3*\r\nN[a>>2]);N[b>>2]=a.getUTCSeconds();N[b+4>>2]=a.getUTCMinutes();N[b+8>>2]=a.getUTCHours();N[b+12>>2]=a.getUTCDate();N[b+16>>2]=a.getUTCMonth();N[b+20>>2]=a.getUTCFullYear()-1900;N[b+24>>2]=a.getUTCDay();N[b+28>>2]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},K:function(a,b){a=new Date(1E3*N[a>>2]);N[b>>2]=a.getSeconds();N[b+4>>2]=a.getMinutes();N[b+8>>2]=a.getHours();N[b+12>>2]=a.getDate();N[b+16>>2]=a.getMonth();N[b+20>>2]=a.getFullYear()-1900;N[b+24>>2]=a.getDay();var e=new Date(a.getFullYear(),\r\n0,1);N[b+28>>2]=(a.getTime()-e.getTime())/864E5|0;N[b+36>>2]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=e.getTimezoneOffset();N[b+32>>2]=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0},L:function(a){var b=new Date(N[a+20>>2]+1900,N[a+16>>2],N[a+12>>2],N[a+8>>2],N[a+4>>2],N[a>>2],0),e=N[a+32>>2],f=b.getTimezoneOffset(),h=new Date(b.getFullYear(),0,1),k=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),l=h.getTimezoneOffset(),p=Math.min(l,k);0>e?N[a+32>>\r\n2]=Number(k!=l&&p==f):0<e!=(p==f)&&(k=Math.max(l,k),b.setTime(b.getTime()+6E4*((0<e?p:k)-f)));N[a+24>>2]=b.getDay();N[a+28>>2]=(b.getTime()-h.getTime())/864E5|0;N[a>>2]=b.getSeconds();N[a+4>>2]=b.getMinutes();N[a+8>>2]=b.getHours();N[a+12>>2]=b.getDate();N[a+16>>2]=b.getMonth();return b.getTime()/1E3|0},M:Ca,d:function(){F(\"\")},m:function(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=Ga();else return N[Pa()>>2]=28,-1;N[b>>2]=a/1E3|0;N[b+4>>2]=a%1E3*1E6|0;return 0},p:function(a,b){return a-b},\r\ns:function(){return 2147483648},l:Ga,E:function(a,b,e){I.copyWithin(a,b,b+e)},f:function(a){var b=I.length;a>>>=0;if(2147483648<a)return!1;for(var e=1;4>=e;e*=2){var f=b*(1+.2/e);f=Math.min(f,a+100663296);f=Math.max(a,f);0<f%65536&&(f+=65536-f%65536);a:{try{G.grow(Math.min(2147483648,f)-la.byteLength+65535>>>16);ma();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},C:function(a,b){var e=0;Ia().forEach(function(f,h){var k=b+e;h=N[a+4*h>>2]=k;for(k=0;k<f.length;++k)M[h++>>0]=f.charCodeAt(k);\r\nM[h>>0]=0;e+=f.length+1});return 0},D:function(a,b){var e=Ia();N[a>>2]=e.length;var f=0;e.forEach(function(h){f+=h.length+1});N[b>>2]=f;return 0},e:function(){return 0},j:function(a,b,e,f){a=U.Oa(a);b=U.Ma(a,b,e);N[f>>2]=b;return 0},q:function(){},i:function(a,b,e,f){for(var h=0,k=0;k<e;k++){var l=N[b>>2],p=N[b+4>>2];b+=8;for(var v=0;v<p;v++){var u=I[l+v],q=Aa[a];0===u||10===u?((1===a?fa:D)(ja(q,0)),q.length=0):q.push(u)}h+=p}N[f>>2]=h;return 0},w:function(a){var b=Date.now();N[a>>2]=b/1E3|0;N[a+\r\n4>>2]=b%1E3*1E3|0;return 0},o:La,c:function(a,b,e,f){return La(a,b,e,f)}};\r\n(function(){function a(h){c.asm=h.exports;G=c.asm.N;ma();na=c.asm.ja;pa.unshift(c.asm.O);O--;c.monitorRunDependencies&&c.monitorRunDependencies(O);0==O&&(null!==P&&(clearInterval(P),P=null),Q&&(h=Q,Q=null,h()))}function b(h){a(h.instance)}function e(h){return va().then(function(k){return WebAssembly.instantiate(k,f)}).then(function(k){return k}).then(h,function(k){D(\"failed to asynchronously prepare wasm: \"+k);F(k)})}var f={a:Qa};O++;c.monitorRunDependencies&&c.monitorRunDependencies(O);if(c.instantiateWasm)try{return c.instantiateWasm(f,\r\na)}catch(h){return D(\"Module.instantiateWasm callback failed with error: \"+h),!1}(function(){return E||\"function\"!==typeof WebAssembly.instantiateStreaming||sa()||R.startsWith(\"file://\")||\"function\"!==typeof fetch?e(b):fetch(R,{credentials:\"same-origin\"}).then(function(h){return WebAssembly.instantiateStreaming(h,f).then(b,function(k){D(\"wasm streaming compile failed: \"+k);D(\"falling back to ArrayBuffer instantiation\");return e(b)})})})().catch(g);return{}})();\r\nc.___wasm_call_ctors=function(){return(c.___wasm_call_ctors=c.asm.O).apply(null,arguments)};c._OrtInit=function(){return(c._OrtInit=c.asm.P).apply(null,arguments)};c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.Q).apply(null,arguments)};c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.R).apply(null,arguments)};c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.S).apply(null,arguments)};\r\nc._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.T).apply(null,arguments)};c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.U).apply(null,arguments)};c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.V).apply(null,arguments)};c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm.W).apply(null,arguments)};c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.X).apply(null,arguments)};\r\nc._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.Y).apply(null,arguments)};c._OrtFree=function(){return(c._OrtFree=c.asm.Z).apply(null,arguments)};c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm._).apply(null,arguments)};c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.$).apply(null,arguments)};c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.aa).apply(null,arguments)};\r\nc._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.ba).apply(null,arguments)};c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.ca).apply(null,arguments)};c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.da).apply(null,arguments)};c._OrtRun=function(){return(c._OrtRun=c.asm.ea).apply(null,arguments)};c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.fa).apply(null,arguments)};\r\nvar Pa=c.___errno_location=function(){return(Pa=c.___errno_location=c.asm.ga).apply(null,arguments)},L=c._malloc=function(){return(L=c._malloc=c.asm.ha).apply(null,arguments)},Oa=c._free=function(){return(Oa=c._free=c.asm.ia).apply(null,arguments)},Na=c._memalign=function(){return(Na=c._memalign=c.asm.ka).apply(null,arguments)},Ra=c.stackSave=function(){return(Ra=c.stackSave=c.asm.la).apply(null,arguments)},Sa=c.stackRestore=function(){return(Sa=c.stackRestore=c.asm.ma).apply(null,arguments)},Ta=\r\nc.stackAlloc=function(){return(Ta=c.stackAlloc=c.asm.na).apply(null,arguments)};c.UTF8ToString=H;c.stringToUTF8=function(a,b,e){return J(a,I,b,e)};c.lengthBytesUTF8=K;c.stackSave=Ra;c.stackRestore=Sa;c.stackAlloc=Ta;var Z;Q=function Ua(){Z||Va();Z||(Q=Ua)};\r\nfunction Va(){function a(){if(!Z&&(Z=!0,c.calledRun=!0,!ha)){S(pa);ba(c);if(c.onRuntimeInitialized)c.onRuntimeInitialized();if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var b=c.postRun.shift();qa.unshift(b)}S(qa)}}if(!(0<O)){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)ra();S(oa);0<O||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){c.setStatus(\"\")},1);a()},1)):a())}}c.run=Va;\r\nif(c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();Va();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\nimport {promisify} from 'util';\nimport {initWasm} from './wasm/proxy-wrapper';\n\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    let buffer: Uint8Array;\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        buffer = await promisify(readFile)(pathOrBuffer);\n      } else {\n        // browser\n        const response = await fetch(pathOrBuffer);\n        const arrayBuffer = await response.arrayBuffer();\n        buffer = new Uint8Array(arrayBuffer);\n      }\n    } else {\n      buffer = pathOrBuffer;\n    }\n\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(buffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -1);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('wasm', wasmBackend, 0);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\n\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ?\n        this.session.getTextureData(tensorId, isPacked) :\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, parseAveragePoolAttributes} from './ops/pool';\nimport {globalAveragePool, parseGlobalAveragePoolAttributes} from './ops/pool';\nimport {maxPool, parseMaxPoolAttributes} from './ops/pool';\nimport {globalMaxPool} from './ops/pool';\nimport {reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {parseReduceAttributes} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\nimport {ConcatAttributes} from './concat';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActicationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\nimport {getActicationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/master/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/master/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    roiInputIdx = 1;\n    scalesInputIdx = 2;\n    sizesInputIdx = 3;\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\nfunction createCanvas(): HTMLCanvasElement {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {Tensor} from './tensor';\nimport {LongUtil, ProtoUtil, MIN_CLIP, MAX_CLIP} from './util';\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport ortFbs = onnxruntime.experimental.fbs;\nimport {LongUtil} from './util';\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\nimport {OrtWasmMessage, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, (scriptSrc as string).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {createSession, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\nimport {SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n      const modelDataOffset = wasm._malloc(model.byteLength);\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        wasm.HEAPU8.set(model, modelDataOffset);\n        sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelDataOffset);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int32';\n    case DataType.uint64:\n      return 'uint32';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't get a tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.11.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={474:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){function t(){return C.buffer!=U&&X(C.buffer),W}function r(){return C.buffer!=U&&X(C.buffer),L}function a(){return C.buffer!=U&&X(C.buffer),H}function o(){return C.buffer!=U&&X(C.buffer),Y}var i;e=e||{},i||(i=void 0!==e?e:{});var u,s,c=Object.assign;i.ready=new Promise((function(e,t){u=e,s=t}));var l,f,p,d,m,h,g=c({},i),y=\\\"./this.program\\\",v=(e,t)=>{throw t},b=\\\"object\\\"==typeof window,_=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=i.ENVIRONMENT_IS_PTHREAD||!1,A=\\\"\\\";function S(e){return i.locateFile?i.locateFile(e,A):A+e}if(w){let t;A=_?n(908).dirname(A)+\\\"/\\\":\\\"//\\\",h=()=>{m||(d=n(384),m=n(908))},l=function(e,t){return h(),e=m.normalize(e),d.readFileSync(e,t?null:\\\"utf8\\\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{h(),e=m.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof Rt))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),v=(e,t)=>{if(te())throw process.exitCode=e,t;t instanceof Rt||R(\\\"exiting due to exception: \\\"+t),process.exit(e)},i.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=t.Worker}else(b||_)&&(_?A=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf(\\\"blob:\\\")?A.substr(0,A.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},_&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var E=console.log.bind(console),T=console.warn.bind(console);w&&(h(),E=e=>d.writeSync(1,e+\\\"\\\\n\\\"),T=e=>d.writeSync(2,e+\\\"\\\\n\\\"));var M,D,x=i.print||E,R=i.printErr||T;c(i,g),g=null,i.thisProgram&&(y=i.thisProgram),i.quit&&(v=i.quit),i.wasmBinary&&(D=i.wasmBinary);var k=i.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&ue(\\\"no native wasm support detected\\\");var C,F,P=!1;function I(e){var t=new TextDecoder(e);this.decode=e=>(e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),t.decode.call(t,e))}var U,W,L,H,Y,j=\\\"undefined\\\"!=typeof TextDecoder?new I(\\\"utf8\\\"):void 0;function B(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&j)return j.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function G(e,t){return e?B(r(),e,t):\\\"\\\"}function N(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++]=i}else{if(2047>=i){if(n+1>=r)break;t[n++]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++]=224|i>>12}else{if(n+3>=r)break;t[n++]=240|i>>18,t[n++]=128|i>>12&63}t[n++]=128|i>>6&63}t[n++]=128|63&i}}return t[n]=0,n-a}function z(e,t,n){return N(e,r(),t,n)}function V(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function q(e){var n=V(e)+1,r=dt(n);return r&&N(e,t(),r,n),r}function X(e){U=e,i.HEAP8=W=new Int8Array(e),i.HEAP16=new Int16Array(e),i.HEAP32=H=new Int32Array(e),i.HEAPU8=L=new Uint8Array(e),i.HEAPU16=new Uint16Array(e),i.HEAPU32=new Uint32Array(e),i.HEAPF32=new Float32Array(e),i.HEAPF64=Y=new Float64Array(e)}\\\"undefined\\\"!=typeof TextDecoder&&new I(\\\"utf-16le\\\"),O&&(U=i.buffer);var Q=i.INITIAL_MEMORY||16777216;if(O)C=i.wasmMemory,U=i.buffer;else if(i.wasmMemory)C=i.wasmMemory;else if(!((C=new WebAssembly.Memory({initial:Q/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");C&&(U=C.buffer),Q=U.byteLength,X(U);var J,Z=[],$=[],K=[],ee=[];function te(){return k||!1}function ne(){var e=i.preRun.shift();Z.unshift(e)}var re,ae=0,oe=null,ie=null;function ue(e){throw O?postMessage({cmd:\\\"onAbort\\\",arg:e}):i.onAbort&&i.onAbort(e),R(e=\\\"Aborted(\\\"+e+\\\")\\\"),P=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -s ASSERTIONS=1 for more info.\\\"),s(e),e}function se(){return re.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ce(){var e=re;try{if(e==re&&D)return new Uint8Array(D);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ue(e)}}i.preloadedImages={},i.preloadedAudios={},re=\\\"ort-wasm-threaded.wasm\\\",se()||(re=S(re));var le={};function fe(e){for(;0<e.length;){var t=e.shift();if(\\\"function\\\"==typeof t)t(i);else{var n=t.Tb;\\\"number\\\"==typeof n?void 0===t.Sa?ve(n)():ve(n)(t.Sa):n(void 0===t.Sa?null:t.Sa)}}}function pe(e){var t=Et();return e=e(),Tt(t),e}function de(e){var t=me.Oa[e];t&&(a()[e>>2]=0,me.jb(t.worker))}var me={Pa:[],Va:[],fb:[],Wb:function(){},ub:function(){me.receiveObjectTransfer=me.zb,me.threadInit=me.lb,me.setExitStatus=me.Bb},Oa:{},Bb:function(){},kb:function(){for(var e in me.Oa){var t=me.Oa[e];t&&t.worker&&me.jb(t.worker)}for(e=0;e<me.Pa.length;++e)me.Pa[e].terminate();me.Pa=[]},jb:function(e){me.Ab((function(){delete me.Oa[e.Qa.eb],me.Pa.push(e),me.Va.splice(me.Va.indexOf(e),1),wt(e.Qa.eb),e.Qa=void 0}))},Ab:function(e){a()[xt>>2]=0;try{e()}finally{a()[xt>>2]=1}},zb:function(){},lb:function(){for(var e in me.fb)me.fb[e]()},wb:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.Qa&&(me.pb=e.Qa.eb),n.targetThread&&n.targetThread!=pt()){var o=me.Oa[n.bc];o?o.worker.postMessage(n,n.transferList):R('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processQueuedMainThreadWork\\\"===r?gt():\\\"spawnThread\\\"===r?_e(n):\\\"cleanupThread\\\"===r?de(n.thread):\\\"killThread\\\"===r?(n=n.thread,a()[n>>2]=0,r=me.Oa[n],delete me.Oa[n],r.worker.terminate(),wt(n),me.Va.splice(me.Va.indexOf(r.worker),1),r.worker.Qa=void 0):\\\"cancelThread\\\"===r?me.Oa[n.thread].worker.postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t&&t(e),e.Ua&&(e.Ua(),delete e.Ua)):\\\"print\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?R(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"onAbort\\\"===r?i.onAbort&&i.onAbort(n.arg):R(\\\"worker sent an unknown command \\\"+r);me.pb=void 0},e.onerror=e=>{throw R(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:i.mainScriptUrlOrBlob||_scriptDir,wasmMemory:C,wasmModule:F})},mb:function(){var e=S(\\\"ort-wasm-threaded.worker.js\\\");me.Pa.push(new Worker(e))},rb:function(){return 0==me.Pa.length&&(me.mb(),me.wb(me.Pa[0])),me.Pa.pop()}};function he(e){if(O)return je(1,0,e);try{Ct(e)}catch(e){e instanceof Rt||\\\"unwind\\\"==e||v(1,e)}}i.establishStackSpace=function(){var e=pt(),t=a()[e+44>>2];e=a()[e+48>>2],St(t,t-e),Tt(t)};var ge,ye=[];function ve(e){var t=ye[e];return t||(e>=ye.length&&(ye.length=e+1),ye[e]=t=J.get(e)),t}function be(e){this.Ta=e-16,this.Gb=function(e){a()[this.Ta+4>>2]=e},this.Db=function(e){a()[this.Ta+8>>2]=e},this.Eb=function(){a()[this.Ta>>2]=0},this.Cb=function(){t()[this.Ta+12>>0]=0},this.Fb=function(){t()[this.Ta+13>>0]=0},this.sb=function(e,t){this.Gb(e),this.Db(t),this.Eb(),this.Cb(),this.Fb()}}function _e(e){var t=me.rb();if(!t)return 6;me.Va.push(t);var n=me.Oa[e.cb]={worker:t,eb:e.cb};t.Qa=n;var r={cmd:\\\"run\\\",start_routine:e.Hb,arg:e.Sa,threadInfoStruct:e.cb};return t.Ua=()=>{r.time=performance.now(),t.postMessage(r,e.Mb)},t.loaded&&(t.Ua(),delete t.Ua),0}i.invokeEntryPoint=function(e,t){return ve(e)(t)},ge=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-i.__performance_now_clock_drift:()=>performance.now();var we={},Oe=[null,[],[]];function Ae(e,t){var n=Oe[e];0===t||10===t?((1===e?x:R)(B(n,0)),n.length=0):n.push(t)}var Se={};function Ee(e,t,n){return O?je(2,1,e,t,n):0}function Te(e,t){if(O)return je(3,1,e,t)}function Me(e,t,n,r){if(O)return je(4,1,e,t,n,r)}function De(e,t){if(O)return je(5,1,e,t)}function xe(e,t,n){if(O)return je(6,1,e,t,n)}function Re(e,t,n){return O?je(7,1,e,t,n):0}function ke(e,t){if(O)return je(8,1,e,t)}function Ce(e,t){return O?je(9,1,e,t):(e=G(e),Se.Qb(e,t))}function Fe(e,t,n,a,o,i){if(O)t=je(10,1,e,t,n,a,o,i);else if(i<<=12,0!=(16&a)&&0!=e%65536)t=-28;else if(0!=(32&a)){var u=65536*Math.ceil(t/65536);(e=At(65536,u))?r().fill(0,e,e+u):e=0,e?(we[e]={yb:e,vb:t,nb:!0,fd:o,Zb:n,flags:a,offset:i},t=e):t=-48}else t=-52;return t}function Pe(e,t){if(O)e=je(11,1,e,t);else{var n=we[e];0!==t&&n?(t===n.vb&&(we[e]=null,n.nb&&mt(n.yb)),e=0):e=-28}return e}function Ie(e,t,n){if(O)return je(12,1,e,t,n)}function Ue(e,t,n){return O?je(13,1,e,t,n):(e=G(e),Se.Rb(e,t,n))}function We(e){if(O)return je(14,1,e)}function Le(e,t){if(O)return je(15,1,e,t)}function He(e){if(O)return je(16,1,e)}function Ye(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return je(17,1,e,t,n);var o=(new Date).getFullYear(),i=new Date(o,0,1),u=new Date(o,6,1);o=i.getTimezoneOffset();var s=u.getTimezoneOffset(),c=Math.max(o,s);a()[e>>2]=60*c,a()[t>>2]=Number(o!=s),e=r(i),t=r(u),e=q(e),t=q(t),s<o?(a()[n>>2]=e,a()[n+4>>2]=t):(a()[n>>2]=t,a()[n+4>>2]=e)}function je(e,t){var n=arguments.length-2,r=arguments;return pe((function(){for(var a=Mt(8*n),i=a>>3,u=0;u<n;u++){var s=r[2+u];o()[i+u]=s}return bt(e,n,a,t)}))}var Be=[],Ge=[0,\\\"undefined\\\"!=typeof document?document:0,\\\"undefined\\\"!=typeof window?window:0];function Ne(e){return e=2<e?G(e):e,Ge[e]||(\\\"undefined\\\"!=typeof document?document.querySelector(e):void 0)}function ze(e,t,n){var r=Ne(e);return r?(r.Za&&(a()[r.Za>>2]=t,a()[r.Za+4>>2]=n),!r.ib&&r.Ob?r.Za?(function(e,t,n,r){pe((function(){var o=Mt(12),i=0;if(t){i=V(t)+1;var u=dt(i);z(t,u,i),i=u}a()[o>>2]=i,a()[o+4>>2]=n,a()[o+8>>2]=r,_t(e,657457152,0,i,o)}))}(r=a()[r.Za+8>>2],e=e?G(e):\\\"\\\",t,n),1):-4:(r.ib&&(r=r.ib),e=!1,r.Ya&&r.Ya.Xa&&(e=0===(e=r.Ya.Xa.getParameter(2978))[0]&&0===e[1]&&e[2]===r.width&&e[3]===r.height),r.width=t,r.height=n,e&&r.Ya.Xa.viewport(0,0,t,n),0)):-4}function Ve(e,t,n){return O?je(18,1,e,t,n):ze(e,t,n)}var qe,Xe=[\\\"default\\\",\\\"low-power\\\",\\\"high-performance\\\"],Qe={};function Je(){if(!qe){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in Qe)void 0===Qe[e]?delete t[e]:t[e]=Qe[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);qe=n}return qe}function Ze(e,n){if(O)return je(19,1,e,n);var r=0;return Je().forEach((function(o,i){var u=n+r;for(i=a()[e+4*i>>2]=u,u=0;u<o.length;++u)t()[i++>>0]=o.charCodeAt(u);t()[i>>0]=0,r+=o.length+1})),0}function $e(e,t){if(O)return je(20,1,e,t);var n=Je();a()[e>>2]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),a()[t>>2]=r,0}function Ke(e){return O?je(21,1,e):0}function et(e,t,n,r){return O?je(22,1,e,t,n,r):(e=Se.Ub(e),t=Se.Sb(e,t,n),a()[r>>2]=t,0)}function tt(e,t,n,r,a){if(O)return je(23,1,e,t,n,r,a)}function nt(e,t,n,o){if(O)return je(24,1,e,t,n,o);for(var i=0,u=0;u<n;u++){var s=a()[t>>2],c=a()[t+4>>2];t+=8;for(var l=0;l<c;l++)Ae(e,r()[s+l]);i+=c}return a()[o>>2]=i,0}function rt(e){return 0==e%4&&(0!=e%100||0==e%400)}function at(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var ot=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31];function ut(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(rt(e.getFullYear())?ot:it)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function st(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function u(e,t){return i(e,t,\\\"0\\\")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){e=ut(new Date(e.Na+1900,0,1),e.bb);var t=new Date(e.getFullYear()+1,0,4),n=c(new Date(e.getFullYear(),0,4));return t=c(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2];for(var p in o={Kb:a()[o>>2],Jb:a()[o+4>>2],$a:a()[o+8>>2],Wa:a()[o+12>>2],Ra:a()[o+16>>2],Na:a()[o+20>>2],ab:a()[o+24>>2],bb:a()[o+28>>2],cc:a()[o+32>>2],Ib:a()[o+36>>2],Lb:f?G(f):\\\"\\\"},r=G(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),m=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.ab].substring(0,3)},\\\"%A\\\":function(e){return d[e.ab]},\\\"%b\\\":function(e){return m[e.Ra].substring(0,3)},\\\"%B\\\":function(e){return m[e.Ra]},\\\"%C\\\":function(e){return u((e.Na+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.Wa,2)},\\\"%e\\\":function(e){return i(e.Wa,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return u(e.$a,2)},\\\"%I\\\":function(e){return 0==(e=e.$a)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){return u(e.Wa+at(rt(e.Na+1900)?ot:it,e.Ra-1),3)},\\\"%m\\\":function(e){return u(e.Ra+1,2)},\\\"%M\\\":function(e){return u(e.Jb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.$a&&12>e.$a?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.Kb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ab||7},\\\"%U\\\":function(e){var t=new Date(e.Na+1900,0,1),n=0===t.getDay()?t:ut(t,7-t.getDay());return 0>s(n,e=new Date(e.Na+1900,e.Ra,e.Wa))?u(Math.ceil((31-n.getDate()+(at(rt(e.getFullYear())?ot:it,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%V\\\":function(e){var t=new Date(e.Na+1901,0,4),n=c(new Date(e.Na+1900,0,4));t=c(t);var r=ut(new Date(e.Na+1900,0,1),e.bb);return 0>s(r,n)?\\\"53\\\":0>=s(t,r)?\\\"01\\\":u(Math.ceil((n.getFullYear()<e.Na+1900?e.bb+32-n.getDate():e.bb+1-n.getDate())/7),2)},\\\"%w\\\":function(e){return e.ab},\\\"%W\\\":function(e){var t=new Date(e.Na,0,1),n=1===t.getDay()?t:ut(t,0===t.getDay()?1:7-t.getDay()+1);return 0>s(n,e=new Date(e.Na+1900,e.Ra,e.Wa))?u(Math.ceil((31-n.getDate()+(at(rt(e.getFullYear())?ot:it,e.getMonth()-1)-31)+e.getDate())/7),2):0===s(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%y\\\":function(e){return(e.Na+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Na+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ib);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Lb},\\\"%%\\\":function(){return\\\"%\\\"}})r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(V(e)+1);return N(e,t,0,t.length),t}(r),p.length>n?0:(function(e,n){t().set(e,n)}(p,e),p.length-1)}var ct=[null,he,Ee,Te,Me,De,xe,Re,ke,Ce,Fe,Pe,Ie,Ue,We,Le,He,Ye,Ve,Ze,$e,Ke,et,tt,nt],lt={b:function(e){return dt(e+16)+16},c:function(e,t,n){throw new be(e).sb(t,n),e},M:function(e){yt(e,!_,1,!b),me.lb()},n:function(e){O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):de(e)},p:function(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return R(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?vt(687865856,e,t,n,r):(e={Hb:n,cb:e,Sa:r,Mb:a},O?(e.Nb=\\\"spawnThread\\\",postMessage(e,a),0):_e(e))},i:Ee,U:Te,R:Me,y:De,A:xe,t:Re,S:ke,H:Ce,G:Fe,F:Pe,o:Ie,z:Ue,w:We,T:Le,x:He,j:function(){ue(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},_:function(){ue(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},E:function(){return 2097152},Z:function(e,t,n){var r=performance.now();for(n=r+n,Atomics.exchange(a(),Dt>>2,e);;){if((r=performance.now())>n)return Atomics.exchange(a(),Dt>>2,0),-73;if(0==(r=Atomics.exchange(a(),Dt>>2,0)))break;if(gt(),Atomics.load(a(),e>>2)!=t)return-6;Atomics.exchange(a(),Dt>>2,e)}return 0},N:function(e,t){if(e==t)postMessage({cmd:\\\"processQueuedMainThreadWork\\\"});else if(O)postMessage({targetThread:e,cmd:\\\"processThreadQueue\\\"});else{if(!(e=(e=me.Oa[e])&&e.worker))return;e.postMessage({cmd:\\\"processThreadQueue\\\"})}return 1},V:function(e,t){e=new Date(1e3*a()[e>>2]),a()[t>>2]=e.getUTCSeconds(),a()[t+4>>2]=e.getUTCMinutes(),a()[t+8>>2]=e.getUTCHours(),a()[t+12>>2]=e.getUTCDate(),a()[t+16>>2]=e.getUTCMonth(),a()[t+20>>2]=e.getUTCFullYear()-1900,a()[t+24>>2]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2]=e},W:function(e,t){e=new Date(1e3*a()[e>>2]),a()[t>>2]=e.getSeconds(),a()[t+4>>2]=e.getMinutes(),a()[t+8>>2]=e.getHours(),a()[t+12>>2]=e.getDate(),a()[t+16>>2]=e.getMonth(),a()[t+20>>2]=e.getFullYear()-1900,a()[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2]=r,a()[t+36>>2]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2]=e},X:function(e){var t=new Date(a()[e+20>>2]+1900,a()[e+16>>2],a()[e+12>>2],a()[e+8>>2],a()[e+4>>2],a()[e>>2],0),n=a()[e+32>>2],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=o.getTimezoneOffset(),s=Math.min(u,i);return 0>n?a()[e+32>>2]=Number(i!=u&&s==r):0<n!=(s==r)&&(i=Math.max(u,i),t.setTime(t.getTime()+6e4*((0<n?s:i)-r))),a()[e+24>>2]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2]=n,a()[e>>2]=t.getSeconds(),a()[e+4>>2]=t.getMinutes(),a()[e+8>>2]=t.getHours(),a()[e+12>>2]=t.getDate(),a()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},Y:function e(t,n,r){e.ob||(e.ob=!0,Ye(t,n,r))},d:function(){ue(\\\"\\\")},q:function(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return a()[ft()>>2]=28,-1;e=ge()}return a()[t>>2]=e/1e3|0,a()[t+4>>2]=e%1e3*1e6|0,0},B:function(e,t){return e-t},m:function(){w||_||(M||(M={}),M[\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\"]||(M[\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\"]=1,R(\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\")))},v:function(){return 2147483648},f:ge,Q:function(e,t,n){r().copyWithin(e,t,t+n)},g:function(){return w?n(993).cpus().length:navigator.hardwareConcurrency},I:function(e,t,n){Be.length=t,n>>=3;for(var r=0;r<t;r++)Be[r]=o()[n+r];return(0>e?le[-e-1]:ct[e]).apply(null,Be)},u:function(e){var t=r().length;if((e>>>=0)<=t||2147483648<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296),0<(a=Math.max(e,a))%65536&&(a+=65536-a%65536);e:{try{C.grow(Math.min(2147483648,a)-U.byteLength+65535>>>16),X(C.buffer);var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},K:function(e,t,n){return Ne(e)?ze(e,t,n):Ve(e,t,n)},C:function(){throw\\\"unwind\\\"},L:function(e,t){t>>=2;var n=a()[t+6];return t={alpha:!!a()[t],depth:!!a()[t+1],stencil:!!a()[t+2],antialias:!!a()[t+3],premultipliedAlpha:!!a()[t+4],preserveDrawingBuffer:!!a()[t+5],powerPreference:Xe[n],failIfMajorPerformanceCaveat:!!a()[t+7],xb:a()[t+8],Xb:a()[t+9],gb:a()[t+10],qb:a()[t+11],$b:a()[t+12],ac:a()[t+13]},!(e=Ne(e))||t.qb?0:function(e,t){e.hb||(e.hb=e.getContext,e.getContext=function(t,n){return\\\"webgl\\\"==t==(n=e.hb(t,n))instanceof WebGLRenderingContext?n:null});var n=e.getContext(\\\"webgl\\\",t);return n?function(e,t){var n=dt(8);a()[n+4>>2]=pt();var r={Vb:n,attributes:t,version:t.xb,Xa:e};return e.canvas&&(e.canvas.Ya=r),(void 0===t.gb||t.gb)&&function(e){if(e||(e=void 0),!e.tb){e.tb=!0;var t=e.Xa;!function(e){var t=e.getExtension(\\\"ANGLE_instanced_arrays\\\");t&&(e.vertexAttribDivisor=function(e,n){t.vertexAttribDivisorANGLE(e,n)},e.drawArraysInstanced=function(e,n,r,a){t.drawArraysInstancedANGLE(e,n,r,a)},e.drawElementsInstanced=function(e,n,r,a,o){t.drawElementsInstancedANGLE(e,n,r,a,o)})}(t),function(e){var t=e.getExtension(\\\"OES_vertex_array_object\\\");t&&(e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)})}(t),function(e){var t=e.getExtension(\\\"WEBGL_draw_buffers\\\");t&&(e.drawBuffers=function(e,n){t.drawBuffersWEBGL(e,n)})}(t),t.Pb=t.getExtension(\\\"EXT_disjoint_timer_query\\\"),t.Yb=t.getExtension(\\\"WEBGL_multi_draw\\\"),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes(\\\"lose_context\\\")||e.includes(\\\"debug\\\")||t.getExtension(e)}))}}(r),n}(n,t):0}(e,t)},O:Ze,P:$e,D:function(e){Ct(e)},h:Ke,l:et,s:tt,k:nt,J:function(e){var t=Date.now();return a()[e>>2]=t/1e3|0,a()[e+4>>2]=t%1e3*1e3|0,0},a:C||i.wasmMemory,r:st,e:function(e,t,n,r){return st(e,t,n,r)}};!function(){function e(e,t){i.asm=e.exports,me.fb.push(i.asm.xa),J=i.asm.Ba,$.unshift(i.asm.$),F=t,O||(ae--,i.monitorRunDependencies&&i.monitorRunDependencies(ae),0==ae&&(null!==oe&&(clearInterval(oe),oe=null),ie&&(e=ie,ie=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!D&&(b||_)){if(\\\"function\\\"==typeof fetch&&!re.startsWith(\\\"file://\\\"))return fetch(re,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+re+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return ce()}));if(f)return new Promise((function(e,t){f(re,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ce()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){R(\\\"failed to asynchronously prepare wasm: \\\"+e),ue(e)}))}var r={a:lt};if(O||(ae++,i.monitorRunDependencies&&i.monitorRunDependencies(ae)),i.instantiateWasm)try{return i.instantiateWasm(r,e)}catch(e){return R(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(D||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||se()||re.startsWith(\\\"file://\\\")||\\\"function\\\"!=typeof fetch?n(t):fetch(re,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return R(\\\"wasm streaming compile failed: \\\"+e),R(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(s)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.$).apply(null,arguments)},i._OrtInit=function(){return(i._OrtInit=i.asm.aa).apply(null,arguments)},i._OrtCreateSessionOptions=function(){return(i._OrtCreateSessionOptions=i.asm.ba).apply(null,arguments)},i._OrtAddSessionConfigEntry=function(){return(i._OrtAddSessionConfigEntry=i.asm.ca).apply(null,arguments)},i._OrtReleaseSessionOptions=function(){return(i._OrtReleaseSessionOptions=i.asm.da).apply(null,arguments)},i._OrtCreateSession=function(){return(i._OrtCreateSession=i.asm.ea).apply(null,arguments)},i._OrtReleaseSession=function(){return(i._OrtReleaseSession=i.asm.fa).apply(null,arguments)},i._OrtGetInputCount=function(){return(i._OrtGetInputCount=i.asm.ga).apply(null,arguments)},i._OrtGetOutputCount=function(){return(i._OrtGetOutputCount=i.asm.ha).apply(null,arguments)},i._OrtGetInputName=function(){return(i._OrtGetInputName=i.asm.ia).apply(null,arguments)},i._OrtGetOutputName=function(){return(i._OrtGetOutputName=i.asm.ja).apply(null,arguments)},i._OrtFree=function(){return(i._OrtFree=i.asm.ka).apply(null,arguments)},i._OrtCreateTensor=function(){return(i._OrtCreateTensor=i.asm.la).apply(null,arguments)},i._OrtGetTensorData=function(){return(i._OrtGetTensorData=i.asm.ma).apply(null,arguments)},i._OrtReleaseTensor=function(){return(i._OrtReleaseTensor=i.asm.na).apply(null,arguments)},i._OrtCreateRunOptions=function(){return(i._OrtCreateRunOptions=i.asm.oa).apply(null,arguments)},i._OrtAddRunConfigEntry=function(){return(i._OrtAddRunConfigEntry=i.asm.pa).apply(null,arguments)},i._OrtReleaseRunOptions=function(){return(i._OrtReleaseRunOptions=i.asm.qa).apply(null,arguments)},i._OrtRun=function(){return(i._OrtRun=i.asm.ra).apply(null,arguments)},i._OrtEndProfiling=function(){return(i._OrtEndProfiling=i.asm.sa).apply(null,arguments)};var ft=i.___errno_location=function(){return(ft=i.___errno_location=i.asm.ta).apply(null,arguments)},pt=i._pthread_self=function(){return(pt=i._pthread_self=i.asm.ua).apply(null,arguments)},dt=i._malloc=function(){return(dt=i._malloc=i.asm.va).apply(null,arguments)},mt=i._free=function(){return(mt=i._free=i.asm.wa).apply(null,arguments)};i._emscripten_tls_init=function(){return(i._emscripten_tls_init=i.asm.xa).apply(null,arguments)};var ht=i.___funcs_on_exit=function(){return(ht=i.___funcs_on_exit=i.asm.ya).apply(null,arguments)},gt=i._emscripten_main_thread_process_queued_calls=function(){return(gt=i._emscripten_main_thread_process_queued_calls=i.asm.za).apply(null,arguments)},yt=i.__emscripten_thread_init=function(){return(yt=i.__emscripten_thread_init=i.asm.Aa).apply(null,arguments)};i._emscripten_current_thread_process_queued_calls=function(){return(i._emscripten_current_thread_process_queued_calls=i.asm.Ca).apply(null,arguments)};var vt=i._emscripten_sync_run_in_main_thread_4=function(){return(vt=i._emscripten_sync_run_in_main_thread_4=i.asm.Da).apply(null,arguments)},bt=i._emscripten_run_in_main_runtime_thread_js=function(){return(bt=i._emscripten_run_in_main_runtime_thread_js=i.asm.Ea).apply(null,arguments)},_t=i._emscripten_dispatch_to_thread_=function(){return(_t=i._emscripten_dispatch_to_thread_=i.asm.Fa).apply(null,arguments)},wt=i.__emscripten_thread_free_data=function(){return(wt=i.__emscripten_thread_free_data=i.asm.Ga).apply(null,arguments)};i.__emscripten_thread_exit=function(){return(i.__emscripten_thread_exit=i.asm.Ha).apply(null,arguments)};var Ot,At=i._memalign=function(){return(At=i._memalign=i.asm.Ia).apply(null,arguments)},St=i._emscripten_stack_set_limits=function(){return(St=i._emscripten_stack_set_limits=i.asm.Ja).apply(null,arguments)},Et=i.stackSave=function(){return(Et=i.stackSave=i.asm.Ka).apply(null,arguments)},Tt=i.stackRestore=function(){return(Tt=i.stackRestore=i.asm.La).apply(null,arguments)},Mt=i.stackAlloc=function(){return(Mt=i.stackAlloc=i.asm.Ma).apply(null,arguments)},Dt=i.__emscripten_main_thread_futex=687896,xt=i.__emscripten_allow_main_runtime_queued_calls=683012;function Rt(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function kt(){function e(){if(!Ot&&(Ot=!0,i.calledRun=!0,!P)&&(O||fe($),u(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!O)){if(i.postRun)for(\\\"function\\\"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;){var e=i.postRun.shift();ee.unshift(e)}fe(ee)}}if(!(0<ae))if(O)u(i),O||fe($),postMessage({cmd:\\\"loaded\\\"});else{if(i.preRun)for(\\\"function\\\"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)ne();fe(Z),0<ae||(i.setStatus?(i.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){i.setStatus(\\\"\\\")}),1),e()}),1)):e())}}function Ct(e){if(O)throw he(e),\\\"unwind\\\";te()||O||(ht(),fe(K),Oe[1].length&&Ae(1,10),Oe[2].length&&Ae(2,10),me.kb()),te()||(me.kb(),i.onExit&&i.onExit(e),P=!0),v(e,new Rt(e))}if(i.UTF8ToString=G,i.stringToUTF8=z,i.lengthBytesUTF8=V,i.keepRuntimeAlive=te,i.PThread=me,i.stackSave=Et,i.stackRestore=Tt,i.stackAlloc=Mt,i.PThread=me,i.wasmMemory=C,i.ExitStatus=Rt,ie=function e(){Ot||kt(),Ot||(ie=e)},i.run=kt,i.preInit)for(\\\"function\\\"==typeof i.preInit&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return O&&(k=!1,me.ub()),kt(),e.ready});e.exports=r},118:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={};if(\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node){var t=require(\\\"worker_threads\\\"),r=t.parentPort;r.on(\\\"message\\\",(function(e){onmessage({data:e})}));var a=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:t.Worker,importScripts:function(e){(0,eval)(a.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){r.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.threadInfoStruct,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInit();try{var a=e.invokeEntryPoint(t.data.start_routine,t.data.arg);e.keepRuntimeAlive()?e.PThread.setExitStatus(a):e.__emscripten_thread_exit(a)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processThreadQueue\\\"===t.data.cmd?e._pthread_self()&&e._emscripten_current_thread_process_queued_calls():(s(\\\"worker.js received unknown command \\\"+t.data.cmd),s(t.data)))}catch(e){throw s(\\\"worker.js onmessage() captured an uncaught exception: \\\"+e),e&&e.stack&&s(e.stack),e}};\\\\n'},932:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){var t;e=e||{},t||(t=void 0!==e?e:{});var r,a,o=Object.assign;t.ready=new Promise((function(e,t){r=e,a=t}));var i,u,s,c,l,f,p=o({},t),d=\\\"./this.program\\\",m=\\\"object\\\"==typeof window,h=\\\"function\\\"==typeof importScripts,g=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,y=\\\"\\\";g?(y=h?n(908).dirname(y)+\\\"/\\\":\\\"//\\\",f=()=>{l||(c=n(384),l=n(908))},i=function(e,t){return f(),e=l.normalize(e),c.readFileSync(e,t?null:\\\"utf8\\\")},s=e=>((e=i(e,!0)).buffer||(e=new Uint8Array(e)),e),u=(e,t,n)=>{f(),e=l.normalize(e),c.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(d=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(m||h)&&(h?y=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),y=0!==y.indexOf(\\\"blob:\\\")?y.substr(0,y.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",i=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},h&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),u=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var v,b=t.print||console.log.bind(console),_=t.printErr||console.warn.bind(console);o(t,p),p=null,t.thisProgram&&(d=t.thisProgram),t.wasmBinary&&(v=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&G(\\\"no native wasm support detected\\\");var w,O,A,S,E,T=!1,M=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function D(e,t,n){var r=t+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.subarray&&M)return M.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function x(e,t){return e?D(S,e,t):\\\"\\\"}function R(e,t,n,r){if(!(0<r))return 0;var a=n;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++]=i}else{if(2047>=i){if(n+1>=r)break;t[n++]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++]=224|i>>12}else{if(n+3>=r)break;t[n++]=240|i>>18,t[n++]=128|i>>12&63}t[n++]=128|i>>6&63}t[n++]=128|63&i}}return t[n]=0,n-a}function k(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&(r=65536+((1023&r)<<10)|1023&e.charCodeAt(++n)),127>=r?++t:t=2047>=r?t+2:65535>=r?t+3:t+4}return t}function C(e){var t=k(e)+1,n=de(t);return n&&R(e,A,n,t),n}function F(){var e=w.buffer;O=e,t.HEAP8=A=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=E=new Int32Array(e),t.HEAPU8=S=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var P,I=[],U=[],W=[];function L(){var e=t.preRun.shift();I.unshift(e)}var H,Y=0,j=null,B=null;function G(e){throw t.onAbort&&t.onAbort(e),_(e=\\\"Aborted(\\\"+e+\\\")\\\"),T=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -s ASSERTIONS=1 for more info.\\\"),a(e),e}function N(){return H.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(t.preloadedImages={},t.preloadedAudios={},H=\\\"ort-wasm.wasm\\\",!N()){var z=H;H=t.locateFile?t.locateFile(z,y):y+z}function V(){var e=H;try{if(e==H&&v)return new Uint8Array(v);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){G(e)}}function q(e){for(;0<e.length;){var n=e.shift();if(\\\"function\\\"==typeof n)n(t);else{var r=n.Na;\\\"number\\\"==typeof r?void 0===n.va?Q(r)():Q(r)(n.va):r(void 0===n.va?null:n.va)}}}var X=[];function Q(e){var t=X[e];return t||(e>=X.length&&(X.length=e+1),X[e]=t=P.get(e)),t}function J(e){this.qa=e-16,this.Fa=function(e){E[this.qa+4>>2]=e},this.Ca=function(e){E[this.qa+8>>2]=e},this.Da=function(){E[this.qa>>2]=0},this.Ba=function(){A[this.qa+12>>0]=0},this.Ea=function(){A[this.qa+13>>0]=0},this.ya=function(e,t){this.Fa(e),this.Ca(t),this.Da(),this.Ba(),this.Ea()}}var Z,$,K={},ee=[null,[],[]],te={},ne={};function re(){if(!$){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:d||\\\"./this.program\\\"};for(e in ne)void 0===ne[e]?delete t[e]:t[e]=ne[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);$=n}return $}function ae(e){return 0==e%4&&(0!=e%100||0==e%400)}function oe(e,t){for(var n=0,r=0;r<=t;n+=e[r++]);return n}var ie=[31,29,31,30,31,30,31,31,30,31,30,31],ue=[31,28,31,30,31,30,31,31,30,31,30,31];function se(e,t){for(e=new Date(e.getTime());0<t;){var n=e.getMonth(),r=(ae(e.getFullYear())?ie:ue)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}function ce(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){e=se(new Date(e.oa+1900,0,1),e.ua);var t=new Date(e.getFullYear()+1,0,4),n=u(new Date(e.getFullYear(),0,4));return t=u(t),0>=i(n,e)?0>=i(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=E[r+40>>2];for(var l in r={Ia:E[r>>2],Ha:E[r+4>>2],sa:E[r+8>>2],ra:E[r+12>>2],pa:E[r+16>>2],oa:E[r+20>>2],ta:E[r+24>>2],ua:E[r+28>>2],Qa:E[r+32>>2],Ga:E[r+36>>2],Ja:c?x(c):\\\"\\\"},n=x(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.ta].substring(0,3)},\\\"%A\\\":function(e){return f[e.ta]},\\\"%b\\\":function(e){return p[e.pa].substring(0,3)},\\\"%B\\\":function(e){return p[e.pa]},\\\"%C\\\":function(e){return o((e.oa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.ra,2)},\\\"%e\\\":function(e){return a(e.ra,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return o(e.sa,2)},\\\"%I\\\":function(e){return 0==(e=e.sa)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){return o(e.ra+oe(ae(e.oa+1900)?ie:ue,e.pa-1),3)},\\\"%m\\\":function(e){return o(e.pa+1,2)},\\\"%M\\\":function(e){return o(e.Ha,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.sa&&12>e.sa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.Ia,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ta||7},\\\"%U\\\":function(e){var t=new Date(e.oa+1900,0,1),n=0===t.getDay()?t:se(t,7-t.getDay());return 0>i(n,e=new Date(e.oa+1900,e.pa,e.ra))?o(Math.ceil((31-n.getDate()+(oe(ae(e.getFullYear())?ie:ue,e.getMonth()-1)-31)+e.getDate())/7),2):0===i(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%V\\\":function(e){var t=new Date(e.oa+1901,0,4),n=u(new Date(e.oa+1900,0,4));t=u(t);var r=se(new Date(e.oa+1900,0,1),e.ua);return 0>i(r,n)?\\\"53\\\":0>=i(t,r)?\\\"01\\\":o(Math.ceil((n.getFullYear()<e.oa+1900?e.ua+32-n.getDate():e.ua+1-n.getDate())/7),2)},\\\"%w\\\":function(e){return e.ta},\\\"%W\\\":function(e){var t=new Date(e.oa,0,1),n=1===t.getDay()?t:se(t,0===t.getDay()?1:7-t.getDay()+1);return 0>i(n,e=new Date(e.oa+1900,e.pa,e.ra))?o(Math.ceil((31-n.getDate()+(oe(ae(e.getFullYear())?ie:ue,e.getMonth()-1)-31)+e.getDate())/7),2):0===i(n,t)?\\\"01\\\":\\\"00\\\"},\\\"%y\\\":function(e){return(e.oa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.oa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ga);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Ja},\\\"%%\\\":function(){return\\\"%\\\"}})n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(k(e)+1);return R(e,t,0,t.length),t}(n),l.length>t?0:(A.set(l,e),l.length-1)}var le={a:function(e){return de(e+16)+16},b:function(e,t,n){throw new J(e).ya(t,n),e},g:function(){return 0},I:function(){},F:function(){},v:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(e,t){return e=x(e),te.Ka(e,t)},A:function(e,t,n,r,a,o){if(o<<=12,0!=(16&r)&&0!=e%65536)t=-28;else if(0!=(32&r)){e=65536*Math.ceil(t/65536);var i=he(65536,e);i?(S.fill(0,i,i+e),e=i):e=0,e?(K[e]={Aa:e,za:t,wa:!0,fd:a,Pa:n,flags:r,offset:o},t=e):t=-48}else t=-52;return t},z:function(e,t){var n=K[e];return 0!==t&&n?(t===n.za&&(K[e]=null,n.wa&&me(n.Aa)),e=0):e=-28,e},k:function(){},x:function(e,t,n){return e=x(e),te.La(e,t,n)},t:function(){},H:function(){},u:function(){},h:function(){G(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},n:function(){G(\\\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},J:function(e,t){e=new Date(1e3*E[e>>2]),E[t>>2]=e.getUTCSeconds(),E[t+4>>2]=e.getUTCMinutes(),E[t+8>>2]=e.getUTCHours(),E[t+12>>2]=e.getUTCDate(),E[t+16>>2]=e.getUTCMonth(),E[t+20>>2]=e.getUTCFullYear()-1900,E[t+24>>2]=e.getUTCDay(),E[t+28>>2]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},K:function(e,t){e=new Date(1e3*E[e>>2]),E[t>>2]=e.getSeconds(),E[t+4>>2]=e.getMinutes(),E[t+8>>2]=e.getHours(),E[t+12>>2]=e.getDate(),E[t+16>>2]=e.getMonth(),E[t+20>>2]=e.getFullYear()-1900,E[t+24>>2]=e.getDay();var n=new Date(e.getFullYear(),0,1);E[t+28>>2]=(e.getTime()-n.getTime())/864e5|0,E[t+36>>2]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[t+32>>2]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},L:function(e){var t=new Date(E[e+20>>2]+1900,E[e+16>>2],E[e+12>>2],E[e+8>>2],E[e+4>>2],E[e>>2],0),n=E[e+32>>2],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),u=Math.min(i,o);return 0>n?E[e+32>>2]=Number(o!=i&&u==r):0<n!=(u==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?u:o)-r))),E[e+24>>2]=t.getDay(),E[e+28>>2]=(t.getTime()-a.getTime())/864e5|0,E[e>>2]=t.getSeconds(),E[e+4>>2]=t.getMinutes(),E[e+8>>2]=t.getHours(),E[e+12>>2]=t.getDate(),E[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},M:function e(t,n,r){e.xa||(e.xa=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var u=i.getTimezoneOffset();E[e>>2]=60*Math.max(a,u),E[t>>2]=Number(a!=u),e=r(o),t=r(i),e=C(e),t=C(t),u<a?(E[n>>2]=e,E[n+4>>2]=t):(E[n>>2]=t,E[n+4>>2]=e)}(t,n,r))},d:function(){G(\\\"\\\")},m:function(e,t){if(0===e)e=Date.now();else{if(1!==e&&4!==e)return E[pe()>>2]=28,-1;e=Z()}return E[t>>2]=e/1e3|0,E[t+4>>2]=e%1e3*1e6|0,0},p:function(e,t){return e-t},s:function(){return 2147483648},l:Z=g?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),E:function(e,t,n){S.copyWithin(e,t,t+n)},f:function(e){var t=S.length;if(2147483648<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296),0<(r=Math.max(e,r))%65536&&(r+=65536-r%65536);e:{try{w.grow(Math.min(2147483648,r)-O.byteLength+65535>>>16),F();var a=1;break e}catch(e){}a=void 0}if(a)return!0}return!1},C:function(e,t){var n=0;return re().forEach((function(r,a){var o=t+n;for(a=E[e+4*a>>2]=o,o=0;o<r.length;++o)A[a++>>0]=r.charCodeAt(o);A[a>>0]=0,n+=r.length+1})),0},D:function(e,t){var n=re();E[e>>2]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),E[t>>2]=r,0},e:function(){return 0},j:function(e,t,n,r){return e=te.Oa(e),t=te.Ma(e,t,n),E[r>>2]=t,0},q:function(){},i:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=E[t>>2],u=E[t+4>>2];t+=8;for(var s=0;s<u;s++){var c=S[i+s],l=ee[e];0===c||10===c?((1===e?b:_)(D(l,0)),l.length=0):l.push(c)}a+=u}return E[r>>2]=a,0},w:function(e){var t=Date.now();return E[e>>2]=t/1e3|0,E[e+4>>2]=t%1e3*1e3|0,0},o:ce,c:function(e,t,n,r){return ce(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,w=t.asm.N,F(),P=t.asm.ja,U.unshift(t.asm.O),Y--,t.monitorRunDependencies&&t.monitorRunDependencies(Y),0==Y&&(null!==j&&(clearInterval(j),j=null),B&&(e=B,B=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!v&&(m||h)){if(\\\"function\\\"==typeof fetch&&!H.startsWith(\\\"file://\\\"))return fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+H+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return V()}));if(u)return new Promise((function(e,t){u(H,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return V()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){_(\\\"failed to asynchronously prepare wasm: \\\"+e),G(e)}))}var o={a:le};if(Y++,t.monitorRunDependencies&&t.monitorRunDependencies(Y),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return _(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(v||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||N()||H.startsWith(\\\"file://\\\")||\\\"function\\\"!=typeof fetch?r(n):fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return _(\\\"wasm streaming compile failed: \\\"+e),_(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.O).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.P).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.Q).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.R).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.S).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.T).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.U).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.V).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.W).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.X).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.Y).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.Z).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm._).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.$).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.aa).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.ba).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.ca).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.da).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.ea).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.fa).apply(null,arguments)};var fe,pe=t.___errno_location=function(){return(pe=t.___errno_location=t.asm.ga).apply(null,arguments)},de=t._malloc=function(){return(de=t._malloc=t.asm.ha).apply(null,arguments)},me=t._free=function(){return(me=t._free=t.asm.ia).apply(null,arguments)},he=t._memalign=function(){return(he=t._memalign=t.asm.ka).apply(null,arguments)},ge=t.stackSave=function(){return(ge=t.stackSave=t.asm.la).apply(null,arguments)},ye=t.stackRestore=function(){return(ye=t.stackRestore=t.asm.ma).apply(null,arguments)},ve=t.stackAlloc=function(){return(ve=t.stackAlloc=t.asm.na).apply(null,arguments)};function be(){function e(){if(!fe&&(fe=!0,t.calledRun=!0,!T)){if(q(U),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();W.unshift(e)}q(W)}}if(!(0<Y)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)L();q(I),0<Y||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.UTF8ToString=x,t.stringToUTF8=function(e,t,n){return R(e,S,t,n)},t.lengthBytesUTF8=k,t.stackSave=ge,t.stackRestore=ye,t.stackAlloc=ve,B=function e(){fe||be(),fe||(B=e)},t.run=be,t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return be(),e.ready});e.exports=r},967:function(e,t){\\\"use strict\\\";var n=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=function(e,r,a,o){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var i=n(e,2),u=i[0],s=i[1],c=r?r+u:u;if(\\\"object\\\"==typeof s)t.iterateExtraOptions(s,c+\\\".\\\",a,o);else if(\\\"string\\\"==typeof s||\\\"number\\\"==typeof s)o(c,s.toString());else{if(\\\"boolean\\\"!=typeof s)throw new Error(\\\"Can't handle extra config type: \\\"+typeof s);o(c,s?\\\"1\\\":\\\"0\\\")}}))}},586:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;var r=n(967),a=n(983),o=n(361);t.setRunOptions=function(e){var t=o.getInstance(),n=0,i=[],u=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\"+e.logSeverityLevel);if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\"+e.logVerbosityLevel);void 0===(null==e?void 0:e.terminate)&&(u.terminate=!1);var s=0;if(void 0!==(null==e?void 0:e.tag)&&(s=a.allocWasmString(e.tag,i)),0===(n=t._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,s)))throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,(function(e,r){var o=a.allocWasmString(e,i),u=a.allocWasmString(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,u))throw new Error(\\\"Can't set a run config entry: \\\"+e+\\\" - \\\"+r)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},919:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;var r=n(967),a=n(983),o=n(361);t.setSessionOptions=function(e){var t=o.getInstance(),n=0,i=[],u=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\")}(u);try{void 0===(null==e?void 0:e.graphOptimizationLevel)&&(u.graphOptimizationLevel=\\\"all\\\");var s=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\"+e)}}(u.graphOptimizationLevel);void 0===(null==e?void 0:e.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==e?void 0:e.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==e?void 0:e.executionMode)&&(u.executionMode=\\\"sequential\\\");var c=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\"+e)}}(u.executionMode),l=0;if(void 0!==(null==e?void 0:e.logId)&&(l=a.allocWasmString(e.logId,i)),void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\"+e.logSeverityLevel);if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\"+e.logVerbosityLevel);if(void 0===(null==e?void 0:e.enableProfiling)&&(u.enableProfiling=!1),0===(n=t._OrtCreateSessionOptions(s,!!u.enableCpuMemArena,!!u.enableMemPattern,c,!!u.enableProfiling,0,l,u.logSeverityLevel,u.logVerbosityLevel)))throw new Error(\\\"Can't create session options\\\");return void 0!==(null==e?void 0:e.extra)&&r.iterateExtraOptions(e.extra,\\\"\\\",new WeakSet,(function(e,r){var o=a.allocWasmString(e,i),u=a.allocWasmString(r,i);if(0!==t._OrtAddSessionConfigEntry(n,o,u))throw new Error(\\\"Can't set a session config entry: \\\"+e+\\\" - \\\"+r)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),i.forEach(t._free),e}}},983:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;var r=n(361);t.allocWasmString=function(e,t){var n=r.getInstance(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},349:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.initOrt=void 0;var o=n(586),i=n(919),u=n(983),s=n(361);t.initOrt=function(e,t){var n=s.getInstance()._OrtInit(e,t);if(0!==n)throw new Error(\\\"Can't initialize onnxruntime. error code = \\\"+n)};var c=new Map;t.createSession=function(e,t){var n,a=s.getInstance(),o=a._malloc(e.byteLength),u=0,l=0,f=[];try{if(l=(n=r(i.setSessionOptions(t),2))[0],f=n[1],a.HEAPU8.set(e,o),0===(u=a._OrtCreateSession(o,e.byteLength,l)))throw new Error(\\\"Can't create a session\\\")}finally{a._free(o),a._OrtReleaseSessionOptions(l),f.forEach(a._free)}for(var p=a._OrtGetInputCount(u),d=a._OrtGetOutputCount(u),m=[],h=[],g=[],y=[],v=0;v<p;v++){var b=a._OrtGetInputName(u,v);if(0===b)throw new Error(\\\"Can't get an input name\\\");h.push(b),m.push(a.UTF8ToString(b))}for(v=0;v<d;v++){var _=a._OrtGetOutputName(u,v);if(0===_)throw new Error(\\\"Can't get an output name\\\");y.push(_),g.push(a.UTF8ToString(_))}return c.set(u,[u,h,y]),[u,m,g]},t.releaseSession=function(e){var t=s.getInstance(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),c.delete(e)};var l=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:case 7:return\\\"int32\\\";case 12:case 13:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";default:throw new Error(\\\"unsupported data type: \\\"+e)}},f=function(e){switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\"+e)}};t.run=function(e,t,n,a,i){var p,d=s.getInstance(),m=c.get(e);if(!m)throw new Error(\\\"invalid session id\\\");var h=m[0],g=m[1],y=m[2],v=t.length,b=a.length,_=0,w=[],O=[],A=[];try{_=(p=r(o.setRunOptions(i),2))[0],w=p[1];for(var S=function(e){var t=n[e][0],r=n[e][1],a=n[e][2],o=void 0,i=void 0;if(Array.isArray(a)){i=4*a.length,o=d._malloc(i),A.push(o);for(var s=o/4,c=0;c<a.length;c++){if(\\\"string\\\"!=typeof a[c])throw new TypeError(\\\"tensor data at index \\\"+c+\\\" is not a string\\\");d.HEAPU32[s++]=u.allocWasmString(a[c],A)}}else i=a.byteLength,o=d._malloc(i),A.push(o),d.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,i),o);var l=d.stackSave(),f=d.stackAlloc(4*r.length);try{var p=f/4;r.forEach((function(e){return d.HEAP32[p++]=e}));var m=d._OrtCreateTensor(function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\"+e)}}(t),o,i,f,r.length);if(0===m)throw new Error(\\\"Can't create a tensor\\\");O.push(m)}finally{d.stackRestore(l)}},E=0;E<v;E++)S(E);var T=d.stackSave(),M=d.stackAlloc(4*v),D=d.stackAlloc(4*v),x=d.stackAlloc(4*b),R=d.stackAlloc(4*b);try{var k=M/4,C=D/4,F=x/4,P=R/4;for(E=0;E<v;E++)d.HEAPU32[k++]=O[E],d.HEAPU32[C++]=g[t[E]];for(E=0;E<b;E++)d.HEAPU32[F++]=0,d.HEAPU32[P++]=y[a[E]];var I=d._OrtRun(h,D,M,v,R,b,x,_),U=[];if(0===I)for(E=0;E<b;E++){var W=d.HEAPU32[x/4+E],L=d.stackSave(),H=d.stackAlloc(16),Y=void 0,j=0;try{if(0!==(I=d._OrtGetTensorData(W,H,H+4,H+8,H+12)))throw new Error(\\\"Can't get a tensor data. error code = \\\"+I);var B=H/4,G=d.HEAPU32[B++];j=d.HEAPU32[B++];for(var N=d.HEAPU32[B++],z=d.HEAPU32[B++],V=[],q=0;q<z;q++)V.push(d.HEAPU32[N/4+q]);d._OrtFree(N);var X=0===V.length?1:V.reduce((function(e,t){return e*t}));if(\\\"string\\\"===(Y=l(G))){for(var Q=[],J=j/4,Z=0;Z<X;Z++){var $=d.HEAPU32[J++],K=Z===X-1?void 0:d.HEAPU32[J]-$;Q.push(d.UTF8ToString($,K))}U.push([Y,V,Q])}else{var ee=new(f(Y))(X);new Uint8Array(ee.buffer,ee.byteOffset,ee.byteLength).set(d.HEAPU8.subarray(j,j+ee.byteLength)),U.push([Y,V,ee])}}finally{d.stackRestore(L),\\\"string\\\"===Y&&j&&d._free(j),d._OrtReleaseTensor(W)}}if(0===I)return U;throw new Error(\\\"failed to call OrtRun(). error code = \\\"+I+\\\".\\\")}finally{d.stackRestore(T)}}finally{O.forEach(d._OrtReleaseTensor),A.forEach(d._free),d._OrtReleaseRunOptions(_),w.forEach(d._free)}},t.endProfiling=function(e){var t=s.getInstance(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=function(e){var t,n,r=[];try{for(var o=a(e),i=o.next();!i.done;i=o.next()){var u=i.value[2];!Array.isArray(u)&&u.buffer&&r.push(u.buffer)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}return r}},361:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}))},u=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;var c,l=o(n(449)),f=s(n(932)),p=n(474),d=!1,m=!1,h=!1,g=function(e,t){return t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"};t.initializeWebAssembly=function(e){return i(void 0,void 0,void 0,(function(){var t,r,a,o,i,s,y,v,b,_,w;return u(this,(function(u){switch(u.label){case 0:if(d)return[2,Promise.resolve()];if(m)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(h)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return m=!0,t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),i=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),s=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,y=g(!1,o),v=g(i,o),b=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[v]:void 0,_=!1,w=[],t>0&&w.push(new Promise((function(e){setTimeout((function(){_=!0,e()}),t)}))),w.push(new Promise((function(e,t){var r=o?p:f.default,a={locateFile:function(e,t){return o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(118)],{type:\\\"text/javascript\\\"})):e===y?null!=b?b:(null!=s?s:t)+v:t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=l.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{var i=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\"+r.toString()+\\\"})();\\\";a.mainScriptUrlOrBlob=new Blob([i],{type:\\\"text/javascript\\\"})}r(a).then((function(t){m=!1,d=!0,c=t,e()}),(function(e){m=!1,h=!0,t(e)}))}))),[4,Promise.race(w)];case 1:if(u.sent(),_)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\"+t+\\\"ms\\\");return[2]}}))}))},t.getInstance=function(){if(d&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=function(){var e;!d||m||h||(m=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,m=!1,d=!1,h=!0)}},384:function(){},993:function(){},908:function(){},953:function(){},925:function(){},449:function(){}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),function(){\\\"use strict\\\";var e=n(349),t=n(361);self.onmessage=function(n){switch(n.data.type){case\\\"init-wasm\\\":t.initializeWebAssembly(n.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}));break;case\\\"init-ort\\\":try{var r=n.data.in,a=r.numThreads,o=r.loggingLevel;e.initOrt(a,o),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create\\\":try{var i=n.data.in,u=i.model,s=i.options,c=e.createSession(u,s);postMessage({type:\\\"create\\\",out:c})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var l=n.data.in;e.releaseSession(l),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var f=n.data.in,p=f.sessionId,d=f.inputIndices,m=f.inputs,h=f.outputIndices,g=(s=f.options,e.run(p,d,m,h,s));postMessage({type:\\\"run\\\",out:g},e.extractTransferableBuffers(g))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{l=n.data.in,e.endProfiling(l),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}
{"ast":null,"code":"import _classCallCheck from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import'./App.css';import axios from'axios';// import React, { Component } from 'react';\nimport React from'react';import{Component}from'react';// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\nimport{inference}from'./inference.js';import{columnNames}from'./inference.js';import{modelDownloadInProgress}from'./inference.js';import Chart from\"react-google-charts\";import Box from'@mui/material/Box';import LinearProgress from'@mui/material/LinearProgress';import{useState}from'react';import'./App.scss';import FileUpload from'./FileUpload/FileUpload';import FileList from'./FileList/FileList';import FileProcessing from'./FileProcessing';// import {uploadfile} from './uploadfile.js';\n// import React from 'react'\nimport{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faPlus}from'@fortawesome/free-solid-svg-icons';import'./FileUpload/FileUpload.scss';// import axios from 'axios'\n// function App() {\n//   const [files, setFiles] = useState([])\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n//   return (\n//     <div className=\"App\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n// export default App;\n// function App() {\n//   const [files, setFiles] = useState([])\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n//   componentDidMount= () =>{\n//     timerID = setInterval(\n//       () => checkModelStatus(),\n//       1000\n//     );\n//   }\n//   checkModelStatus= () => {\n//     setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     };\n//   }\n//   handleChange= (event) => {  \n//     inference(event.target.value).then( result => {\n//       this.setState({\n//         text : event.target.value,\n//         data:result[1],\n//         latency:result[0],\n//       });\n//     });\n//   }\n//   return (\n//     <div className=\"App\">\n//       <div>\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//       </div>\n//       <header className=\"App-header\">   \n//       <em>In-Browser Transformer Inference</em>\n//       <Chart  \n//         width={'400px'}\n//         height={'200px'}\n//         chartType=\"BarChart\"\n//         data={state.data}\n//         options={{\n//           chartArea: { width: '40%'},\n//           colors: ['purple'],\n//           backgroundColor: '#282c34',\n//           legend: { \n//             textStyle: {color: 'white', fontSize: 10},\n//             labels: {fontColor:'white'}\n//           },\n//           vAxis: {\n//             textStyle: {\n//             color: 'white',\n//             fontSize: 13\n//           }\n//           },\n//           hAxis: {\n//             minValue: 5,\n//             maxValue: 50,\n//             textStyle: {\n//               color: 'white'\n//             }\n//           }\n//       }}\n//       />\n//       {state.downloading && \n//         <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//         <Box sx={{ width: '400px' }}>\n//         <LinearProgress />\n//         </Box> \n//         <p></p>\n//         </div>\n//       }\n//       <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n//        placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n//       </textarea>\n//       {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n//       //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n//       // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n//         // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n//         value = {this.Dashboard.value}\n//         onChange={e => this.Dashboard.setValue(e.target.value)}\n//         onDropRead={text => this.Dashboard.setValue(text)}\n//         textareaProps={{\n//           // cols: 24,\n//           // rows: 8,\n//           placeholder: \"Drop one text file here...\"\n//         }}\n//         // onChange={this.Dashboard}  \n//         // {this.Dashboard()} \n//         ></textarea> */}\n//        <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n//       <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n//       <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\n// class TextInputArea extends React.Component {\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.handleFileChange=function(event){_this.setState({selectedFile:event.target.files[0],loaded:0,message:event.target.files[0]?event.target.files[0].name:_this.state.defaultmessage});};_this.state={selectedFile:null,loaded:null};_this.handleUpload=function(event){event.preventDefault();if(_this.state.uploading)return;if(!_this.state.selectedFile){_this.setState({message:'Select a file first'});return;}_this.setState({uploading:true});var data=new FormData();data.append('file',_this.state.selectedFile,_this.state.selectedFile.name);axios.post('/upload',data,{onUploadProgress:function onUploadProgress(ProgressEvent){_this.setState({loaded:Math.round(ProgressEvent.loaded/ProgressEvent.total*100)});}}).then(function(res){_this.setState({selectedFile:null,message:'Uploaded successfully',uploading:false});console.log(res.statusText);}).catch(function(err){_this.setState({uploading:false,message:'Failed to upload'});});};_this.state={text:'Enter text to classify emotion, model trained on English text.',data:columnNames,latency:0.0,downloading:modelDownloadInProgress(),files:null};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));return _this;}// Dashboard = () => {\n//   const [value , setValue] = React.useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n// return (\n//   <div style={{ display: \"flex\" }}>\n//     <input type=\"file\" name=\"input\" onChange={handleChange}\n//     // placeholder={this.state.text} autoFocus\n//      />\n//     <textarea\n//       cols={30}\n//       rows={20}\n//       value={value}\n//       onChange={setValue}\n//       style={{ marginTop: 15, width: \"50%\" }}\n//     ></textarea>\n//   </div>\n// );\n// }\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// }\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// }\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   // const formData = new FormData();\n//   // // Update the formData object\n//   // formData.append(\n//   //   \"myFile\",\n//   //   this.state.selectedFile,\n//   //   this.state.selectedFile.name\n//   // );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n//   // {\n//   //   headers: {\n//   //     \"Content-Type\": \"multipart/form-data\",\n//   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//   //     \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//   //   },\n//   // }\n//   // );\n//   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)}, \n//   // {\n//   //   headers: {\n//   //     \"Content-Type\": \"multipart/form-data\",\n//   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//   //     \"x-rapidapi-key\": \"67c784071bmsh339dd9d9dfa4776p1995bdjsn2731d6524052\",\n//   //   },\n//   // }\n//   // );\n//   axios.post(\"http://localhost:3001/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)});\n// }\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h5>File Details:</h5>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h5>Choose before Pressing the Upload button</h5>\n//       </div>\n//     );\n//   };\n// }\n// App()  {\n// App_upload= () => {\n//   const [files, setFiles] = React.useState([])\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n// }\n// App_upload= () => {\n// const [files, setFiles] = useState([])\n// const removeFile = (filename) => {\n//   setFiles(files.filter(file => file.name !== filename))\n// }\n//   return (\n//     <div className=\"App_upload\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n// FileUpload = ({ files, setFiles, removeFile }) => {\n//   // function FileUpload ({ files, setFiles, removeFile })  {\n//       const uploadHandler = (event) => {\n//           const file = event.target.files[0];\n//           if(!file) return;\n//           file.isUploading = true;\n//           setFiles([...files, file])\n//           // upload file\n//           // const formData = new FormData();\n//           // formData.append(\n//           //     // \"newFile\",\n//           //     file.name,\n//           //     file,\n//           //     file.name\n//           // )\n//           // axios.post('http://localhost:8080/upload', formData)\n//           axios.post('/upload', {newfile: (event.target.files[0], event.target.files[0].name)}\n//           //     {\n//           //     headers: {\n//           //       \"Content-Type\": \"multipart/form-data\",\n//           //     },\n//           //   }\n//             )\n//               .then((res) => {\n//                   file.isUploading = false;\n//                   setFiles([...files, file])\n//               })\n//               .catch((err) => {\n//                   // inform the user\n//                   console.error(err)\n//                   removeFile(file.name)\n//               });\n//       }\n//     }\n//   uploadHandler = ( { event, files, setFiles, removeFile }) => {\n//     const file = event.target.files[0];\n//     if(!file) return;\n//     file.isUploading = true;\n//     setFiles([...files, file])\n//     // upload file\n//     // const formData = new FormData();\n//     // formData.append(\n//     //     // \"newFile\",\n//     //     file.name,\n//     //     file,\n//     //     file.name\n//     // )\n//     // axios.post('http://localhost:8080/upload', formData)\n//     axios.post('/upload', {newfile: (event.target.files[0], event.target.files[0].name)},\n//     //     {\n//     //     headers: {\n//     //       \"Content-Type\": \"multipart/form-data\",\n//     //     },\n//     //   }\n//       )\n//         .then((res) => {\n//             file.isUploading = false;\n//             setFiles([...files, file])\n//         })\n//         .catch((err) => {\n//             // inform the user\n//             console.error(err)\n//             removeFile(file.name)\n//         });\n// }\n// handleFile(e) { \n//   // Getting the files from the input \n//   let files = e.target.files[0]; \n//   this.setState({ files }); \n// } \n// handleUpload(e) { \n//   let files = this.state.files; \n//   // let formData = new FormData(); \n//   //Adding files to the formdata \n//   // formData.append(\"image\", files); \n//   // formData.append(\"name\", \"Name\"); \n//   axios({ \n//     // Endpoint to send files \n//     url: \"http://localhost:3000/upload\", \n//     method: \"POST\", \n//     // Attaching the form data \n//     data: {newfile: (e.target.files, e.target.files.name)}, \n//   }) \n//     .then((res) => {         \n//       console.log(res);\n//       console.log(res.files);}) // Handle the response from backend here \n//     .catch((err) => { console.error(err)}); // Catch errors if any \n// } \n_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.timerID=setInterval(function(){return _this2.checkModelStatus();},1000);}},{key:\"checkModelStatus\",value:function checkModelStatus(){var _this3=this;this.setState({downloading:modelDownloadInProgress()});if(!this.state.downloading){this.timerID=setInterval(function(){return _this3.checkModelStatus;},5000000);}}},{key:\"handleChange\",value:function handleChange(event){var _this4=this;inference(event.target.value).then(function(result){_this4.setState({text:event.target.value,data:result[1],latency:result[0]});});inference(event.target.value).then(function(result){_this4.setState({text:function text(_text){return _this4.Dashboard.setValue(_text);},data:result[1],latency:result[0]});});}},{key:\"render\",value:function render(){var _this5=this;return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"em\",{children:\"In-Browser Transformer Inference\"}),/*#__PURE__*/_jsx(Chart,{width:'400px',height:'200px',chartType:\"BarChart\",data:this.state.data,options:{chartArea:{width:'40%'},colors:['purple'],backgroundColor:'#282c34',legend:{textStyle:{color:'white',fontSize:10},labels:{fontColor:'white'}},vAxis:{textStyle:{color:'white',fontSize:13}},hAxis:{minValue:5,maxValue:50,textStyle:{color:'white'}}}}),this.state.downloading&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"font\",{size:\"2\",children:\"Downloading model from CDN to browser..\"}),/*#__PURE__*/_jsx(Box,{sx:{width:'400px'},children:/*#__PURE__*/_jsx(LinearProgress,{})}),/*#__PURE__*/_jsx(\"p\",{})]}),/*#__PURE__*/_jsx(\"textarea\",{rows:\"8\",cols:\"24\",className:\"App-textarea\",name:\"message\"//  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n// rows=\"8\" cols=\"24\" placeholder={this.state.text}\n// placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n,value:this.Dashboard.value,onChange:function onChange(e){return _this5.Dashboard.setValue(e.target.value);},onDropRead:function onDropRead(text){return _this5.Dashboard.setValue(text);},textareaProps:{// cols: 24,\n// rows: 8,\nplaceholder:\"Drop one text file here...\"}// onChange={this.Dashboard}  \n// {this.Dashboard()} \n}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Inference Latency \",this.state.latency,\" ms\"]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"GitHub Repo: \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/jobergum/browser-ml-inference\",children:\"browser-ml-inference\"})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Model was trained on the \",/*#__PURE__*/_jsx(\"a\",{href:\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",children:\"GoEmotions\"}),\" dataset.\"]})})]})});}}]);return App;}(React.Component);// export default TextInputArea;\nexport default App;// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","useState","FileUpload","FileList","FileProcessing","FontAwesomeIcon","faPlus","App","props","handleFileChange","event","setState","selectedFile","target","files","loaded","message","name","state","defaultmessage","handleUpload","preventDefault","uploading","data","FormData","append","post","onUploadProgress","ProgressEvent","Math","round","total","then","res","console","log","statusText","catch","err","text","latency","downloading","handleChange","bind","timerID","setInterval","checkModelStatus","value","result","Dashboard","setValue","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue","e","placeholder"],"sources":["/Users/nguyentrungchinh/project_19/src/App.jsx"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing';\n\n// import {uploadfile} from './uploadfile.js';\n\n// import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload/FileUpload.scss'\n// import axios from 'axios'\n\n\n\n// function App() {\n//   const [files, setFiles] = useState([])\n\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n// function App() {\n//   const [files, setFiles] = useState([])\n\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n\n\n//   componentDidMount= () =>{\n//     timerID = setInterval(\n//       () => checkModelStatus(),\n//       1000\n//     );\n//   }\n\n//   checkModelStatus= () => {\n//     setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     };\n//   }\n\n//   handleChange= (event) => {  \n//     inference(event.target.value).then( result => {\n//       this.setState({\n//         text : event.target.value,\n//         data:result[1],\n//         latency:result[0],\n//       });\n//     });\n//   }\n\n\n\n\n//   return (\n//     <div className=\"App\">\n\n//       <div>\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//       </div>\n\n\n\n//       <header className=\"App-header\">   \n//       <em>In-Browser Transformer Inference</em>\n//       <Chart  \n//         width={'400px'}\n//         height={'200px'}\n//         chartType=\"BarChart\"\n//         data={state.data}\n//         options={{\n//           chartArea: { width: '40%'},\n//           colors: ['purple'],\n//           backgroundColor: '#282c34',\n//           legend: { \n//             textStyle: {color: 'white', fontSize: 10},\n//             labels: {fontColor:'white'}\n//           },\n//           vAxis: {\n//             textStyle: {\n//             color: 'white',\n//             fontSize: 13\n//           }\n//           },\n//           hAxis: {\n//             minValue: 5,\n//             maxValue: 50,\n//             textStyle: {\n//               color: 'white'\n//             }\n//           }\n//       }}\n//       />\n\n\n\n\n\n      \n//       {state.downloading && \n//         <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//         <Box sx={{ width: '400px' }}>\n//         <LinearProgress />\n//         </Box> \n//         <p></p>\n//         </div>\n//       }\n\n\n//       <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n//        placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n//       </textarea>\n\n\n      \n//       {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n//       //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n//       // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n//         // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n//         value = {this.Dashboard.value}\n//         onChange={e => this.Dashboard.setValue(e.target.value)}\n//         onDropRead={text => this.Dashboard.setValue(text)}\n\n//         textareaProps={{\n//           // cols: 24,\n//           // rows: 8,\n//           placeholder: \"Drop one text file here...\"\n//         }}\n//         // onChange={this.Dashboard}  \n//         // {this.Dashboard()} \n//         ></textarea> */}\n\n\n//        <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n//       <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n//       <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n//       </header>\n\n\n\n\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n// class TextInputArea extends React.Component {\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n\n      files: null\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  // Dashboard = () => {\n  //   const [value , setValue] = React.useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n\n\n\n\n      // return (\n      //   <div style={{ display: \"flex\" }}>\n      //     <input type=\"file\" name=\"input\" onChange={handleChange}\n      //     // placeholder={this.state.text} autoFocus\n      //      />\n      //     <textarea\n \n      //       cols={30}\n      //       rows={20}\n      //       value={value}\n      //       onChange={setValue}\n      //       style={{ marginTop: 15, width: \"50%\" }}\n      //     ></textarea>\n      //   </div>\n      // );\n  // }\n\n\n\n\n  \n  // state = {\n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // }\n  \n  // // On file select (from the pop up)\n  // onFileChange = event => {\n  //   // Update the state\n  //   this.setState({ selectedFile: event.target.files[0] });\n  // }\n  \n  // // On file upload (click the upload button)\n  // onFileUpload = () => {\n    \n  //   // Create an object of formData\n  //   // const formData = new FormData();\n  \n  //   // // Update the formData object\n  //   // formData.append(\n  //   //   \"myFile\",\n  //   //   this.state.selectedFile,\n  //   //   this.state.selectedFile.name\n  //   // );\n  \n  //   // Details of the uploaded file\n  //   console.log(this.state.selectedFile);\n  \n  //   // Request made to the backend api\n  //   // Send formData object\n\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n    \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n  //   //   },\n  //   // }\n  //   // );\n\n\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)}, \n    \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"67c784071bmsh339dd9d9dfa4776p1995bdjsn2731d6524052\",\n  //   //   },\n  //   // }\n  //   // );\n\n\n\n  //   axios.post(\"http://localhost:3001/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)});\n\n  // }\n  \n  // // File content to be displayed after\n  // // file upload is complete\n  // fileData = () => {\n  //   if (this.state.selectedFile) {\n  //     return (\n  //       <div>\n  //         <h5>File Details:</h5>\n  //         <p>File Name: {this.state.selectedFile.name}</p>\n  //         <p>File Type: {this.state.selectedFile.type}</p>\n  //         <p>\n  //           Last Modified:{\" \"}\n  //           {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //         </p>\n  //       </div>\n  //     );\n  //   } else {\n  //     return (\n  //       <div>\n  //         <br />\n  //         <h5>Choose before Pressing the Upload button</h5>\n  //       </div>\n  //     );\n  //   };\n  // }\n\n\n\n\n\n  // App()  {\n  // App_upload= () => {\n  //   const [files, setFiles] = React.useState([])\n  \n  //   const removeFile = (filename) => {\n  //     setFiles(files.filter(file => file.name !== filename))\n  //   }\n\n\n  // }\n\n\n\n// App_upload= () => {\n// const [files, setFiles] = useState([])\n\n// const removeFile = (filename) => {\n//   setFiles(files.filter(file => file.name !== filename))\n// }\n\n//   return (\n//     <div className=\"App_upload\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n\n\n\n\n\n// FileUpload = ({ files, setFiles, removeFile }) => {\n\n//   // function FileUpload ({ files, setFiles, removeFile })  {\n//       const uploadHandler = (event) => {\n//           const file = event.target.files[0];\n//           if(!file) return;\n//           file.isUploading = true;\n//           setFiles([...files, file])\n  \n//           // upload file\n//           // const formData = new FormData();\n//           // formData.append(\n              \n//           //     // \"newFile\",\n//           //     file.name,\n//           //     file,\n//           //     file.name\n//           // )\n  \n//           // axios.post('http://localhost:8080/upload', formData)\n//           axios.post('/upload', {newfile: (event.target.files[0], event.target.files[0].name)}\n//           //     {\n//           //     headers: {\n//           //       \"Content-Type\": \"multipart/form-data\",\n//           //     },\n//           //   }\n//             )\n//               .then((res) => {\n//                   file.isUploading = false;\n//                   setFiles([...files, file])\n//               })\n//               .catch((err) => {\n//                   // inform the user\n//                   console.error(err)\n//                   removeFile(file.name)\n//               });\n//       }\n//     }\n\n\n\n  //   uploadHandler = ( { event, files, setFiles, removeFile }) => {\n  //     const file = event.target.files[0];\n  //     if(!file) return;\n  //     file.isUploading = true;\n  //     setFiles([...files, file])\n\n  //     // upload file\n  //     // const formData = new FormData();\n  //     // formData.append(\n          \n  //     //     // \"newFile\",\n  //     //     file.name,\n  //     //     file,\n  //     //     file.name\n  //     // )\n\n  //     // axios.post('http://localhost:8080/upload', formData)\n  //     axios.post('/upload', {newfile: (event.target.files[0], event.target.files[0].name)},\n  //     //     {\n  //     //     headers: {\n  //     //       \"Content-Type\": \"multipart/form-data\",\n  //     //     },\n  //     //   }\n  //       )\n  //         .then((res) => {\n  //             file.isUploading = false;\n  //             setFiles([...files, file])\n  //         })\n  //         .catch((err) => {\n  //             // inform the user\n  //             console.error(err)\n  //             removeFile(file.name)\n  //         });\n  // }\n\n\n\n\n  // handleFile(e) { \n  //   // Getting the files from the input \n  //   let files = e.target.files[0]; \n  //   this.setState({ files }); \n  // } \n\n\n  // handleUpload(e) { \n  //   let files = this.state.files; \n  \n  //   // let formData = new FormData(); \n  \n  //   //Adding files to the formdata \n  //   // formData.append(\"image\", files); \n  //   // formData.append(\"name\", \"Name\"); \n  \n  //   axios({ \n  //     // Endpoint to send files \n  //     url: \"http://localhost:3000/upload\", \n  //     method: \"POST\", \n\n  //     // Attaching the form data \n  //     data: {newfile: (e.target.files, e.target.files.name)}, \n  //   }) \n  //     .then((res) => {         \n  //       console.log(res);\n  //       console.log(res.files);}) // Handle the response from backend here \n  //     .catch((err) => { console.error(err)}); // Catch errors if any \n  // } \n\n\n\n\n  handleFileChange = (event) => {\n    this.setState({\n      selectedFile: event.target.files[0],\n      loaded: 0,\n      message: event.target.files[0]\n        ? event.target.files[0].name\n        : this.state.defaultmessage\n    });\n  };\n\n  state = { selectedFile: null, loaded: null };\n\n  handleUpload = (event) => {\n    event.preventDefault();\n    if (this.state.uploading) return;\n    if (!this.state.selectedFile) {\n      this.setState({ message: 'Select a file first' });\n      return;\n    }\n    this.setState({ uploading: true });\n    const data = new FormData();\n    data.append('file', this.state.selectedFile, this.state.selectedFile.name);\n    axios\n      .post('/upload', data, {\n        onUploadProgress: (ProgressEvent) => {\n          this.setState({\n            loaded: Math.round(\n              (ProgressEvent.loaded / ProgressEvent.total) * 100\n            )\n          });\n        }\n      })\n      .then((res) => {\n        this.setState({\n          selectedFile: null,\n          message: 'Uploaded successfully',\n          uploading: false\n        });\n        console.log(res.statusText);\n      })\n      .catch((err) => {\n        this.setState({\n          uploading: false,\n          message: 'Failed to upload'\n        });\n      });\n  };\n\n\n\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n\n\n  handleChange(event) {  \n    inference(event.target.value).then( result => {\n      this.setState({\n        text : event.target.value,\n        data:result[1],\n        latency:result[0],\n      });\n    });\n\n\n    inference(event.target.value).then( result => {\n      this.setState({\n        text : text => this.Dashboard.setValue(text),\n        data:result[1],\n        latency:result[0],\n      });\n    });\n\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        \n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n\n\n      {/* <div>\n          <h5>\n              File Upload\n          </h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>Upload!</button>\n        </div>\n        {this.fileData()}\n      </div> */}\n\n        {/* <FileProcessing /> */}\n\n      \n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n      </textarea> */}\n\n\n      \n      <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {this.Dashboard.value}\n        onChange={e => this.Dashboard.setValue(e.target.value)}\n        onDropRead={text => this.Dashboard.setValue(text)}\n\n        textareaProps={{\n          // cols: 24,\n          // rows: 8,\n          placeholder: \"Drop one text file here...\"\n        }}\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea>\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header>\n\n\n\n\n    </div>   \n    );\n\n\n\n\n\n  }\n\n\n}\n// export default TextInputArea;\n\nexport default App;\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":"wlBAAA,MAAO,WAAP,CAEA,MAAOA,MAAP,KAAkB,OAAlB,CACA;AAEA,MAAOC,MAAP,KAAkB,OAAlB,CAEA,OAASC,SAAT,KAA0B,OAA1B,CAEA;AACA;AAEA,OAAQC,SAAR,KAAwB,gBAAxB,CACA,OAAQC,WAAR,KAA0B,gBAA1B,CACA,OAAQC,uBAAR,KAAsC,gBAAtC,CACA,MAAOC,MAAP,KAAkB,qBAAlB,CACA,MAAOC,IAAP,KAAgB,mBAAhB,CACA,MAAOC,eAAP,KAA2B,8BAA3B,CAEA,OAASC,QAAT,KAAyB,OAAzB,CACA,MAAO,YAAP,CACA,MAAOC,WAAP,KAAuB,yBAAvB,CACA,MAAOC,SAAP,KAAqB,qBAArB,CACA,MAAOC,eAAP,KAA2B,kBAA3B,CAEA;AAEA;AACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,OAASC,MAAT,KAAuB,mCAAvB,CACA,MAAO,8BAAP,CACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAQA;2FACMC,I,sGACJ,aAAYC,KAAZ,CAAmB,qCACjB,uBAAMA,KAAN,EADiB,MAkSnBC,gBAlSmB,CAkSA,SAACC,KAAD,CAAW,CAC5B,MAAKC,QAAL,CAAc,CACZC,YAAY,CAAEF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CADF,CAEZC,MAAM,CAAE,CAFI,CAGZC,OAAO,CAAEN,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EACLJ,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsBG,IADjB,CAEL,MAAKC,KAAL,CAAWC,cALH,CAAd,EAOD,CA1SkB,OA4SnBD,KA5SmB,CA4SX,CAAEN,YAAY,CAAE,IAAhB,CAAsBG,MAAM,CAAE,IAA9B,CA5SW,OA8SnBK,YA9SmB,CA8SJ,SAACV,KAAD,CAAW,CACxBA,KAAK,CAACW,cAAN,GACA,GAAI,MAAKH,KAAL,CAAWI,SAAf,CAA0B,OAC1B,GAAI,CAAC,MAAKJ,KAAL,CAAWN,YAAhB,CAA8B,CAC5B,MAAKD,QAAL,CAAc,CAAEK,OAAO,CAAE,qBAAX,CAAd,EACA,OACD,CACD,MAAKL,QAAL,CAAc,CAAEW,SAAS,CAAE,IAAb,CAAd,EACA,GAAMC,KAAI,CAAG,GAAIC,SAAJ,EAAb,CACAD,IAAI,CAACE,MAAL,CAAY,MAAZ,CAAoB,MAAKP,KAAL,CAAWN,YAA/B,CAA6C,MAAKM,KAAL,CAAWN,YAAX,CAAwBK,IAArE,EACAzB,KAAK,CACFkC,IADH,CACQ,SADR,CACmBH,IADnB,CACyB,CACrBI,gBAAgB,CAAE,0BAACC,aAAD,CAAmB,CACnC,MAAKjB,QAAL,CAAc,CACZI,MAAM,CAAEc,IAAI,CAACC,KAAL,CACLF,aAAa,CAACb,MAAd,CAAuBa,aAAa,CAACG,KAAtC,CAA+C,GADzC,CADI,CAAd,EAKD,CAPoB,CADzB,EAUGC,IAVH,CAUQ,SAACC,GAAD,CAAS,CACb,MAAKtB,QAAL,CAAc,CACZC,YAAY,CAAE,IADF,CAEZI,OAAO,CAAE,uBAFG,CAGZM,SAAS,CAAE,KAHC,CAAd,EAKAY,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,UAAhB,EACD,CAjBH,EAkBGC,KAlBH,CAkBS,SAACC,GAAD,CAAS,CACd,MAAK3B,QAAL,CAAc,CACZW,SAAS,CAAE,KADC,CAEZN,OAAO,CAAE,kBAFG,CAAd,EAID,CAvBH,EAwBD,CAhVkB,CAEjB,MAAKE,KAAL,CAAa,CACXqB,IAAI,CAAE,gEADK,CAEXhB,IAAI,CAAC3B,WAFM,CAGX4C,OAAO,CAAC,GAHG,CAIXC,WAAW,CAAC5C,uBAAuB,EAJxB,CAMXiB,KAAK,CAAE,IANI,CAAb,CASA,MAAK4B,YAAL,CAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB,CAXiB,aAYlB,CAGD;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAIF;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module"}
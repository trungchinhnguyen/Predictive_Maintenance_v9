{"ast":null,"code":"import _slicedToArray from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _readOnlyError from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/readOnlyError.js\";import React,{useState}from\"react\";import'./Dashboard.css';import axios from'axios';import{inference}from'./inference.js';import{columnNames}from'./inference.js';import{modelDownloadInProgress}from'./inference.js';import Chart from\"react-google-charts\";import Box from'@mui/material/Box';import LinearProgress from'@mui/material/LinearProgress';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Dashboard=function Dashboard(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),textValue=_useState2[0],setTextValue=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,3),data=_useState4[0],latency=_useState4[1],downloading=_useState4[2];//   const [latency, downloading] = useState(\"\");\ncolumnNames,_readOnlyError(\"data\");0.0,_readOnlyError(\"latency\");modelDownloadInProgress(),_readOnlyError(\"downloading\");//   componentDidMount=()=> {\n//     // [textValue, setTextValue] = useState(\"\");\n//    timerID = setInterval(\n//       () => this.checkModelStatus(),\n//       1000\n//     );\n//   }\n//   checkModelStatus=()=> {\n//     this.setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       this.timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     }\n//   }\nvar handleChange=function handleChange(e){// axios.get('/upload')\n// .then(response => {\n//   // Convert data to CSV format(optional)\n//   const file = response.files[0];\n//   console.log(response)\n// })\n// .catch(error => {\n//   // Handle errors\n//   console.error(error);\n// });\nvar file=e.target.files[0];var reader=new FileReader();reader.onload=function(e){var file=e.target.result;console.log(file);setTextValue(file);};reader.onerror=function(e){return alert(e.target.error.name);};reader.readAsText(file);inference(textValue);// .then(result)\n//     ( result => {\n//   data=result[1],\n//   latency=result[0]\n// });\n};return/*#__PURE__*/_jsx(\"div\",{className:\"Dashboard\",children:/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\"},children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",name:\"input\",onChange:handleChange}),/*#__PURE__*/_jsx(\"textarea\",{cols:30,rows:20,value:textValue,onChange:setTextValue,style:{marginTop:15,width:\"50%\"}})]})});};export default Dashboard;","map":{"version":3,"names":["React","useState","axios","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","Dashboard","textValue","setTextValue","data","latency","downloading","handleChange","e","file","target","files","reader","FileReader","onload","result","console","log","onerror","alert","error","name","readAsText","display","marginTop","width"],"sources":["/Users/nguyentrungchinh/project_19/src/Dashboard.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport './Dashboard.css';\nimport axios from 'axios';\n\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n\n\nconst Dashboard = () => {\n  const [textValue, setTextValue] = useState(\"\");\n  const [data, latency, downloading] = useState(\"\");\n//   const [latency, downloading] = useState(\"\");\n\n  data= columnNames;\n  latency=0.0;\n  downloading=modelDownloadInProgress();\n\n//   componentDidMount=()=> {\n//     // [textValue, setTextValue] = useState(\"\");\n//    timerID = setInterval(\n//       () => this.checkModelStatus(),\n//       1000\n//     );\n//   }\n\n//   checkModelStatus=()=> {\n//     this.setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       this.timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     }\n//   }\n\n  const handleChange = (e) => {\n\n\n\n\n    // axios.get('/upload')\n    // .then(response => {\n    //   // Convert data to CSV format(optional)\n    //   const file = response.files[0];\n    //   console.log(response)\n    // })\n    // .catch(error => {\n    //   // Handle errors\n    //   console.error(error);\n    // });\n\n\n    const file = e.target.files[0];\n\n    let reader = new FileReader();\n\n    reader.onload = (e) => {\n      const file = e.target.result;\n      console.log(file);\n      setTextValue(file);\n    };\n\n    reader.onerror = (e) => alert(e.target.error.name);\n    reader.readAsText(file);\n\n    inference(textValue)\n    // .then(result)\n    \n        //     ( result => {\n   \n        //   data=result[1],\n        //   latency=result[0]\n        // });\n\n     \n    \n    \n    };\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <div className=\"Dashboard\">\n        {/* <header className=\"App-header\">    */}\n            {/* <em>In-Browser Transformer Inference</em> */}\n\n        {/* <Chart  \n            width={'400px'}\n            height={'200px'}\n            chartType=\"BarChart\"\n            data={inference.result[1]}\n            options={{\n            chartArea: { width: '40%'},\n            colors: ['purple'],\n            backgroundColor: '#282c34',\n            legend: { \n                textStyle: {color: 'white', fontSize: 10},\n                labels: {fontColor:'white'}\n            },\n            vAxis: {\n                textStyle: {\n                color: 'white',\n                fontSize: 13\n            }\n            },\n            hAxis: {\n                minValue: 5,\n                maxValue: 50,\n                textStyle: {\n                color: 'white'\n                }\n            }\n        }}\n        /> */}\n        \n\n     {/* <div className=\"App\">  */}\n     \n        {/* <div>\n          {downloading()}\n        </div> */}\n\n        {/* {downloading()} */}\n\n\n    <div style={{ display: \"flex\" }}>\n      <input type=\"file\" name=\"input\" onChange={handleChange} />\n      <textarea\n        cols={30}\n        rows={20}\n        value={textValue}\n        onChange={setTextValue}\n        style={{ marginTop: 15, width: \"50%\" }}\n      ></textarea>\n    </div>\n\n    \n    {/* <div>\n          {downloading()}\n        </div> */}\n\n        {/* </header>  */}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"gPAAA,MAAOA,MAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAO,iBAAP,CACA,MAAOC,MAAP,KAAkB,OAAlB,CAGA,OAAQC,SAAR,KAAwB,gBAAxB,CACA,OAAQC,WAAR,KAA0B,gBAA1B,CACA,OAAQC,uBAAR,KAAsC,gBAAtC,CACA,MAAOC,MAAP,KAAkB,qBAAlB,CACA,MAAOC,IAAP,KAAgB,mBAAhB,CACA,MAAOC,eAAP,KAA2B,8BAA3B,C,wFAIA,GAAMC,UAAS,CAAG,QAAZA,UAAY,EAAM,CACtB,cAAkCR,QAAQ,CAAC,EAAD,CAA1C,wCAAOS,SAAP,eAAkBC,YAAlB,eACA,eAAqCV,QAAQ,CAAC,EAAD,CAA7C,yCAAOW,IAAP,eAAaC,OAAb,eAAsBC,WAAtB,eACF;AAEQV,WAAN,wBACQ,GAAR,2BACYC,uBAAuB,EAAnC,+BAEF;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE,GAAMU,aAAY,CAAG,QAAfA,aAAe,CAACC,CAAD,CAAO,CAK1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,GAAMC,KAAI,CAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb,CAEA,GAAIC,OAAM,CAAG,GAAIC,WAAJ,EAAb,CAEAD,MAAM,CAACE,MAAP,CAAgB,SAACN,CAAD,CAAO,CACrB,GAAMC,KAAI,CAAGD,CAAC,CAACE,MAAF,CAASK,MAAtB,CACAC,OAAO,CAACC,GAAR,CAAYR,IAAZ,EACAN,YAAY,CAACM,IAAD,CAAZ,CACD,CAJD,CAMAG,MAAM,CAACM,OAAP,CAAiB,SAACV,CAAD,QAAOW,MAAK,CAACX,CAAC,CAACE,MAAF,CAASU,KAAT,CAAeC,IAAhB,CAAZ,EAAjB,CACAT,MAAM,CAACU,UAAP,CAAkBb,IAAlB,EAEAd,SAAS,CAACO,SAAD,CAAT,CACA;AAEI;AAEA;AACA;AACA;AAKH,CA1CH,CAsDA,mBACE,YAAK,SAAS,CAAC,WAAf,uBA2CA,aAAK,KAAK,CAAE,CAAEqB,OAAO,CAAE,MAAX,CAAZ,wBACE,cAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,OAAxB,CAAgC,QAAQ,CAAEhB,YAA1C,EADF,cAEE,iBACE,IAAI,CAAE,EADR,CAEE,IAAI,CAAE,EAFR,CAGE,KAAK,CAAEL,SAHT,CAIE,QAAQ,CAAEC,YAJZ,CAKE,KAAK,CAAE,CAAEqB,SAAS,CAAE,EAAb,CAAiBC,KAAK,CAAE,KAAxB,CALT,EAFF,GA3CA,EADF,CA+DD,CAlJD,CAoJA,cAAexB,UAAf"},"metadata":{},"sourceType":"module"}
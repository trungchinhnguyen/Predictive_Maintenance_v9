{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentrungchinh/project_14/src/App.js\";\nimport './App.css';\nimport axios from 'axios'; // import React, { Component } from 'react';\n\nimport React from 'react';\nimport { Component } from 'react';\nimport { useState } from 'react'; // import Textarea from \"react-dropzone-textarea\";\n\nimport { inference } from './inference.js';\nimport { columnNames } from './inference.js';\nimport { modelDownloadInProgress } from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress'; // import {uploadfile} from './uploadfile.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TextInputArea extends React.Component {\n  constructor(props) {\n    var _s = $RefreshSig$();\n\n    super(props);\n    this.Dashboard = _s(() => {\n      _s();\n\n      const [value, setValue] = React.useState(\"\");\n\n      const handleChange = e => {\n        const file = e.target.files[0];\n        let reader = new FileReader();\n\n        reader.onload = e => {\n          const file = e.target.result;\n          console.log(file);\n          setValue(file);\n        };\n\n        reader.onerror = e => alert(e.target.error.name);\n\n        reader.readAsText(file);\n      }; // return (\n      //   <div style={{ display: \"flex\" }}>\n      //     <input type=\"file\" name=\"input\" onChange={handleChange}\n      //     // placeholder={this.state.text} autoFocus\n      //      />\n      //     <textarea\n      //       cols={30}\n      //       rows={20}\n      //       value={value}\n      //       onChange={setValue}\n      //       style={{ marginTop: 15, width: \"50%\" }}\n      //     ></textarea>\n      //   </div>\n      // );\n\n    }, \"lKcPXhvtPI9dPh90px05EwLScFQ=\");\n    this.state = {\n      // Initially, no file is selected\n      selectedFile: null\n    };\n\n    this.onFileChange = event => {\n      // Update the state\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n    };\n\n    this.onFileUpload = () => {\n      // Create an object of formData\n      const formData = new FormData(); // Update the formData object\n\n      formData.append(\"myFile\", this.state.selectedFile, this.state.selectedFile.name); // Details of the uploaded file\n\n      console.log(this.state.selectedFile); // Request made to the backend api\n      // Send formData object\n\n      axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\"\n        }\n      });\n    };\n\n    this.fileData = () => {\n      if (this.state.selectedFile) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"File Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Name: \", this.state.selectedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Type: \", this.state.selectedFile.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Last Modified:\", \" \", this.state.selectedFile.lastModifiedDate.toDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Choose before Pressing the Upload button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this);\n      }\n\n      ;\n    };\n\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data: columnNames,\n      latency: 0.0,\n      downloading: modelDownloadInProgress()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.checkModelStatus(), 1000);\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress()\n    });\n\n    if (!this.state.downloading) {\n      this.timerID = setInterval(() => this.checkModelStatus, 5000000);\n    }\n  }\n\n  handleChange(event) {\n    inference(event.target.value).then(result => {\n      this.setState({\n        text: event.target.value,\n        data: result[1],\n        latency: result[0]\n      });\n    }); // inference(event.target.value).then( result => {\n    //   this.setState({\n    //     text : text => this.Dashboard.setValue(text),\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"In-Browser Transformer Inference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          width: '400px',\n          height: '200px',\n          chartType: \"BarChart\",\n          data: this.state.data,\n          options: {\n            chartArea: {\n              width: '40%'\n            },\n            colors: ['purple'],\n            backgroundColor: '#282c34',\n            legend: {\n              textStyle: {\n                color: 'white',\n                fontSize: 10\n              },\n              labels: {\n                fontColor: 'white'\n              }\n            },\n            vAxis: {\n              textStyle: {\n                color: 'white',\n                fontSize: 13\n              }\n            },\n            hAxis: {\n              minValue: 5,\n              maxValue: 50,\n              textStyle: {\n                color: 'white'\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"File Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: this.onFileChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.onFileUpload,\n              children: \"Upload!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 9\n          }, this), this.fileData()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 7\n        }, this), this.state.downloading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"2\",\n            children: \"Downloading model from CDN to browser..\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '400px'\n            },\n            children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"8\",\n          cols: \"24\",\n          className: \"App-textarea\",\n          name: \"message\" //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n          // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n          // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n          ,\n          value: this.Dashboard.value,\n          onChange: e => this.Dashboard.setValue(e.target.value),\n          onDropRead: text => this.Dashboard.setValue(text),\n          textareaProps: {\n            // cols: 24,\n            // rows: 8,\n            placeholder: \"Drop one text file here...\"\n          } // onChange={this.Dashboard}  \n          // {this.Dashboard()} \n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"Inference Latency \", this.state.latency, \" ms\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"GitHub Repo: \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://github.com/jobergum/browser-ml-inference\",\n              children: \"browser-ml-inference\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 40\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"Model was trained on the \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",\n              children: \"GoEmotions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 52\n            }, this), \" dataset.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TextInputArea; // const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","useState","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","TextInputArea","constructor","props","Dashboard","value","setValue","handleChange","e","file","target","files","reader","FileReader","onload","result","console","log","onerror","alert","error","name","readAsText","state","selectedFile","onFileChange","event","setState","onFileUpload","formData","FormData","append","post","headers","fileData","type","lastModifiedDate","toDateString","text","data","latency","downloading","bind","componentDidMount","timerID","setInterval","checkModelStatus","then","render","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue","placeholder"],"sources":["/Users/nguyentrungchinh/project_14/src/App.js"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\nimport { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// import {uploadfile} from './uploadfile.js';\n\n \n\nclass TextInputArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  Dashboard = () => {\n    const [value , setValue] = React.useState(\"\");\n    const handleChange = (e) => {\n      const file = e.target.files[0];\n  \n      let reader = new FileReader();\n  \n      reader.onload = (e) => {\n        const file = e.target.result;\n        console.log(file);\n        setValue(file);\n      };\n  \n      reader.onerror = (e) => alert(e.target.error.name);\n      reader.readAsText(file);\n    };\n\n      // return (\n      //   <div style={{ display: \"flex\" }}>\n      //     <input type=\"file\" name=\"input\" onChange={handleChange}\n      //     // placeholder={this.state.text} autoFocus\n      //      />\n      //     <textarea\n \n      //       cols={30}\n      //       rows={20}\n      //       value={value}\n      //       onChange={setValue}\n      //       style={{ marginTop: 15, width: \"50%\" }}\n      //     ></textarea>\n      //   </div>\n      // );\n  }\n\n\n\n\n  \n  state = {\n    // Initially, no file is selected\n    selectedFile: null\n  }\n  \n  // On file select (from the pop up)\n  onFileChange = event => {\n    // Update the state\n    this.setState({ selectedFile: event.target.files[0] });\n  }\n  \n  // On file upload (click the upload button)\n  onFileUpload = () => {\n    // Create an object of formData\n    const formData = new FormData();\n  \n    // Update the formData object\n    formData.append(\n      \"myFile\",\n      this.state.selectedFile,\n      this.state.selectedFile.name\n    );\n  \n    // Details of the uploaded file\n    console.log(this.state.selectedFile);\n  \n    // Request made to the backend api\n    // Send formData object\n    axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n    \n    {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n      },\n    }\n    );\n  }\n  \n  // File content to be displayed after\n  // file upload is complete\n  fileData = () => {\n    if (this.state.selectedFile) {\n      return (\n        <div>\n          <h2>File Details:</h2>\n          <p>File Name: {this.state.selectedFile.name}</p>\n          <p>File Type: {this.state.selectedFile.type}</p>\n          <p>\n            Last Modified:{\" \"}\n            {this.state.selectedFile.lastModifiedDate.toDateString()}\n          </p>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <br />\n          <h5>Choose before Pressing the Upload button</h5>\n        </div>\n      );\n    };\n  }\n\n\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange(event) {  \n    inference(event.target.value).then( result => {\n      this.setState({\n        text : event.target.value,\n        data:result[1],\n        latency:result[0],\n      });\n    });\n\n    // inference(event.target.value).then( result => {\n    //   this.setState({\n    //     text : text => this.Dashboard.setValue(text),\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n\n\n      <div>\n          <h5>\n              File Upload\n          </h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>Upload!</button>\n        </div>\n        {this.fileData()}\n      </div>\n\n\n\n      \n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n      </textarea> */}\n\n\n      \n      <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {this.Dashboard.value}\n        onChange={e => this.Dashboard.setValue(e.target.value)}\n        onDropRead={text => this.Dashboard.setValue(text)}\n\n        textareaProps={{\n          // cols: 24,\n          // rows: 8,\n          placeholder: \"Drop one text file here...\"\n        }}\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea>\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header>\n\n\n    </div>   \n    );\n\n\n\n\n\n  }\n\n\n}\nexport default TextInputArea;\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
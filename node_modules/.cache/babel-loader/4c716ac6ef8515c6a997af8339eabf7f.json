{"ast":null,"code":"import _slicedToArray from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _classCallCheck from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import'./App.css';import axios from'axios';// import React, { Component } from 'react';\nimport React from'react';import{Component}from'react';// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\nimport{inference}from'./inference.js';import{columnNames}from'./inference.js';import{modelDownloadInProgress}from'./inference.js';import Chart from\"react-google-charts\";import Box from'@mui/material/Box';import LinearProgress from'@mui/material/LinearProgress';import{useState}from'react';import'./App.scss';import FileUpload from'./FileUpload/FileUpload';import FileList from'./FileList/FileList';import FileProcessing from'./FileProcessing';// import Dashboard from './Dashboard';\nimport'./Dashboard.css';// import {textValue_exp} from './Dashboard.jsx';\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n// import React from 'react'\nimport{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faPlus}from'@fortawesome/free-solid-svg-icons';import'./FileUpload/FileUpload.scss';// import axios from 'axios'\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TextInputArea=/*#__PURE__*/function(_React$Component){_inherits(TextInputArea,_React$Component);var _super=_createSuper(TextInputArea);function TextInputArea(props){var _this;_classCallCheck(this,TextInputArea);_this=_super.call(this,props);_this.handleSubmit=function(event){event.preventDefault();// const user = {\n//   name: this.state.name\n// };\n// axios.post(`/upload`, { user })\naxios.post('/upload',{file:_this.state.file}).then(function(res){console.log(res);console.log(res.data);}).catch(function(err){// inform the user\nconsole.error(err);// removeFile(file.name)\n});};_this.state={text:'Enter text to classify emotion, model trained on English text.',data:columnNames,latency:0.0,downloading:modelDownloadInProgress(),file:''};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));// [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n// this.FileReader = this.FileReader.bind(this);\nreturn _this;}// Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     // <div className=\"Dashboard\">\n//     <div className=\"App\">\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//     </div>\n//   );\n// };\n//   handleChange(event) { \n//     axios.get('/upload')\n//     .then(response => {\n//       // Convert data to CSV format(optional)\n//       const file = response.files[0];\n//     })\n//     .catch(error => {\n//       // Handle errors\n//       console.error(error);\n//     });\n//     // const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = response.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(response.error.name);\n//     reader.readAsText(file);\n//   inference(textValue).then( result => {\n//     this.setState({\n//       text : textValue,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\n_createClass(TextInputArea,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// [textValue, setTextValue] = useState(\"\");\nthis.timerID=setInterval(function(){return _this2.checkModelStatus();},1000);}},{key:\"checkModelStatus\",value:function checkModelStatus(){var _this3=this;this.setState({downloading:modelDownloadInProgress()});if(!this.state.downloading){this.timerID=setInterval(function(){return _this3.checkModelStatus;},5000000);}}},{key:\"handleChange\",value:function handleChange(event){// Dashboard = (e) => {\n// const [textValue, setTextValue] = useState(\"\");\n// const handleChange = (e) => {\nthis.setState({file:(event.target.files[0],event.target.files[0].name)});var file=event.target.files[0];var reader=new FileReader();reader.onload(event).then(function(result){var file=event.target.result;console.log(file);// this.setState({ text: file });\n// inference(file).then( result => {\n//   this.setState({\n//     text : file,\n//     data:result[1],\n//     latency:result[0],\n//   });\n// });\n});reader.onerror(event).alert(event.target.error.name);reader.readAsText(file);// inference(event.target.value).then( result => {\n//   this.setState({\n//     text : event.target.value,\n//     data:result[1],\n//     latency:result[0],\n//   });\n// });\n}},{key:\"render\",value://   handleChange (event) {  \n//   inference(event.target.value).then( result => {\n//     this.setState({\n//       text : event.target.value,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\n// handleChange(event) { \n//   axios.get('/upload')\n//   .then(response => {\n//     // Convert data to CSV format(optional)\n//     const file = response.files[0];\n//   })\n//   .catch(error => {\n//     // Handle errors\n//     console.error(error);\n//   });\n//   // const file = e.target.files[0];\n//   let reader = new FileReader();\n//   reader.onload = (e) => {\n//     const file = response.result;\n//     console.log(file);\n//     setTextValue(file);\n//   };\n//   reader.onerror = (e) => alert(response.error.name);\n//   reader.readAsText(file);\n// inference(textValue).then( result => {\n//   this.setState({\n//     text : textValue,\n//     data:result[1],\n//     latency:result[0],\n//   });\n// });\n// }\n// Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     axios.get('/upload')\n//     .then(response => {\n//       // Convert data to CSV format(optional)\n//       const file = response.file;\n//     })\n//     .catch(error => {\n//       // Handle errors\n//       console.error(error);\n//     });\n//     // const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div className=\"Dashboard\">\n//   {/* <div className=\"App\">  */}\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//     </div>\n//   );\n// };\n// handleChange (event) {  \n//   inference(event.target.value).then( result => {\n//     this.setState({\n//       text : event.target.value,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\nfunction render(){// const [state, setState] = useState(null);\nvar _this$useState=this.useState(\"\"),_this$useState2=_slicedToArray(_this$useState,2),textValue=_this$useState2[0],setTextValue=_this$useState2[1];return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"em\",{children:\"In-Browser Transformer Inference\"}),/*#__PURE__*/_jsx(Chart,{width:'400px',height:'200px',chartType:\"BarChart\",data:this.state.data,options:{chartArea:{width:'40%'},colors:['purple'],backgroundColor:'#282c34',legend:{textStyle:{color:'white',fontSize:10},labels:{fontColor:'white'}},vAxis:{textStyle:{color:'white',fontSize:13}},hAxis:{minValue:5,maxValue:50,textStyle:{color:'white'}}}}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:this.handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Upload file:\",/*#__PURE__*/_jsx(\"input\",{type:\"file\",name:\"name\",onChange:this.handleChange})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Upload\"})]})}),this.state.downloading&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"font\",{size:\"2\",children:\"Downloading model from CDN to browser..\"}),/*#__PURE__*/_jsx(Box,{sx:{width:'400px'},children:/*#__PURE__*/_jsx(LinearProgress,{})}),/*#__PURE__*/_jsx(\"p\",{})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Inference Latency \",this.state.latency,\" ms\"]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"GitHub Repo: \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/jobergum/browser-ml-inference\",children:\"browser-ml-inference\"})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Model was trained on the \",/*#__PURE__*/_jsx(\"a\",{href:\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",children:\"GoEmotions\"}),\" dataset.\"]})})]})});}}]);return TextInputArea;}(React.Component);export default TextInputArea;// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","useState","FileUpload","FileList","FileProcessing","FontAwesomeIcon","faPlus","TextInputArea","props","handleSubmit","event","preventDefault","post","file","state","then","res","console","log","data","catch","err","error","text","latency","downloading","handleChange","bind","timerID","setInterval","checkModelStatus","setState","target","files","name","reader","FileReader","onload","result","onerror","alert","readAsText","textValue","setTextValue","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue"],"sources":["/Users/nguyentrungchinh/project_19/src/App.jsx"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing';\n// import Dashboard from './Dashboard';\nimport './Dashboard.css';\n\n// import {textValue_exp} from './Dashboard.jsx';\n\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n\n// import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload/FileUpload.scss'\n// import axios from 'axios'\n\n\n \n\nclass TextInputArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n      file:'',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    // [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n    // this.FileReader = this.FileReader.bind(this);\n  }\n\n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     // <div className=\"Dashboard\">\n  //     <div className=\"App\">\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n\n\n  //   handleChange(event) { \n      \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.files[0];\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n\n  //     reader.onload = (e) => {\n  //       const file = response.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(response.error.name);\n  //     reader.readAsText(file);\n  \n\n      \n  //   inference(textValue).then( result => {\n  //     this.setState({\n  //       text : textValue,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n\n\n\n\n  componentDidMount() {\n    // [textValue, setTextValue] = useState(\"\");\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange(event) {  \n  \n        // Dashboard = (e) => {\n        // const [textValue, setTextValue] = useState(\"\");\n        // const handleChange = (e) => {\n\n\n        this.setState({ file : (event.target.files[0], event.target.files[0].name) });\n\n          const file = event.target.files[0];\n      \n          let reader = new FileReader();\n      \n          reader.onload(event).then(result => {\n            const file = event.target.result;\n            console.log(file);\n            // this.setState({ text: file });\n\n            // inference(file).then( result => {\n            //   this.setState({\n            //     text : file,\n            //     data:result[1],\n            //     latency:result[0],\n            //   });\n      \n            // });\n\n\n          });\n\n          reader.onerror(event).alert(event.target.error.name);\n          reader.readAsText(file);\n\n          \n          // inference(event.target.value).then( result => {\n          //   this.setState({\n          //     text : event.target.value,\n          //     data:result[1],\n          //     latency:result[0],\n          //   });\n    \n          // });\n    \n    }\n\n    handleSubmit = event => {\n      event.preventDefault();\n  \n      // const user = {\n      //   name: this.state.name\n      // };\n  \n      // axios.post(`/upload`, { user })\n\n      axios.post('/upload', {file: this.state.file})\n        .then(res => {\n          console.log(res);\n          console.log(res.data);\n        })\n        .catch((err) => {\n          // inform the user\n          console.error(err)\n          // removeFile(file.name)\n      })\n\n      \n\n\n\n    }\n\n\n\n\n  //   handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n    // handleChange(event) { \n      \n    //   axios.get('/upload')\n    //   .then(response => {\n    //     // Convert data to CSV format(optional)\n    //     const file = response.files[0];\n    //   })\n    //   .catch(error => {\n    //     // Handle errors\n    //     console.error(error);\n    //   });\n  \n  \n    //   // const file = e.target.files[0];\n  \n    //   let reader = new FileReader();\n\n    //   reader.onload = (e) => {\n    //     const file = response.result;\n    //     console.log(file);\n    //     setTextValue(file);\n    //   };\n  \n    //   reader.onerror = (e) => alert(response.error.name);\n    //   reader.readAsText(file);\n  \n\n      \n    // inference(textValue).then( result => {\n    //   this.setState({\n    //     text : textValue,\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n\n  // }\n\n\n  \n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  \n  \n  \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.file;\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  \n  \n  //   };\n  \n  //   return (\n  //     <div className=\"Dashboard\">\n  //   {/* <div className=\"App\">  */}\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  \n  \n  \n  //     </div>\n  //   );\n  // };\n\n\n\n  // handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n  \n\n\n\n  render() {\n    // const [state, setState] = useState(null);\n    const [textValue, setTextValue] = this.useState(\"\");\n    return (\n      <div className=\"App\">\n\n      {/* <FileProcessing /> */}\n\n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n\n\n          {/* <FileProcessing /> */}\n\n\n          {/* <Dashboard /> */}\n\n\n\n        {/* <div>\n\n          {this.Dashboard()}\n        </div> */}\n\n\n\n          {/* {this.handleChange()} */}\n\n\n       {/* <div>\n\n       {this.handleChange}   \n        </div> */}\n\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Upload file:\n          <input type=\"file\" name=\"name\" onChange={this.handleChange} />\n        </label>\n        <button type=\"submit\">Upload</button>\n      </form>\n      </div>\n      \n\n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n    {/* <div style={{ display: \"flex\" }}>\n          <input type=\"file\" name=\"input\" onChange={this.handleChange} />\n          <textarea\n            cols={30}\n            rows={20}\n            value={this.textValue}\n            onChange={this.setTextValue}\n            style={{ marginTop: 15, width: \"50%\" }}\n          ></textarea>\n        </div> */}\n\n\n      {/* <div>\n      {this.state.data}     \n      </div> */}\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}\n        \n       >\n      </textarea> */}\n\n\n      \n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus // onChange={this.handleChange}\n       placeholder={Dashboard.textValue} autoFocus // onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {Dashboard.textValue}\n        // onChange={e => Dashboard.textarea.onChange(e.target.value)}\n        // onChange={Dashboard.setTextValue}\n        onChange={this.onFileChange}\n        // onDropRead={text => Dashboard.textarea.onChange.value}\n\n        // textareaProps={{\n        //   // cols: 24,\n        //   // rows: 8,\n        //   placeholder: \"Drop one text file here...\"\n        // } }\n\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea> */}\n\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header> \n\n\n    </div>   \n    );\n\n\n\n\n  };\n  \n\n\n}\nexport default TextInputArea;\n\n\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
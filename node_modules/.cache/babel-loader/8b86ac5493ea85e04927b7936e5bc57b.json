{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentrungchinh/project_19/src/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './Dashboard.css';\nimport axios from 'axios';\nimport { inference } from './inference.js';\nimport { columnNames } from './inference.js';\nimport { modelDownloadInProgress } from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [textValue, setTextValue] = useState(\"\"); //   const [data, latency, downloading] = useState(\"\");\n  //   const [latency, setLatency] = useState([]);\n  //   const [data, setData] = useState([]);\n  //   const [downloading, setDownloading] = useState([]);\n  //   const [timerID, setInterval] = useState([]);\n  // //   const [timerID] = useState(\"\");\n  //   const [state, setState] = useState(\"\");\n  //   const [result, setResult] = useState(\"\");\n  //   setData([...data, columnNames]);\n  //   setDownloading([...downloading, modelDownloadInProgress]);\n  //   setLatency([...latency, 0.0]);\n  //   setInterval([...timerID, 10000]);\n  //   const [latency, downloading] = useState(\"\");\n  //   data= columnNames;\n  //   latency=0.0;\n  //   downloading=modelDownloadInProgress();\n  //   componentDidMount=()=> {\n  //     // [textValue, setTextValue] = useState(\"\");\n  //    timerID = setInterval(\n  //       () => this.checkModelStatus(),\n  //       1000\n  //     );\n  //   }\n  //   checkModelStatus=()=> {\n  //     this.setState({\n  //       downloading: modelDownloadInProgress(),\n  //     });\n  //     if (!this.state.downloading) {\n  //       this.timerID = setInterval(\n  //         () => this.checkModelStatus,\n  //         5000000\n  //       );\n  //     }\n  //   }\n\n  const handleChange = e => {\n    // setData([...data, columnNames]);\n    // setDownloading([...downloading, modelDownloadInProgress]);\n    // setLatency([...latency, 0.0]);\n    // setInterval([...timerID, 10000]);\n    // componentDidMount=()=> {\n    //         setInterval([...timerID, checkModelStatus(), 1000]);\n    //     };\n    // checkModelStatus=()=> {\n    //     setLatency([...latency, 0.0]);\n    //     setDownloading([...downloading, modelDownloadInProgress]);\n    //     if (!downloading) {\n    //         setInterval([...timerID, checkModelStatus(), 5000000]);\n    //     }\n    //   }\n    // axios.get('/upload')\n    // .then(response => {\n    //   // Convert data to CSV format(optional)\n    //   const file = response.files[0];\n    //   console.log(response)\n    // })\n    // .catch(error => {\n    //   // Handle errors\n    //   console.error(error);\n    // });\n    const file = e.target.files[0];\n    let reader = new FileReader();\n\n    reader.onload = e => {\n      const file = e.target.result;\n      console.log(file);\n      setTextValue(file);\n    };\n\n    reader.onerror = e => alert(e.target.error.name);\n\n    reader.readAsText(file); // inference(textValue).then( //result => {\n    //     setData([...data, inference.result[1]]),\n    //     setLatency([...latency, inference.result[0]])\n    //     // setLatency([...latency, 1000])\n    //     // }\n    //     );\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Dashboard\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"input\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        cols: 30,\n        rows: 20,\n        value: textValue,\n        onChange: setTextValue,\n        style: {\n          marginTop: 15,\n          width: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"PJCoURwKHDb1WCYurecfW1VW8mk=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","axios","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","Dashboard","textValue","setTextValue","handleChange","e","file","target","files","reader","FileReader","onload","result","console","log","onerror","alert","error","name","readAsText","display","marginTop","width"],"sources":["/Users/nguyentrungchinh/project_19/src/Dashboard.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport './Dashboard.css';\nimport axios from 'axios';\n\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n\n\nconst Dashboard =() => {\n  const [textValue, setTextValue] = useState(\"\");\n\n//   const [data, latency, downloading] = useState(\"\");\n//   const [latency, setLatency] = useState([]);\n//   const [data, setData] = useState([]);\n//   const [downloading, setDownloading] = useState([]);\n//   const [timerID, setInterval] = useState([]);\n// //   const [timerID] = useState(\"\");\n//   const [state, setState] = useState(\"\");\n//   const [result, setResult] = useState(\"\");\n\n\n//   setData([...data, columnNames]);\n//   setDownloading([...downloading, modelDownloadInProgress]);\n//   setLatency([...latency, 0.0]);\n//   setInterval([...timerID, 10000]);\n\n//   const [latency, downloading] = useState(\"\");\n\n//   data= columnNames;\n//   latency=0.0;\n//   downloading=modelDownloadInProgress();\n\n//   componentDidMount=()=> {\n//     // [textValue, setTextValue] = useState(\"\");\n//    timerID = setInterval(\n//       () => this.checkModelStatus(),\n//       1000\n//     );\n//   }\n\n//   checkModelStatus=()=> {\n//     this.setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       this.timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     }\n//   }\n\n  const handleChange = (e) => {\n\n\n    // setData([...data, columnNames]);\n    // setDownloading([...downloading, modelDownloadInProgress]);\n    // setLatency([...latency, 0.0]);\n    // setInterval([...timerID, 10000]);\n\n    // componentDidMount=()=> {\n    //         setInterval([...timerID, checkModelStatus(), 1000]);\n\n    //     };\n\n\n    // checkModelStatus=()=> {\n    //     setLatency([...latency, 0.0]);\n    //     setDownloading([...downloading, modelDownloadInProgress]);\n    //     if (!downloading) {\n    //         setInterval([...timerID, checkModelStatus(), 5000000]);\n    //     }\n    //   }\n\n    // axios.get('/upload')\n    // .then(response => {\n    //   // Convert data to CSV format(optional)\n    //   const file = response.files[0];\n    //   console.log(response)\n    // })\n    // .catch(error => {\n    //   // Handle errors\n    //   console.error(error);\n    // });\n\n\n    const file = e.target.files[0];\n\n    let reader = new FileReader();\n\n    reader.onload = (e) => {\n      const file = e.target.result;\n      console.log(file);\n      setTextValue(file);\n    };\n\n    reader.onerror = (e) => alert(e.target.error.name);\n    reader.readAsText(file);\n\n    // inference(textValue).then( //result => {\n\n    //     setData([...data, inference.result[1]]),\n    //     setLatency([...latency, inference.result[0]])\n    //     // setLatency([...latency, 1000])\n    //     // }\n    //     );\n\n     \n    \n    \n    };\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <div className=\"Dashboard\">\n        {/* <header className=\"App-header\">    */}\n            {/* <em>In-Browser Transformer Inference</em> */}\n\n        {/* <Chart  \n            width={'400px'}\n            height={'200px'}\n            chartType=\"BarChart\"\n            // data={inference.result[1]}\n            data={columnNames}\n            options={{\n            chartArea: { width: '40%'},\n            colors: ['purple'],\n            backgroundColor: '#282c34',\n            legend: { \n                textStyle: {color: 'white', fontSize: 10},\n                labels: {fontColor:'white'}\n            },\n            vAxis: {\n                textStyle: {\n                color: 'white',\n                fontSize: 13\n            }\n            },\n            hAxis: {\n                minValue: 5,\n                maxValue: 50,\n                textStyle: {\n                color: 'white'\n                }\n            }\n        }}\n        /> */}\n        \n\n     {/* <div className=\"App\">  */}\n     \n        {/* <div>\n          {downloading()}\n        </div>  */}\n\n        {/* {downloading()} */}\n\n\n        {/* {downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n            <Box sx={{ width: '400px' }}>\n            <LinearProgress />\n            </Box> \n            <p></p>\n        </div>\n         } */}\n\n\n{/* \n        <div>\n        <input type=\"file\" name=\"input\" onChange={handleChange} />\n        {downloading && \n            <div><font size=\"2\">Downloading model from CDN to browser..</font>\n            <Box sx={{ width: '400px' }}>\n            <LinearProgress />\n            </Box> \n            <p></p>\n            </div>\n        }\n\n        </div>  */}\n\n      \n\n\n    <div style={{ display: \"flex\" }}>\n      <input type=\"file\" name=\"input\" onChange={handleChange} />\n      <textarea\n        cols={30}\n        rows={20}\n        value={textValue}\n        onChange={setTextValue}\n        style={{ marginTop: 15, width: \"50%\" }}\n      ></textarea>\n    </div>\n\n    \n    {/* <div>\n          {downloading()}\n        </div> */}\n\n        {/* </header>  */}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,iBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAAQC,SAAR,QAAwB,gBAAxB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,uBAAR,QAAsC,gBAAtC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;;AAIA,MAAMC,SAAS,GAAE,MAAM;EAAA;;EACrB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C,CADqB,CAGvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE,MAAMW,YAAY,GAAIC,CAAD,IAAO;IAG1B;IACA;IACA;IACA;IAEA;IACA;IAEA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;IAEA,IAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;IAEAD,MAAM,CAACE,MAAP,GAAiBN,CAAD,IAAO;MACrB,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASK,MAAtB;MACAC,OAAO,CAACC,GAAR,CAAYR,IAAZ;MACAH,YAAY,CAACG,IAAD,CAAZ;IACD,CAJD;;IAMAG,MAAM,CAACM,OAAP,GAAkBV,CAAD,IAAOW,KAAK,CAACX,CAAC,CAACE,MAAF,CAASU,KAAT,CAAeC,IAAhB,CAA7B;;IACAT,MAAM,CAACU,UAAP,CAAkBb,IAAlB,EA7C0B,CA+C1B;IAEA;IACA;IACA;IACA;IACA;EAKC,CA1DH;;EAsEA,oBACE;IAAK,SAAS,EAAC,WAAf;IAAA,uBAuEA;MAAK,KAAK,EAAE;QAAEc,OAAO,EAAE;MAAX,CAAZ;MAAA,wBACE;QAAO,IAAI,EAAC,MAAZ;QAAmB,IAAI,EAAC,OAAxB;QAAgC,QAAQ,EAAEhB;MAA1C;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAE,EADR;QAEE,IAAI,EAAE,EAFR;QAGE,KAAK,EAAEF,SAHT;QAIE,QAAQ,EAAEC,YAJZ;QAKE,KAAK,EAAE;UAAEkB,SAAS,EAAE,EAAb;UAAiBC,KAAK,EAAE;QAAxB;MALT;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA;EAvEA;IAAA;IAAA;IAAA;EAAA,QADF;AA2FD,CA7MD;;GAAMrB,S;;KAAAA,S;AA+MN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}
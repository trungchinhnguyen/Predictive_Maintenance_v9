{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import'./Dashboard.css';import axios from'axios';import{inference}from'./inference.js';import{columnNames}from'./inference.js';import{modelDownloadInProgress}from'./inference.js';import Chart from\"react-google-charts\";import Box from'@mui/material/Box';import LinearProgress from'@mui/material/LinearProgress';// const Dashboard =() => {\n// async function Dashboard()  {\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),textValue=_useState2[0],setTextValue=_useState2[1];//   const [data, latency, downloading] = useState(\"\");\n//   const [latency, setLatency] = useState([]);\n//   const [data, setData] = useState([]);\n//   const [downloading, setDownloading] = useState([]);\n//   const [timerID, setInterval] = useState([]);\n// //   const [timerID] = useState(\"\");\n//   const [state, setState] = useState(\"\");\n//   const [result, setResult] = useState(\"\");\n//   setData([...data, columnNames]);\n//   setDownloading([...downloading, modelDownloadInProgress]);\n//   setLatency([...latency, 0.0]);\n//   setInterval([...timerID, 10000]);\n//   const [latency, downloading] = useState(\"\");\n//   data= columnNames;\n//   latency=0.0;\n//   downloading=modelDownloadInProgress();\n//   componentDidMount=()=> {\n//     // [textValue, setTextValue] = useState(\"\");\n//    timerID = setInterval(\n//       () => this.checkModelStatus(),\n//       1000\n//     );\n//   }\n//   checkModelStatus=()=> {\n//     this.setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       this.timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     }\n//   }\n//   const handleChange = (e) => {\nfunction handleChange(_x){return _handleChange.apply(this,arguments);}// export default Dashboard;\nfunction _handleChange(){_handleChange=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e){var file,reader;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// setData([...data, columnNames]);\n// setDownloading([...downloading, modelDownloadInProgress]);\n// setLatency([...latency, 0.0]);\n// setInterval([...timerID, 10000]);\n// componentDidMount=()=> {\n//         setInterval([...timerID, checkModelStatus(), 1000]);\n//     };\n// checkModelStatus=()=> {\n//     setLatency([...latency, 0.0]);\n//     setDownloading([...downloading, modelDownloadInProgress]);\n//     if (!downloading) {\n//         setInterval([...timerID, checkModelStatus(), 5000000]);\n//     }\n//   }\n// axios.get('/upload')\n// .then(response => {\n//   // Convert data to CSV format(optional)\n//   const file = response.files[0];\n//   console.log(response)\n// })\n// .catch(error => {\n//   // Handle errors\n//   console.error(error);\n// });\nfile=e.target.files[0];reader=new FileReader();reader.onload=function(e){var file=e.target.result;console.log(file);setTextValue(file);};reader.onerror=function(e){return alert(e.target.error.name);};reader.readAsText(file);// inference(textValue).then( //result => {\n//     setData([...data, inference.result[1]]),\n//     setLatency([...latency, inference.result[0]])\n//     // setLatency([...latency, 1000])\n//     // }\n//     );\n// };\nreturn _context.abrupt(\"return\",file);case 6:case\"end\":return _context.stop();}}},_callee);}));return _handleChange.apply(this,arguments);}export var handleChange_exp=handleChange;export var textValue_exp=textValue;","map":{"version":3,"names":["React","useState","axios","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","textValue","setTextValue","handleChange","e","file","target","files","reader","FileReader","onload","result","console","log","onerror","alert","error","name","readAsText","handleChange_exp","textValue_exp"],"sources":["/Users/nguyentrungchinh/project_19/src/Dashboard.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport './Dashboard.css';\nimport axios from 'axios';\n\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n\n\n// const Dashboard =() => {\n\n// async function Dashboard()  {\n  const [textValue, setTextValue] = useState(\"\");\n\n//   const [data, latency, downloading] = useState(\"\");\n//   const [latency, setLatency] = useState([]);\n//   const [data, setData] = useState([]);\n//   const [downloading, setDownloading] = useState([]);\n//   const [timerID, setInterval] = useState([]);\n// //   const [timerID] = useState(\"\");\n//   const [state, setState] = useState(\"\");\n//   const [result, setResult] = useState(\"\");\n\n\n//   setData([...data, columnNames]);\n//   setDownloading([...downloading, modelDownloadInProgress]);\n//   setLatency([...latency, 0.0]);\n//   setInterval([...timerID, 10000]);\n\n//   const [latency, downloading] = useState(\"\");\n\n//   data= columnNames;\n//   latency=0.0;\n//   downloading=modelDownloadInProgress();\n\n//   componentDidMount=()=> {\n//     // [textValue, setTextValue] = useState(\"\");\n//    timerID = setInterval(\n//       () => this.checkModelStatus(),\n//       1000\n//     );\n//   }\n\n//   checkModelStatus=()=> {\n//     this.setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       this.timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     }\n//   }\n\n//   const handleChange = (e) => {\n\nasync function handleChange(e) {\n    // setData([...data, columnNames]);\n    // setDownloading([...downloading, modelDownloadInProgress]);\n    // setLatency([...latency, 0.0]);\n    // setInterval([...timerID, 10000]);\n\n    // componentDidMount=()=> {\n    //         setInterval([...timerID, checkModelStatus(), 1000]);\n\n    //     };\n\n\n    // checkModelStatus=()=> {\n    //     setLatency([...latency, 0.0]);\n    //     setDownloading([...downloading, modelDownloadInProgress]);\n    //     if (!downloading) {\n    //         setInterval([...timerID, checkModelStatus(), 5000000]);\n    //     }\n    //   }\n\n    // axios.get('/upload')\n    // .then(response => {\n    //   // Convert data to CSV format(optional)\n    //   const file = response.files[0];\n    //   console.log(response)\n    // })\n    // .catch(error => {\n    //   // Handle errors\n    //   console.error(error);\n    // });\n\n\n    const file = e.target.files[0];\n\n    let reader = new FileReader();\n\n    reader.onload = (e) => {\n      const file = e.target.result;\n      console.log(file);\n      setTextValue(file);\n    };\n\n    reader.onerror = (e) => alert(e.target.error.name);\n    reader.readAsText(file);\n\n    // inference(textValue).then( //result => {\n\n    //     setData([...data, inference.result[1]]),\n    //     setLatency([...latency, inference.result[0]])\n    //     // setLatency([...latency, 1000])\n    //     // }\n    //     );\n\n     \n    \n    \n    // };\n\n\n\n\n\n    return file;\n\n\n\n\n\n//   return (\n//     <div className=\"Dashboard\">\n//         {/* <header className=\"App-header\">    */}\n//             {/* <em>In-Browser Transformer Inference</em> */}\n\n//         {/* <Chart  \n//             width={'400px'}\n//             height={'200px'}\n//             chartType=\"BarChart\"\n//             // data={inference.result[1]}\n//             data={columnNames}\n//             options={{\n//             chartArea: { width: '40%'},\n//             colors: ['purple'],\n//             backgroundColor: '#282c34',\n//             legend: { \n//                 textStyle: {color: 'white', fontSize: 10},\n//                 labels: {fontColor:'white'}\n//             },\n//             vAxis: {\n//                 textStyle: {\n//                 color: 'white',\n//                 fontSize: 13\n//             }\n//             },\n//             hAxis: {\n//                 minValue: 5,\n//                 maxValue: 50,\n//                 textStyle: {\n//                 color: 'white'\n//                 }\n//             }\n//         }}\n//         /> */}\n        \n\n//      {/* <div className=\"App\">  */}\n     \n//         {/* <div>\n//           {downloading()}\n//         </div>  */}\n\n//         {/* {downloading()} */}\n\n\n//         {/* {downloading && \n//         <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//             <Box sx={{ width: '400px' }}>\n//             <LinearProgress />\n//             </Box> \n//             <p></p>\n//         </div>\n//          } */}\n\n\n// {/* \n//         <div>\n//         <input type=\"file\" name=\"input\" onChange={handleChange} />\n//         {downloading && \n//             <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//             <Box sx={{ width: '400px' }}>\n//             <LinearProgress />\n//             </Box> \n//             <p></p>\n//             </div>\n//         }\n\n//         </div>  */}\n\n      \n\n\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n\n    \n//     {/* <div>\n//           {downloading()}\n//         </div> */}\n\n//         {/* </header>  */}\n//     </div>\n//   )\n\n\n}\n\n// export default Dashboard;\n\nexport let handleChange_exp = handleChange \n\nexport let textValue_exp = textValue "],"mappings":"wXAAA,MAAOA,MAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAO,iBAAP,CACA,MAAOC,MAAP,KAAkB,OAAlB,CAGA,OAAQC,SAAR,KAAwB,gBAAxB,CACA,OAAQC,WAAR,KAA0B,gBAA1B,CACA,OAAQC,uBAAR,KAAsC,gBAAtC,CACA,MAAOC,MAAP,KAAkB,qBAAlB,CACA,MAAOC,IAAP,KAAgB,mBAAhB,CACA,MAAOC,eAAP,KAA2B,8BAA3B,CAIA;AAEA;AACE,cAAkCP,QAAQ,CAAC,EAAD,CAA1C,wCAAOQ,SAAP,eAAkBC,YAAlB,eAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;QAEeC,a,iDAmKf;iGAnKA,iBAA4BC,CAA5B,oIACI;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGMC,IAhCV,CAgCiBD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAhCjB,CAkCQC,MAlCR,CAkCiB,GAAIC,WAAJ,EAlCjB,CAoCID,MAAM,CAACE,MAAP,CAAgB,SAACN,CAAD,CAAO,CACrB,GAAMC,KAAI,CAAGD,CAAC,CAACE,MAAF,CAASK,MAAtB,CACAC,OAAO,CAACC,GAAR,CAAYR,IAAZ,EACAH,YAAY,CAACG,IAAD,CAAZ,CACD,CAJD,CAMAG,MAAM,CAACM,OAAP,CAAiB,SAACV,CAAD,QAAOW,MAAK,CAACX,CAAC,CAACE,MAAF,CAASU,KAAT,CAAeC,IAAhB,CAAZ,EAAjB,CACAT,MAAM,CAACU,UAAP,CAAkBb,IAAlB,EAEA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAxDJ,gCA8DWA,IA9DX,wD,+CAqKA,MAAO,IAAIc,iBAAgB,CAAGhB,YAAvB,CAEP,MAAO,IAAIiB,cAAa,CAAGnB,SAApB"},"metadata":{},"sourceType":"module"}
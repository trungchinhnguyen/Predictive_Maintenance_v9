{"ast":null,"code":"import _slicedToArray from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'./App.css';import axios from'axios';import React,{Component}from'react';// import React from 'react';\n// import { Component } from 'react';\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\nimport{inference}from'./inference.js';import{columnNames}from'./inference.js';import{modelDownloadInProgress}from'./inference.js';import Chart from\"react-google-charts\";import Box from'@mui/material/Box';import LinearProgress from'@mui/material/LinearProgress';import{useState}from'react';import'./App.scss';import FileUpload from'./FileUpload/FileUpload';import FileList from'./FileList/FileList';// import {uploadfile} from './uploadfile.js';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),files=_useState2[0],setFiles=_useState2[1];var removeFile=function removeFile(filename){setFiles(files.filter(function(file){return file.name!==filename;}));};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"title\",children:\"Upload file\"}),/*#__PURE__*/_jsx(FileUpload,{files:files,setFiles:setFiles,removeFile:removeFile}),/*#__PURE__*/_jsx(FileList,{files:files,removeFile:removeFile})]});}export default App;// class TextInputArea extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       text: 'Enter text to classify emotion, model trained on English text.',\n//       data:columnNames,\n//       latency:0.0,\n//       downloading:modelDownloadInProgress()\n//     };\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   Dashboard = () => {\n//     const [value , setValue] = React.useState(\"\");\n//     const handleChange = (e) => {\n//       const file = e.target.files[0];\n//       let reader = new FileReader();\n//       reader.onload = (e) => {\n//         const file = e.target.result;\n//         console.log(file);\n//         setValue(file);\n//       };\n//       reader.onerror = (e) => alert(e.target.error.name);\n//       reader.readAsText(file);\n//     };\n//       // return (\n//       //   <div style={{ display: \"flex\" }}>\n//       //     <input type=\"file\" name=\"input\" onChange={handleChange}\n//       //     // placeholder={this.state.text} autoFocus\n//       //      />\n//       //     <textarea\n//       //       cols={30}\n//       //       rows={20}\n//       //       value={value}\n//       //       onChange={setValue}\n//       //       style={{ marginTop: 15, width: \"50%\" }}\n//       //     ></textarea>\n//       //   </div>\n//       // );\n//   }\n//   // state = {\n//   //   // Initially, no file is selected\n//   //   selectedFile: null\n//   // }\n//   // // On file select (from the pop up)\n//   // onFileChange = event => {\n//   //   // Update the state\n//   //   this.setState({ selectedFile: event.target.files[0] });\n//   // }\n//   // // On file upload (click the upload button)\n//   // onFileUpload = () => {\n//   //   // Create an object of formData\n//   //   // const formData = new FormData();\n//   //   // // Update the formData object\n//   //   // formData.append(\n//   //   //   \"myFile\",\n//   //   //   this.state.selectedFile,\n//   //   //   this.state.selectedFile.name\n//   //   // );\n//   //   // Details of the uploaded file\n//   //   console.log(this.state.selectedFile);\n//   //   // Request made to the backend api\n//   //   // Send formData object\n//   //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n//   //   // {\n//   //   //   headers: {\n//   //   //     \"Content-Type\": \"multipart/form-data\",\n//   //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//   //   //     \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//   //   //   },\n//   //   // }\n//   //   // );\n//   //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)}, \n//   //   // {\n//   //   //   headers: {\n//   //   //     \"Content-Type\": \"multipart/form-data\",\n//   //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//   //   //     \"x-rapidapi-key\": \"67c784071bmsh339dd9d9dfa4776p1995bdjsn2731d6524052\",\n//   //   //   },\n//   //   // }\n//   //   // );\n//   //   axios.post(\"http://localhost:3001/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)});\n//   // }\n//   // // File content to be displayed after\n//   // // file upload is complete\n//   // fileData = () => {\n//   //   if (this.state.selectedFile) {\n//   //     return (\n//   //       <div>\n//   //         <h5>File Details:</h5>\n//   //         <p>File Name: {this.state.selectedFile.name}</p>\n//   //         <p>File Type: {this.state.selectedFile.type}</p>\n//   //         <p>\n//   //           Last Modified:{\" \"}\n//   //           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//   //         </p>\n//   //       </div>\n//   //     );\n//   //   } else {\n//   //     return (\n//   //       <div>\n//   //         <br />\n//   //         <h5>Choose before Pressing the Upload button</h5>\n//   //       </div>\n//   //     );\n//   //   };\n//   // }\n//   // App()  {\n//   App= () => {\n//     const [files, setFiles] = React.useState([])\n//     const removeFile = (filename) => {\n//       setFiles(files.filter(file => file.name !== filename))\n//     }\n//   }\n//   componentDidMount() {\n//     this.timerID = setInterval(\n//       () => this.checkModelStatus(),\n//       1000\n//     );\n//   }\n//   checkModelStatus() {\n//     this.setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       this.timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     }\n//   }\n//   handleChange(event) {  \n//     inference(event.target.value).then( result => {\n//       this.setState({\n//         text : event.target.value,\n//         data:result[1],\n//         latency:result[0],\n//       });\n//     });\n//     // inference(event.target.value).then( result => {\n//     //   this.setState({\n//     //     text : text => this.Dashboard.setValue(text),\n//     //     data:result[1],\n//     //     latency:result[0],\n//     //   });\n//     // });\n//   }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//       <header className=\"App-header\">   \n//       <em>In-Browser Transformer Inference</em>\n//       <Chart  \n//         width={'400px'}\n//         height={'200px'}\n//         chartType=\"BarChart\"\n//         data={this.state.data}\n//         options={{\n//           chartArea: { width: '40%'},\n//           colors: ['purple'],\n//           backgroundColor: '#282c34',\n//           legend: { \n//             textStyle: {color: 'white', fontSize: 10},\n//             labels: {fontColor:'white'}\n//           },\n//           vAxis: {\n//             textStyle: {\n//             color: 'white',\n//             fontSize: 13\n//           }\n//           },\n//           hAxis: {\n//             minValue: 5,\n//             maxValue: 50,\n//             textStyle: {\n//               color: 'white'\n//             }\n//           }\n//       }}\n//       />\n//       {/* <div>\n//           <h5>\n//               File Upload\n//           </h5>\n//         <div>\n//           <input type=\"file\" onChange={this.onFileChange} />\n//           <button onClick={this.onFileUpload}>Upload!</button>\n//         </div>\n//         {this.fileData()}\n//       </div> */}\n//       {/* <div className=\"title\">Upload file</div>\n//         <FileUpload files={this.App.files} setFiles={this.App.setFiles}\n//           removeFile={this.App.removeFile} />\n//         <FileList files={this.App.files} removeFile={this.App.removeFile} /> */}\n//       {/* <div >\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={this.App.files} setFiles={this.App.setFiles}\n//         removeFile={this.App.removeFile} />\n//       <FileList files={this.App.files} removeFile={this.App.removeFile} />\n//     </div> */}\n//       {this.state.downloading && \n//         <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//         <Box sx={{ width: '400px' }}>\n//         <LinearProgress />\n//         </Box> \n//         <p></p>\n//         </div>\n//       }\n//       {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n//        placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n//       </textarea> */}\n//       {/* <textarea className=\"App-textarea\"  name=\"message\" //rows=\"8\" cols=\"24\"\n//       //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n//       // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n//         // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n//         value = {this.Dashboard.value}\n//         onChange={e => this.Dashboard.setValue(e.target.value)}\n//         onDropRead={text => this.Dashboard.setValue(text)}\n//         textareaProps={{\n//           cols: 24,\n//           rows: 8,\n//           placeholder: \"Drop one text file here...\"\n//         }}\n//         // onChange={this.Dashboard}  \n//         // {this.Dashboard()} \n//         ></textarea> */}\n//        {/* <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n//       <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n//       <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n//        */}\n//       </header>\n//     </div>   \n//     );\n//   }\n// }\n// export default TextInputArea;\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","useState","FileUpload","FileList","App","files","setFiles","removeFile","filename","filter","file","name"],"sources":["/Users/nguyentrungchinh/project_19/src/App.jsx"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\nimport React, { Component } from 'react';\n\n// import React from 'react';\n\n// import { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\n\n// import {uploadfile} from './uploadfile.js';\n\n \n\nfunction App() {\n  const [files, setFiles] = useState([])\n\n  const removeFile = (filename) => {\n    setFiles(files.filter(file => file.name !== filename))\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">Upload file</div>\n      <FileUpload files={files} setFiles={setFiles}\n        removeFile={removeFile} />\n      <FileList files={files} removeFile={removeFile} />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n// class TextInputArea extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       text: 'Enter text to classify emotion, model trained on English text.',\n//       data:columnNames,\n//       latency:0.0,\n//       downloading:modelDownloadInProgress()\n//     };\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n\n\n//   Dashboard = () => {\n//     const [value , setValue] = React.useState(\"\");\n//     const handleChange = (e) => {\n//       const file = e.target.files[0];\n  \n//       let reader = new FileReader();\n  \n//       reader.onload = (e) => {\n//         const file = e.target.result;\n//         console.log(file);\n//         setValue(file);\n//       };\n  \n//       reader.onerror = (e) => alert(e.target.error.name);\n//       reader.readAsText(file);\n//     };\n\n//       // return (\n//       //   <div style={{ display: \"flex\" }}>\n//       //     <input type=\"file\" name=\"input\" onChange={handleChange}\n//       //     // placeholder={this.state.text} autoFocus\n//       //      />\n//       //     <textarea\n \n//       //       cols={30}\n//       //       rows={20}\n//       //       value={value}\n//       //       onChange={setValue}\n//       //       style={{ marginTop: 15, width: \"50%\" }}\n//       //     ></textarea>\n//       //   </div>\n//       // );\n//   }\n\n\n\n\n  \n//   // state = {\n//   //   // Initially, no file is selected\n//   //   selectedFile: null\n//   // }\n  \n//   // // On file select (from the pop up)\n//   // onFileChange = event => {\n//   //   // Update the state\n//   //   this.setState({ selectedFile: event.target.files[0] });\n//   // }\n  \n//   // // On file upload (click the upload button)\n//   // onFileUpload = () => {\n    \n//   //   // Create an object of formData\n//   //   // const formData = new FormData();\n  \n//   //   // // Update the formData object\n//   //   // formData.append(\n//   //   //   \"myFile\",\n//   //   //   this.state.selectedFile,\n//   //   //   this.state.selectedFile.name\n//   //   // );\n  \n//   //   // Details of the uploaded file\n//   //   console.log(this.state.selectedFile);\n  \n//   //   // Request made to the backend api\n//   //   // Send formData object\n\n//   //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n    \n//   //   // {\n//   //   //   headers: {\n//   //   //     \"Content-Type\": \"multipart/form-data\",\n//   //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//   //   //     \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//   //   //   },\n//   //   // }\n//   //   // );\n\n\n//   //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)}, \n    \n//   //   // {\n//   //   //   headers: {\n//   //   //     \"Content-Type\": \"multipart/form-data\",\n//   //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//   //   //     \"x-rapidapi-key\": \"67c784071bmsh339dd9d9dfa4776p1995bdjsn2731d6524052\",\n//   //   //   },\n//   //   // }\n//   //   // );\n\n\n\n//   //   axios.post(\"http://localhost:3001/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)});\n\n//   // }\n  \n//   // // File content to be displayed after\n//   // // file upload is complete\n//   // fileData = () => {\n//   //   if (this.state.selectedFile) {\n//   //     return (\n//   //       <div>\n//   //         <h5>File Details:</h5>\n//   //         <p>File Name: {this.state.selectedFile.name}</p>\n//   //         <p>File Type: {this.state.selectedFile.type}</p>\n//   //         <p>\n//   //           Last Modified:{\" \"}\n//   //           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//   //         </p>\n//   //       </div>\n//   //     );\n//   //   } else {\n//   //     return (\n//   //       <div>\n//   //         <br />\n//   //         <h5>Choose before Pressing the Upload button</h5>\n//   //       </div>\n//   //     );\n//   //   };\n//   // }\n\n\n\n\n\n//   // App()  {\n//   App= () => {\n//     const [files, setFiles] = React.useState([])\n  \n//     const removeFile = (filename) => {\n//       setFiles(files.filter(file => file.name !== filename))\n//     }\n\n\n//   }\n\n\n//   componentDidMount() {\n//     this.timerID = setInterval(\n//       () => this.checkModelStatus(),\n//       1000\n//     );\n//   }\n\n//   checkModelStatus() {\n//     this.setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       this.timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     }\n//   }\n\n//   handleChange(event) {  \n//     inference(event.target.value).then( result => {\n//       this.setState({\n//         text : event.target.value,\n//         data:result[1],\n//         latency:result[0],\n//       });\n//     });\n\n//     // inference(event.target.value).then( result => {\n//     //   this.setState({\n//     //     text : text => this.Dashboard.setValue(text),\n//     //     data:result[1],\n//     //     latency:result[0],\n//     //   });\n//     // });\n\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n\n        \n//       <header className=\"App-header\">   \n//       <em>In-Browser Transformer Inference</em>\n//       <Chart  \n//         width={'400px'}\n//         height={'200px'}\n//         chartType=\"BarChart\"\n//         data={this.state.data}\n//         options={{\n//           chartArea: { width: '40%'},\n//           colors: ['purple'],\n//           backgroundColor: '#282c34',\n//           legend: { \n//             textStyle: {color: 'white', fontSize: 10},\n//             labels: {fontColor:'white'}\n//           },\n//           vAxis: {\n//             textStyle: {\n//             color: 'white',\n//             fontSize: 13\n//           }\n//           },\n//           hAxis: {\n//             minValue: 5,\n//             maxValue: 50,\n//             textStyle: {\n//               color: 'white'\n//             }\n//           }\n//       }}\n//       />\n\n\n\n\n\n//       {/* <div>\n//           <h5>\n//               File Upload\n//           </h5>\n//         <div>\n//           <input type=\"file\" onChange={this.onFileChange} />\n//           <button onClick={this.onFileUpload}>Upload!</button>\n//         </div>\n//         {this.fileData()}\n//       </div> */}\n\n\n\n\n      \n//       {/* <div className=\"title\">Upload file</div>\n//         <FileUpload files={this.App.files} setFiles={this.App.setFiles}\n//           removeFile={this.App.removeFile} />\n//         <FileList files={this.App.files} removeFile={this.App.removeFile} /> */}\n\n\n//       {/* <div >\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={this.App.files} setFiles={this.App.setFiles}\n//         removeFile={this.App.removeFile} />\n//       <FileList files={this.App.files} removeFile={this.App.removeFile} />\n//     </div> */}\n\n\n\n//       {this.state.downloading && \n//         <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//         <Box sx={{ width: '400px' }}>\n//         <LinearProgress />\n//         </Box> \n//         <p></p>\n//         </div>\n//       }\n\n\n//       {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n//        placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n//       </textarea> */}\n\n\n      \n//       {/* <textarea className=\"App-textarea\"  name=\"message\" //rows=\"8\" cols=\"24\"\n//       //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n//       // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n//         // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n//         value = {this.Dashboard.value}\n//         onChange={e => this.Dashboard.setValue(e.target.value)}\n//         onDropRead={text => this.Dashboard.setValue(text)}\n\n//         textareaProps={{\n//           cols: 24,\n//           rows: 8,\n//           placeholder: \"Drop one text file here...\"\n//         }}\n//         // onChange={this.Dashboard}  \n//         // {this.Dashboard()} \n//         ></textarea> */}\n\n\n\n\n\n//        {/* <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n//       <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n//       <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n//        */}\n\n//       </header>\n\n\n//     </div>   \n//     );\n\n\n\n\n\n//   }\n\n\n// }\n// export default TextInputArea;\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":"wHAAA,MAAO,WAAP,CAEA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAOC,MAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA;AAEA;AAEA;AACA;AAEA,OAAQC,SAAR,KAAwB,gBAAxB,CACA,OAAQC,WAAR,KAA0B,gBAA1B,CACA,OAAQC,uBAAR,KAAsC,gBAAtC,CACA,MAAOC,MAAP,KAAkB,qBAAlB,CACA,MAAOC,IAAP,KAAgB,mBAAhB,CACA,MAAOC,eAAP,KAA2B,8BAA3B,CAEA,OAASC,QAAT,KAAyB,OAAzB,CACA,MAAO,YAAP,CACA,MAAOC,WAAP,KAAuB,yBAAvB,CACA,MAAOC,SAAP,KAAqB,qBAArB,CAEA;wFAIA,QAASC,IAAT,EAAe,CACb,cAA0BH,QAAQ,CAAC,EAAD,CAAlC,wCAAOI,KAAP,eAAcC,QAAd,eAEA,GAAMC,WAAU,CAAG,QAAbA,WAAa,CAACC,QAAD,CAAc,CAC/BF,QAAQ,CAACD,KAAK,CAACI,MAAN,CAAa,SAAAC,IAAI,QAAIA,KAAI,CAACC,IAAL,GAAcH,QAAlB,EAAjB,CAAD,CAAR,CACD,CAFD,CAIA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,YAAK,SAAS,CAAC,OAAf,yBADF,cAEE,KAAC,UAAD,EAAY,KAAK,CAAEH,KAAnB,CAA0B,QAAQ,CAAEC,QAApC,CACE,UAAU,CAAEC,UADd,EAFF,cAIE,KAAC,QAAD,EAAU,KAAK,CAAEF,KAAjB,CAAwB,UAAU,CAAEE,UAApC,EAJF,GADF,CAQD,CAED,cAAeH,IAAf,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAMA;AAGA;AACA;AASA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
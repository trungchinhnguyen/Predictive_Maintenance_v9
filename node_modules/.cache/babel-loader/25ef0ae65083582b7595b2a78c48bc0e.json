{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport { registerBackend } from './backend-impl';","map":{"version":3,"mappings":"AAAA;AACA;AA+CA,SAAQA,eAAR,QAA8B,gBAA9B","names":["registerBackend"],"sources":["/Users/nguyentrungchinh/project_14/node_modules/onnxruntime-common/lib/backend.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from './inference-session';\r\nimport {OnnxValue} from './onnx-value';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport declare namespace SessionHandler {\r\n  type FeedsType = {[name: string]: OnnxValue};\r\n  type FetchesType = {[name: string]: OnnxValue | null};\r\n  type ReturnType = {[name: string]: OnnxValue};\r\n}\r\n\r\n/**\r\n * Represent a handler instance of an inference session.\r\n *\r\n * @internal\r\n */\r\nexport interface SessionHandler {\r\n  dispose(): Promise<void>;\r\n\r\n  readonly inputNames: readonly string[];\r\n  readonly outputNames: readonly string[];\r\n\r\n  startProfiling(): void;\r\n  endProfiling(): void;\r\n\r\n  run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\r\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\r\n}\r\n\r\n/**\r\n * Represent a backend that provides implementation of model inferencing.\r\n *\r\n * @internal\r\n */\r\nexport interface Backend {\r\n  /**\r\n   * Initialize the backend asynchronously. Should throw when failed.\r\n   */\r\n  init(): Promise<void>;\r\n\r\n  createSessionHandler(uriOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler>;\r\n}\r\n\r\nexport {registerBackend} from './backend-impl';\r\n"]},"metadata":{},"sourceType":"module"}
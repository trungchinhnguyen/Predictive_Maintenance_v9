{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentrungchinh/project_19/src/App.jsx\";\nimport './App.css';\nimport axios from 'axios'; // import React, { Component } from 'react';\n\nimport React from 'react';\nimport { Component } from 'react'; // import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport { inference } from './inference.js';\nimport { columnNames } from './inference.js';\nimport { modelDownloadInProgress } from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing'; // import {uploadfile} from './uploadfile.js';\n// import React from 'react'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport './FileUpload/FileUpload.scss'; // import axios from 'axios'\n// function App() {\n//   const [files, setFiles] = useState([])\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n//   return (\n//     <div className=\"App\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n// export default App;\n// function App() {\n//   const [files, setFiles] = useState([])\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n//   componentDidMount= () =>{\n//     timerID = setInterval(\n//       () => checkModelStatus(),\n//       1000\n//     );\n//   }\n//   checkModelStatus= () => {\n//     setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     };\n//   }\n//   handleChange= (event) => {  \n//     inference(event.target.value).then( result => {\n//       this.setState({\n//         text : event.target.value,\n//         data:result[1],\n//         latency:result[0],\n//       });\n//     });\n//   }\n//   return (\n//     <div className=\"App\">\n//       <div>\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//       </div>\n//       <header className=\"App-header\">   \n//       <em>In-Browser Transformer Inference</em>\n//       <Chart  \n//         width={'400px'}\n//         height={'200px'}\n//         chartType=\"BarChart\"\n//         data={state.data}\n//         options={{\n//           chartArea: { width: '40%'},\n//           colors: ['purple'],\n//           backgroundColor: '#282c34',\n//           legend: { \n//             textStyle: {color: 'white', fontSize: 10},\n//             labels: {fontColor:'white'}\n//           },\n//           vAxis: {\n//             textStyle: {\n//             color: 'white',\n//             fontSize: 13\n//           }\n//           },\n//           hAxis: {\n//             minValue: 5,\n//             maxValue: 50,\n//             textStyle: {\n//               color: 'white'\n//             }\n//           }\n//       }}\n//       />\n//       {state.downloading && \n//         <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//         <Box sx={{ width: '400px' }}>\n//         <LinearProgress />\n//         </Box> \n//         <p></p>\n//         </div>\n//       }\n//       <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n//        placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n//       </textarea>\n//       {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n//       //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n//       // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n//         // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n//         value = {this.Dashboard.value}\n//         onChange={e => this.Dashboard.setValue(e.target.value)}\n//         onDropRead={text => this.Dashboard.setValue(text)}\n//         textareaProps={{\n//           // cols: 24,\n//           // rows: 8,\n//           placeholder: \"Drop one text file here...\"\n//         }}\n//         // onChange={this.Dashboard}  \n//         // {this.Dashboard()} \n//         ></textarea> */}\n//        <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n//       <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n//       <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\n// class TextInputArea extends React.Component {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFileChange = event => {\n      this.setState({\n        selectedFile: event.target.files[0],\n        loaded: 0,\n        message: event.target.files[0] ? event.target.files[0].name : this.state.defaultmessage\n      });\n    };\n\n    this.state = {\n      selectedFile: null,\n      loaded: null\n    };\n\n    this.handleUpload = event => {\n      event.preventDefault();\n      if (this.state.uploading) return;\n\n      if (!this.state.selectedFile) {\n        this.setState({\n          message: 'Select a file first'\n        });\n        return;\n      }\n\n      this.setState({\n        uploading: true\n      });\n      const data = new FormData();\n      data.append('file', this.state.selectedFile, this.state.selectedFile.name);\n      axios.post('/upload', data, {\n        onUploadProgress: ProgressEvent => {\n          this.setState({\n            loaded: Math.round(ProgressEvent.loaded / ProgressEvent.total * 100)\n          });\n        }\n      }).then(res => {\n        this.setState({\n          selectedFile: null,\n          message: 'Uploaded successfully',\n          uploading: false\n        });\n        console.log(res.statusText);\n      }).catch(err => {\n        this.setState({\n          uploading: false,\n          message: 'Failed to upload'\n        });\n      });\n    };\n\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data: columnNames,\n      latency: 0.0,\n      downloading: modelDownloadInProgress(),\n      files: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n  } // Dashboard = () => {\n  //   const [value , setValue] = React.useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  //     let reader = new FileReader();\n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setValue(file);\n  //     };\n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  // return (\n  //   <div style={{ display: \"flex\" }}>\n  //     <input type=\"file\" name=\"input\" onChange={handleChange}\n  //     // placeholder={this.state.text} autoFocus\n  //      />\n  //     <textarea\n  //       cols={30}\n  //       rows={20}\n  //       value={value}\n  //       onChange={setValue}\n  //       style={{ marginTop: 15, width: \"50%\" }}\n  //     ></textarea>\n  //   </div>\n  // );\n  // }\n  // state = {\n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // }\n  // // On file select (from the pop up)\n  // onFileChange = event => {\n  //   // Update the state\n  //   this.setState({ selectedFile: event.target.files[0] });\n  // }\n  // // On file upload (click the upload button)\n  // onFileUpload = () => {\n  //   // Create an object of formData\n  //   // const formData = new FormData();\n  //   // // Update the formData object\n  //   // formData.append(\n  //   //   \"myFile\",\n  //   //   this.state.selectedFile,\n  //   //   this.state.selectedFile.name\n  //   // );\n  //   // Details of the uploaded file\n  //   console.log(this.state.selectedFile);\n  //   // Request made to the backend api\n  //   // Send formData object\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n  //   //   },\n  //   // }\n  //   // );\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)}, \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"67c784071bmsh339dd9d9dfa4776p1995bdjsn2731d6524052\",\n  //   //   },\n  //   // }\n  //   // );\n  //   axios.post(\"http://localhost:3001/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)});\n  // }\n  // // File content to be displayed after\n  // // file upload is complete\n  // fileData = () => {\n  //   if (this.state.selectedFile) {\n  //     return (\n  //       <div>\n  //         <h5>File Details:</h5>\n  //         <p>File Name: {this.state.selectedFile.name}</p>\n  //         <p>File Type: {this.state.selectedFile.type}</p>\n  //         <p>\n  //           Last Modified:{\" \"}\n  //           {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //         </p>\n  //       </div>\n  //     );\n  //   } else {\n  //     return (\n  //       <div>\n  //         <br />\n  //         <h5>Choose before Pressing the Upload button</h5>\n  //       </div>\n  //     );\n  //   };\n  // }\n  // App()  {\n  // App_upload= () => {\n  //   const [files, setFiles] = React.useState([])\n  //   const removeFile = (filename) => {\n  //     setFiles(files.filter(file => file.name !== filename))\n  //   }\n  // }\n  // App_upload= () => {\n  // const [files, setFiles] = useState([])\n  // const removeFile = (filename) => {\n  //   setFiles(files.filter(file => file.name !== filename))\n  // }\n  //   return (\n  //     <div className=\"App_upload\">\n  //       <div className=\"title\">Upload file</div>\n  //       <FileUpload files={files} setFiles={setFiles}\n  //         removeFile={removeFile} />\n  //       <FileList files={files} removeFile={removeFile} />\n  //     </div>\n  //   );\n  // }\n  // FileUpload = ({ files, setFiles, removeFile }) => {\n  //   // function FileUpload ({ files, setFiles, removeFile })  {\n  //       const uploadHandler = (event) => {\n  //           const file = event.target.files[0];\n  //           if(!file) return;\n  //           file.isUploading = true;\n  //           setFiles([...files, file])\n  //           // upload file\n  //           // const formData = new FormData();\n  //           // formData.append(\n  //           //     // \"newFile\",\n  //           //     file.name,\n  //           //     file,\n  //           //     file.name\n  //           // )\n  //           // axios.post('http://localhost:8080/upload', formData)\n  //           axios.post('/upload', {newfile: (event.target.files[0], event.target.files[0].name)}\n  //           //     {\n  //           //     headers: {\n  //           //       \"Content-Type\": \"multipart/form-data\",\n  //           //     },\n  //           //   }\n  //             )\n  //               .then((res) => {\n  //                   file.isUploading = false;\n  //                   setFiles([...files, file])\n  //               })\n  //               .catch((err) => {\n  //                   // inform the user\n  //                   console.error(err)\n  //                   removeFile(file.name)\n  //               });\n  //       }\n  //     }\n  //   uploadHandler = ( { event, files, setFiles, removeFile }) => {\n  //     const file = event.target.files[0];\n  //     if(!file) return;\n  //     file.isUploading = true;\n  //     setFiles([...files, file])\n  //     // upload file\n  //     // const formData = new FormData();\n  //     // formData.append(\n  //     //     // \"newFile\",\n  //     //     file.name,\n  //     //     file,\n  //     //     file.name\n  //     // )\n  //     // axios.post('http://localhost:8080/upload', formData)\n  //     axios.post('/upload', {newfile: (event.target.files[0], event.target.files[0].name)},\n  //     //     {\n  //     //     headers: {\n  //     //       \"Content-Type\": \"multipart/form-data\",\n  //     //     },\n  //     //   }\n  //       )\n  //         .then((res) => {\n  //             file.isUploading = false;\n  //             setFiles([...files, file])\n  //         })\n  //         .catch((err) => {\n  //             // inform the user\n  //             console.error(err)\n  //             removeFile(file.name)\n  //         });\n  // }\n  // handleFile(e) { \n  //   // Getting the files from the input \n  //   let files = e.target.files[0]; \n  //   this.setState({ files }); \n  // } \n  // handleUpload(e) { \n  //   let files = this.state.files; \n  //   // let formData = new FormData(); \n  //   //Adding files to the formdata \n  //   // formData.append(\"image\", files); \n  //   // formData.append(\"name\", \"Name\"); \n  //   axios({ \n  //     // Endpoint to send files \n  //     url: \"http://localhost:3000/upload\", \n  //     method: \"POST\", \n  //     // Attaching the form data \n  //     data: {newfile: (e.target.files, e.target.files.name)}, \n  //   }) \n  //     .then((res) => {         \n  //       console.log(res);\n  //       console.log(res.files);}) // Handle the response from backend here \n  //     .catch((err) => { console.error(err)}); // Catch errors if any \n  // } \n\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.checkModelStatus(), 1000);\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress()\n    });\n\n    if (!this.state.downloading) {\n      this.timerID = setInterval(() => this.checkModelStatus, 5000000);\n    }\n  }\n\n  handleChange(event) {\n    inference(event.target.value).then(result => {\n      this.setState({\n        text: event.target.value,\n        data: result[1],\n        latency: result[0]\n      });\n    });\n    inference(event.target.value).then(result => {\n      this.setState({\n        text: text => this.Dashboard.setValue(text),\n        data: result[1],\n        latency: result[0]\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(FileProcessing, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"In-Browser Transformer Inference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          width: '400px',\n          height: '200px',\n          chartType: \"BarChart\",\n          data: this.state.data,\n          options: {\n            chartArea: {\n              width: '40%'\n            },\n            colors: ['purple'],\n            backgroundColor: '#282c34',\n            legend: {\n              textStyle: {\n                color: 'white',\n                fontSize: 10\n              },\n              labels: {\n                fontColor: 'white'\n              }\n            },\n            vAxis: {\n              textStyle: {\n                color: 'white',\n                fontSize: 13\n              }\n            },\n            hAxis: {\n              minValue: 5,\n              maxValue: 50,\n              textStyle: {\n                color: 'white'\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"File Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: this.onFileChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.onFileUpload,\n              children: \"Upload!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 9\n          }, this), this.fileData()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 7\n        }, this), this.state.downloading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"2\",\n            children: \"Downloading model from CDN to browser..\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '400px'\n            },\n            children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"8\",\n          cols: \"24\",\n          className: \"App-textarea\",\n          name: \"message\" //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n          // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n          // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n          ,\n          value: this.Dashboard.value,\n          onChange: e => this.Dashboard.setValue(e.target.value),\n          onDropRead: text => this.Dashboard.setValue(text),\n          textareaProps: {\n            // cols: 24,\n            // rows: 8,\n            placeholder: \"Drop one text file here...\"\n          } // onChange={this.Dashboard}  \n          // {this.Dashboard()} \n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"Inference Latency \", this.state.latency, \" ms\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"GitHub Repo: \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://github.com/jobergum/browser-ml-inference\",\n              children: \"browser-ml-inference\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 40\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"Model was trained on the \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",\n              children: \"GoEmotions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 52\n            }, this), \" dataset.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this);\n  }\n\n} // export default TextInputArea;\n\n\nexport default App; // const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","useState","FileUpload","FileList","FileProcessing","FontAwesomeIcon","faPlus","App","constructor","props","handleFileChange","event","setState","selectedFile","target","files","loaded","message","name","state","defaultmessage","handleUpload","preventDefault","uploading","data","FormData","append","post","onUploadProgress","ProgressEvent","Math","round","total","then","res","console","log","statusText","catch","err","text","latency","downloading","handleChange","bind","componentDidMount","timerID","setInterval","checkModelStatus","value","result","Dashboard","setValue","render","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue","onFileChange","onFileUpload","fileData","e","placeholder"],"sources":["/Users/nguyentrungchinh/project_19/src/App.jsx"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing';\n\n// import {uploadfile} from './uploadfile.js';\n\n// import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload/FileUpload.scss'\n// import axios from 'axios'\n\n\n\n// function App() {\n//   const [files, setFiles] = useState([])\n\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n// function App() {\n//   const [files, setFiles] = useState([])\n\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n\n\n//   componentDidMount= () =>{\n//     timerID = setInterval(\n//       () => checkModelStatus(),\n//       1000\n//     );\n//   }\n\n//   checkModelStatus= () => {\n//     setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     };\n//   }\n\n//   handleChange= (event) => {  \n//     inference(event.target.value).then( result => {\n//       this.setState({\n//         text : event.target.value,\n//         data:result[1],\n//         latency:result[0],\n//       });\n//     });\n//   }\n\n\n\n\n//   return (\n//     <div className=\"App\">\n\n//       <div>\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//       </div>\n\n\n\n//       <header className=\"App-header\">   \n//       <em>In-Browser Transformer Inference</em>\n//       <Chart  \n//         width={'400px'}\n//         height={'200px'}\n//         chartType=\"BarChart\"\n//         data={state.data}\n//         options={{\n//           chartArea: { width: '40%'},\n//           colors: ['purple'],\n//           backgroundColor: '#282c34',\n//           legend: { \n//             textStyle: {color: 'white', fontSize: 10},\n//             labels: {fontColor:'white'}\n//           },\n//           vAxis: {\n//             textStyle: {\n//             color: 'white',\n//             fontSize: 13\n//           }\n//           },\n//           hAxis: {\n//             minValue: 5,\n//             maxValue: 50,\n//             textStyle: {\n//               color: 'white'\n//             }\n//           }\n//       }}\n//       />\n\n\n\n\n\n      \n//       {state.downloading && \n//         <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//         <Box sx={{ width: '400px' }}>\n//         <LinearProgress />\n//         </Box> \n//         <p></p>\n//         </div>\n//       }\n\n\n//       <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n//        placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n//       </textarea>\n\n\n      \n//       {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n//       //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n//       // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n//         // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n//         value = {this.Dashboard.value}\n//         onChange={e => this.Dashboard.setValue(e.target.value)}\n//         onDropRead={text => this.Dashboard.setValue(text)}\n\n//         textareaProps={{\n//           // cols: 24,\n//           // rows: 8,\n//           placeholder: \"Drop one text file here...\"\n//         }}\n//         // onChange={this.Dashboard}  \n//         // {this.Dashboard()} \n//         ></textarea> */}\n\n\n//        <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n//       <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n//       <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n//       </header>\n\n\n\n\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n// class TextInputArea extends React.Component {\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n\n      files: null\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  // Dashboard = () => {\n  //   const [value , setValue] = React.useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n\n\n\n\n      // return (\n      //   <div style={{ display: \"flex\" }}>\n      //     <input type=\"file\" name=\"input\" onChange={handleChange}\n      //     // placeholder={this.state.text} autoFocus\n      //      />\n      //     <textarea\n \n      //       cols={30}\n      //       rows={20}\n      //       value={value}\n      //       onChange={setValue}\n      //       style={{ marginTop: 15, width: \"50%\" }}\n      //     ></textarea>\n      //   </div>\n      // );\n  // }\n\n\n\n\n  \n  // state = {\n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // }\n  \n  // // On file select (from the pop up)\n  // onFileChange = event => {\n  //   // Update the state\n  //   this.setState({ selectedFile: event.target.files[0] });\n  // }\n  \n  // // On file upload (click the upload button)\n  // onFileUpload = () => {\n    \n  //   // Create an object of formData\n  //   // const formData = new FormData();\n  \n  //   // // Update the formData object\n  //   // formData.append(\n  //   //   \"myFile\",\n  //   //   this.state.selectedFile,\n  //   //   this.state.selectedFile.name\n  //   // );\n  \n  //   // Details of the uploaded file\n  //   console.log(this.state.selectedFile);\n  \n  //   // Request made to the backend api\n  //   // Send formData object\n\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n    \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n  //   //   },\n  //   // }\n  //   // );\n\n\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)}, \n    \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"67c784071bmsh339dd9d9dfa4776p1995bdjsn2731d6524052\",\n  //   //   },\n  //   // }\n  //   // );\n\n\n\n  //   axios.post(\"http://localhost:3001/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)});\n\n  // }\n  \n  // // File content to be displayed after\n  // // file upload is complete\n  // fileData = () => {\n  //   if (this.state.selectedFile) {\n  //     return (\n  //       <div>\n  //         <h5>File Details:</h5>\n  //         <p>File Name: {this.state.selectedFile.name}</p>\n  //         <p>File Type: {this.state.selectedFile.type}</p>\n  //         <p>\n  //           Last Modified:{\" \"}\n  //           {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //         </p>\n  //       </div>\n  //     );\n  //   } else {\n  //     return (\n  //       <div>\n  //         <br />\n  //         <h5>Choose before Pressing the Upload button</h5>\n  //       </div>\n  //     );\n  //   };\n  // }\n\n\n\n\n\n  // App()  {\n  // App_upload= () => {\n  //   const [files, setFiles] = React.useState([])\n  \n  //   const removeFile = (filename) => {\n  //     setFiles(files.filter(file => file.name !== filename))\n  //   }\n\n\n  // }\n\n\n\n// App_upload= () => {\n// const [files, setFiles] = useState([])\n\n// const removeFile = (filename) => {\n//   setFiles(files.filter(file => file.name !== filename))\n// }\n\n//   return (\n//     <div className=\"App_upload\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n\n\n\n\n\n// FileUpload = ({ files, setFiles, removeFile }) => {\n\n//   // function FileUpload ({ files, setFiles, removeFile })  {\n//       const uploadHandler = (event) => {\n//           const file = event.target.files[0];\n//           if(!file) return;\n//           file.isUploading = true;\n//           setFiles([...files, file])\n  \n//           // upload file\n//           // const formData = new FormData();\n//           // formData.append(\n              \n//           //     // \"newFile\",\n//           //     file.name,\n//           //     file,\n//           //     file.name\n//           // )\n  \n//           // axios.post('http://localhost:8080/upload', formData)\n//           axios.post('/upload', {newfile: (event.target.files[0], event.target.files[0].name)}\n//           //     {\n//           //     headers: {\n//           //       \"Content-Type\": \"multipart/form-data\",\n//           //     },\n//           //   }\n//             )\n//               .then((res) => {\n//                   file.isUploading = false;\n//                   setFiles([...files, file])\n//               })\n//               .catch((err) => {\n//                   // inform the user\n//                   console.error(err)\n//                   removeFile(file.name)\n//               });\n//       }\n//     }\n\n\n\n  //   uploadHandler = ( { event, files, setFiles, removeFile }) => {\n  //     const file = event.target.files[0];\n  //     if(!file) return;\n  //     file.isUploading = true;\n  //     setFiles([...files, file])\n\n  //     // upload file\n  //     // const formData = new FormData();\n  //     // formData.append(\n          \n  //     //     // \"newFile\",\n  //     //     file.name,\n  //     //     file,\n  //     //     file.name\n  //     // )\n\n  //     // axios.post('http://localhost:8080/upload', formData)\n  //     axios.post('/upload', {newfile: (event.target.files[0], event.target.files[0].name)},\n  //     //     {\n  //     //     headers: {\n  //     //       \"Content-Type\": \"multipart/form-data\",\n  //     //     },\n  //     //   }\n  //       )\n  //         .then((res) => {\n  //             file.isUploading = false;\n  //             setFiles([...files, file])\n  //         })\n  //         .catch((err) => {\n  //             // inform the user\n  //             console.error(err)\n  //             removeFile(file.name)\n  //         });\n  // }\n\n\n\n\n  // handleFile(e) { \n  //   // Getting the files from the input \n  //   let files = e.target.files[0]; \n  //   this.setState({ files }); \n  // } \n\n\n  // handleUpload(e) { \n  //   let files = this.state.files; \n  \n  //   // let formData = new FormData(); \n  \n  //   //Adding files to the formdata \n  //   // formData.append(\"image\", files); \n  //   // formData.append(\"name\", \"Name\"); \n  \n  //   axios({ \n  //     // Endpoint to send files \n  //     url: \"http://localhost:3000/upload\", \n  //     method: \"POST\", \n\n  //     // Attaching the form data \n  //     data: {newfile: (e.target.files, e.target.files.name)}, \n  //   }) \n  //     .then((res) => {         \n  //       console.log(res);\n  //       console.log(res.files);}) // Handle the response from backend here \n  //     .catch((err) => { console.error(err)}); // Catch errors if any \n  // } \n\n\n\n\n  handleFileChange = (event) => {\n    this.setState({\n      selectedFile: event.target.files[0],\n      loaded: 0,\n      message: event.target.files[0]\n        ? event.target.files[0].name\n        : this.state.defaultmessage\n    });\n  };\n\n  state = { selectedFile: null, loaded: null };\n\n  handleUpload = (event) => {\n    event.preventDefault();\n    if (this.state.uploading) return;\n    if (!this.state.selectedFile) {\n      this.setState({ message: 'Select a file first' });\n      return;\n    }\n    this.setState({ uploading: true });\n    const data = new FormData();\n    data.append('file', this.state.selectedFile, this.state.selectedFile.name);\n    axios\n      .post('/upload', data, {\n        onUploadProgress: (ProgressEvent) => {\n          this.setState({\n            loaded: Math.round(\n              (ProgressEvent.loaded / ProgressEvent.total) * 100\n            )\n          });\n        }\n      })\n      .then((res) => {\n        this.setState({\n          selectedFile: null,\n          message: 'Uploaded successfully',\n          uploading: false\n        });\n        console.log(res.statusText);\n      })\n      .catch((err) => {\n        this.setState({\n          uploading: false,\n          message: 'Failed to upload'\n        });\n      });\n  };\n\n\n\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n\n\n  handleChange(event) {  \n    inference(event.target.value).then( result => {\n      this.setState({\n        text : event.target.value,\n        data:result[1],\n        latency:result[0],\n      });\n    });\n\n\n    inference(event.target.value).then( result => {\n      this.setState({\n        text : text => this.Dashboard.setValue(text),\n        data:result[1],\n        latency:result[0],\n      });\n    });\n\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n    \n          <FileProcessing />\n\n        \n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n\n\n      <div>\n          <h5>\n              File Upload\n          </h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>Upload!</button>\n        </div>\n        {this.fileData()}\n      </div>\n\n\n\n      \n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n      </textarea> */}\n\n\n      \n      <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {this.Dashboard.value}\n        onChange={e => this.Dashboard.setValue(e.target.value)}\n        onDropRead={text => this.Dashboard.setValue(text)}\n\n        textareaProps={{\n          // cols: 24,\n          // rows: 8,\n          placeholder: \"Drop one text file here...\"\n        }}\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea>\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header>\n\n\n\n\n    </div>   \n    );\n\n\n\n\n\n  }\n\n\n}\n// export default TextInputArea;\n\nexport default App;\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":";AAAA,OAAO,WAAP;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,OAA1B,C,CAEA;AACA;;AAEA,SAAQC,SAAR,QAAwB,gBAAxB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,uBAAR,QAAsC,gBAAtC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,YAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAEA;AAEA;;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,OAAO,8BAAP,C,CACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAQA;;;;AACA,MAAMC,GAAN,SAAkBd,KAAK,CAACC,SAAxB,CAAkC;EAChCc,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAkSnBC,gBAlSmB,GAkSCC,KAAD,IAAW;MAC5B,KAAKC,QAAL,CAAc;QACZC,YAAY,EAAEF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CADF;QAEZC,MAAM,EAAE,CAFI;QAGZC,OAAO,EAAEN,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,IACLJ,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsBG,IADjB,GAEL,KAAKC,KAAL,CAAWC;MALH,CAAd;IAOD,CA1SkB;;IAAA,KA4SnBD,KA5SmB,GA4SX;MAAEN,YAAY,EAAE,IAAhB;MAAsBG,MAAM,EAAE;IAA9B,CA5SW;;IAAA,KA8SnBK,YA9SmB,GA8SHV,KAAD,IAAW;MACxBA,KAAK,CAACW,cAAN;MACA,IAAI,KAAKH,KAAL,CAAWI,SAAf,EAA0B;;MAC1B,IAAI,CAAC,KAAKJ,KAAL,CAAWN,YAAhB,EAA8B;QAC5B,KAAKD,QAAL,CAAc;UAAEK,OAAO,EAAE;QAAX,CAAd;QACA;MACD;;MACD,KAAKL,QAAL,CAAc;QAAEW,SAAS,EAAE;MAAb,CAAd;MACA,MAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;MACAD,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoB,KAAKP,KAAL,CAAWN,YAA/B,EAA6C,KAAKM,KAAL,CAAWN,YAAX,CAAwBK,IAArE;MACA1B,KAAK,CACFmC,IADH,CACQ,SADR,EACmBH,IADnB,EACyB;QACrBI,gBAAgB,EAAGC,aAAD,IAAmB;UACnC,KAAKjB,QAAL,CAAc;YACZI,MAAM,EAAEc,IAAI,CAACC,KAAL,CACLF,aAAa,CAACb,MAAd,GAAuBa,aAAa,CAACG,KAAtC,GAA+C,GADzC;UADI,CAAd;QAKD;MAPoB,CADzB,EAUGC,IAVH,CAUSC,GAAD,IAAS;QACb,KAAKtB,QAAL,CAAc;UACZC,YAAY,EAAE,IADF;UAEZI,OAAO,EAAE,uBAFG;UAGZM,SAAS,EAAE;QAHC,CAAd;QAKAY,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,UAAhB;MACD,CAjBH,EAkBGC,KAlBH,CAkBUC,GAAD,IAAS;QACd,KAAK3B,QAAL,CAAc;UACZW,SAAS,EAAE,KADC;UAEZN,OAAO,EAAE;QAFG,CAAd;MAID,CAvBH;IAwBD,CAhVkB;;IAEjB,KAAKE,KAAL,GAAa;MACXqB,IAAI,EAAE,gEADK;MAEXhB,IAAI,EAAC5B,WAFM;MAGX6C,OAAO,EAAC,GAHG;MAIXC,WAAW,EAAC7C,uBAAuB,EAJxB;MAMXkB,KAAK,EAAE;IANI,CAAb;IASA,KAAK4B,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;EACD,CAb+B,CAgBhC;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAKI;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACJ;EAMA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAMA;EACA;EACA;EAEA;EACA;EACA;EAGA;EAIF;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAMA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIE;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;E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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from\"/Users/nguyentrungchinh/project_14/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/nguyentrungchinh/project_14/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/Users/nguyentrungchinh/project_14/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/Users/nguyentrungchinh/project_14/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/nguyentrungchinh/project_14/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import'./App.css';import React from'react';import{inference}from'./inference.js';import{columnNames}from'./inference.js';import{modelDownloadInProgress}from'./inference.js';import Chart from\"react-google-charts\";import Box from'@mui/material/Box';import LinearProgress from'@mui/material/LinearProgress';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TextInputArea=/*#__PURE__*/function(_React$Component){_inherits(TextInputArea,_React$Component);var _super=_createSuper(TextInputArea);function TextInputArea(props){var _this;_classCallCheck(this,TextInputArea);_this=_super.call(this,props);_this.state={text:'Enter text to classify emotion, model trained on English text.',data:columnNames,latency:0.0,downloading:modelDownloadInProgress()};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));return _this;}_createClass(TextInputArea,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.timerID=setInterval(function(){return _this2.checkModelStatus();},1000);}},{key:\"checkModelStatus\",value:function checkModelStatus(){var _this3=this;this.setState({downloading:modelDownloadInProgress()});if(!this.state.downloading){this.timerID=setInterval(function(){return _this3.checkModelStatus;},5000000);}}},{key:\"handleChange\",value:function handleChange(event){var _this4=this;inference(event.target.value).then(function(result){_this4.setState({text:event.target.value,data:result[1],latency:result[0]});});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"em\",{children:\"In-Browser Transformer Inference\"}),/*#__PURE__*/_jsx(Chart,{width:'400px',height:'200px',chartType:\"BarChart\",data:this.state.data,options:{chartArea:{width:'40%'},colors:['purple'],backgroundColor:'#282c34',legend:{textStyle:{color:'white',fontSize:10},labels:{fontColor:'white'}},vAxis:{textStyle:{color:'white',fontSize:13}},hAxis:{minValue:5,maxValue:50,textStyle:{color:'white'}}}}),this.state.downloading&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"font\",{size:\"2\",children:\"Downloading model from CDN to browser..\"}),/*#__PURE__*/_jsx(Box,{sx:{width:'400px'},children:/*#__PURE__*/_jsx(LinearProgress,{})}),/*#__PURE__*/_jsx(\"p\",{})]}),/*#__PURE__*/_jsx(\"textarea\",{rows:\"8\",cols:\"24\",className:\"App-textarea\",name:\"message\",placeholder:this.state.text,autoFocus:true,onChange:this.handleChange}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Inference Latency \",this.state.latency,\" ms\"]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"GitHub Repo: \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/jobergum/browser-ml-inference\",children:\"browser-ml-inference\"})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Model was trained on the \",/*#__PURE__*/_jsx(\"a\",{href:\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",children:\"GoEmotions\"}),\" dataset.\"]})})]})});}}]);return TextInputArea;}(React.Component);export default TextInputArea;","map":{"version":3,"names":["React","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","TextInputArea","props","state","text","data","latency","downloading","handleChange","bind","timerID","setInterval","checkModelStatus","setState","event","target","value","then","result","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue","Component"],"sources":["/Users/nguyentrungchinh/project_14/src/App.js"],"sourcesContent":["import './App.css';\n\nimport React from 'react';\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nclass TextInputArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange(event) {  \n    inference(event.target.value).then( result => {\n      this.setState({\n        text : event.target.value,\n        data:result[1],\n        latency:result[0],\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />  \n      \n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n      <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n      </textarea>\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      </header>\n    </div>   \n    );\n  }\n}\nexport default TextInputArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
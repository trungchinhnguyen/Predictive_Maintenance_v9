{"ast":null,"code":"import _classCallCheck from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import'./App.css';import axios from'axios';// import React, { Component } from 'react';\nimport React from'react';import{Component}from'react';// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\nimport{inference}from'./inference.js';import{columnNames}from'./inference.js';import{modelDownloadInProgress}from'./inference.js';import Chart from\"react-google-charts\";import Box from'@mui/material/Box';import LinearProgress from'@mui/material/LinearProgress';import{useState}from'react';import'./App.scss';import FileUpload from'./FileUpload/FileUpload';import FileList from'./FileList/FileList';import FileProcessing from'./FileProcessing';// import Dashboard from './Dashboard';\nimport'./Dashboard.css';// import {textValue_exp} from './Dashboard.jsx';\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n// import React from 'react'\nimport{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faPlus}from'@fortawesome/free-solid-svg-icons';import'./FileUpload/FileUpload.scss';// import axios from 'axios'\nimport ReactFileReader from'react-file-reader';import{CsvToHtmlTable}from'react-csv-to-table';// import processCSV from './processCSV.js';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TextInputArea=/*#__PURE__*/function(_React$Component){_inherits(TextInputArea,_React$Component);var _super=_createSuper(TextInputArea);// class App extends React.Component {\nfunction TextInputArea(props){var _this;_classCallCheck(this,TextInputArea);_this=_super.call(this,props);_this.onFileChange=function(event){// const [textValue, setTextValue] = useState(\"\");\n_this.setState({selectedFile:event.target.files[0]});var file=event.target.files[0];var reader=new FileReader();reader.onload=function(event){var file=event.target.result;console.log('content',file);// this.setState({ text: file });\n// setTextValue(file);\n// inference(file)\n};reader.onerror=function(e){return alert(e.target.error.name);};reader.readAsText(file);// const textValue = reader.readAsText(file);\n// this.setState({ text: textValue });\n// inference.then( result => {\n//   this.setState({\n//     // text : file,\n//     data:result[1],\n//     latency:result[0],\n//   })\n// })\n};_this.onFileUpload=function(){// Create an object of formData\n// const formData = new FormData();\n// // Update the formData object\n// formData.append(\n//   \"myFile\",\n//   this.state.selectedFile,\n//   this.state.selectedFile.name\n// );\n// Details of the uploaded file\nconsole.log(_this.state.selectedFile);console.log(_this.state.selectedFile.name);//  console.log(event.target.files[0]);\n// Request made to the backend api\n// Send formData object\n// axios.post(\"/upload\", formData);\n// axios.post(\"/upload\", {file: (this.state.selectedFile,this.state.selectedFile.name)});\naxios.post('/upload',{file:(_this.state.selectedFile,_this.state.selectedFile.name)}//     {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//     },\n//   }\n).then(function(res){console.log(res);}).catch(function(err){// inform the user\nconsole.error(err);// removeFile(file.name)\n});axios.get(\"/upload\").then(function(res){// const text = res;\n// const text = 'test';\nvar data=res.data;});//   processCSV = (str, delim=',') => {\n//     const headers = str.slice(0,str.indexOf('\\n')).split(delim);\n//     const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n//     const newArray = rows.map( row => {\n//         const values = row.split(delim);\n//         const eachObject = headers.reduce((obj, header, i) => {\n//             obj[header] = values[i];\n//             return obj;\n//         }, {})\n//         return eachObject;\n//     })\n//   let reader = new FileReader();\n//   reader.onload = () => {\n//     // Use reader.result\n//       array = new Int8Array(reader.result)\n//   }\n//   reader.readAsArrayBuffer(newArray)\n// }\n//   let convert = new FileReader();\n//   convert.onload = () => {\n//     // Use reader.result\n//     str = convert.result\n//     console.log(str);\n//     headers = str.slice(0,str.indexOf('\\n')).split(',');\n//     rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n//     newArray = rows.map( row => {\n//       const values = row.split(',');\n//       const eachObject = headers.reduce((obj, header, i) => {\n//           obj[header] = values[i];\n//           return obj;\n//       }, {})\n//       return eachObject;\n//    })\n//    this.setState({\n//     arrary: newArray\n//   })\n//   }\n//   convert.readAsArrayBuffer(newArray)\nvar reader=new FileReader();reader.onload=function(){// Use reader.result\n// let convert = new FileReader();\n//   convert.onload = () => {\n//     // Use reader.result\n//     const str = convert.result\n//     console.log(str);\n//     const headers = str.slice(0,str.indexOf('\\n')).split(',');\n//     const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n//     const newArray = rows.map( row => {\n//       const values = row.split(',');\n//       const eachObject = headers.reduce((obj, header, i) => {\n//           obj[header] = values[i];\n//           return obj;\n//       }, {})\n//       return eachObject;\n//   })\n//   this.setState({\n//     arrary: newArray\n//   })\n//   }\n//   convert.readAsArrayBuffer(this.state.selectedFile)\nconsole.log(reader.result);// processCSV(reader.result);\n_this.processCSV(reader.result,\",\");_this.setState({csvData:reader.result,text:reader.result});};reader.readAsText(_this.state.selectedFile);inference(_this.state.text).then(function(result){_this.setState({text:_this.state.text,data:result[1],latency:result[0]});});};_this.state={text:'Enter text to classify emotion, model trained on English text.',data:columnNames,latency:0.0,downloading:modelDownloadInProgress(),selectedFile:null,csvData:'',array:[],columns:null// name:'',\n};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));_this.CSVToArray=_this.CSVToArray.bind(_assertThisInitialized(_this));_this.processCSV=_this.processCSV.bind(_assertThisInitialized(_this));// this.onFileChange = this.onFileChange.bind(this);\n// this.onFileUpload = this.onFileUpload.bind(this);\n// [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n// this.FileReader = this.FileReader.bind(this);\nreturn _this;}// Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     // <div className=\"Dashboard\">\n//     <div className=\"App\">\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//     </div>\n//   );\n// };\n//   handleChange(event) { \n//     axios.get('/upload')\n//     .then(response => {\n//       // Convert data to CSV format(optional)\n//       const file = response.files[0];\n//     })\n//     .catch(error => {\n//       // Handle errors\n//       console.error(error);\n//     });\n//     // const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = response.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(response.error.name);\n//     reader.readAsText(file);\n//   inference(textValue).then( result => {\n//     this.setState({\n//       text : textValue,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\n// onFileChange(e) {\n//   const file = e.target.files[0];\n//   console.log(file.name);\n//   console.log(file.size);\n//   console.log(file.type);\n// }\n// onFileChange(e) {\n//   const file = e.target.files;\n//   console.log(file);\n// }\n_createClass(TextInputArea,[{key:\"processCSV\",value:// fileData = () => {\n//   if (this.state.selectedFile) {\n//       return (\n//           <div>\n//               <h5>File Details:</h5>\n//               <p>File Name: {this.state.selectedFile.name}</p>\n//               <p>File Type: {this.state.selectedFile.type}</p>\n//               <p>\n//                   Last Modified:{\" \"}\n//                   {this.state.selectedFile.lastModifiedDate.toDateString()}\n//               </p>\n//           </div>\n//       );\n//   } else {\n//       return (\n//           <div>\n//               <br />\n//               <h5>Choose before Pressing the Upload button</h5>\n//           </div>\n//       );\n//   }\n// };\n// componentWillMount(){\n//   axios.get(`/upload`)\n//   .then(res => {\n//     const text = res.data;\n//     this.setState({ text });\n//   })\n// }\n// handleFiles = files => {\n//   let reader = new FileReader();\n//   reader.onload = () => {\n//     // Use reader.result\n//     this.setState({\n//       csvData: reader.result\n//     })\n//   }\n//   reader.readAsText(files[0]);\n//   inference(this.state.csvData).then( result => {\n//     this.setState({\n//       text : this.state.text,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\nfunction processCSV(str){var delim=arguments.length>1&&arguments[1]!==undefined?arguments[1]:',';var headers=str.slice(0,str.indexOf('\\n')).split(delim);var rows=str.slice(str.indexOf('\\n')+1).split('\\n');var newArray=rows.map(function(row){var values=row.split(delim);var eachObject=headers.reduce(function(obj,header,i){obj[header]=values[i];return obj;},{});return eachObject;});var reader=new FileReader();reader.onload=function(){// Use reader.result\nvar array=new Int8Array(reader.result);};reader.readAsArrayBuffer(newArray);}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.timerID=setInterval(function(){return _this2.checkModelStatus();},1000);// axios.get(`/upload`)\n// .then(res => {\n//   const text = res.data;\n//   this.setState({ text });\n// })\n}},{key:\"checkModelStatus\",value:function checkModelStatus(){var _this3=this;this.setState({downloading:modelDownloadInProgress()});if(!this.state.downloading){this.timerID=setInterval(function(){return _this3.checkModelStatus;},5000000);}}},{key:\"handleChange\",value:function handleChange(event){var _this4=this;// Dashboard = (e) => {\n// const [textValue, setTextValue] = useState(\"\");\n// const handleChange = (e) => {\n// event.preventDefault() \n// this.setState({ selectedFile : event.target.files[0]});\n// this.setState({ name: event.target.files[0].name });\n// axios.get(`/upload`)\n// .then(res => {\n//   const text = res.content;\n//   this.setState({ text });\n// })\n// const file = event.target.files[0];\n// let reader = new FileReader();\n// reader.onload(event).then(result => {\n//   const file = event.target.result;\n//   console.log(file);\n// this.setState({ text: file });\n// inference(file).then( result => {\n//   this.setState({\n//     text : file,\n//     data:result[1],\n//     latency:result[0],\n//   });\n// });\n// });\n// reader.onerror(event).alert(event.target.error.name);\n// reader.readAsText(file);\n// axios.get(`/upload`)\n// .then(res => {\n//   const text = res.data;\n//   this.setState({ text });\n// });\ninference(event.target.value).then(function(result){_this4.setState({text:event.target.value,data:result[1],latency:result[0]});});}},{key:\"CSVToArray\",value:function CSVToArray(strData,strDelimiter){strDelimiter=strDelimiter||\",\";var objPattern=new RegExp(\"(\\\\\"+strDelimiter+\"|\\\\r?\\\\n|\\\\r|^)\"+\"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\"+\"([^\\\"\\\\\"+strDelimiter+\"\\\\r\\\\n]*))\",\"gi\");var arrData=[];var headers=[];var headersFound=false;var headerIndex=0;var arrMatches=null;while(arrMatches=objPattern.exec(strData)){var strMatchedDelimiter=arrMatches[1];if(strMatchedDelimiter.length&&strMatchedDelimiter!==strDelimiter){arrData.push({});headersFound=true;headerIndex=0;}var strMatchedValue=void 0;if(arrMatches[2]){strMatchedValue=arrMatches[2].replace(new RegExp(\"\\\"\\\"\",\"g\"),\"\\\"\");}else{strMatchedValue=arrMatches[3];}if(!headersFound){headers.push(strMatchedValue);}else{arrData[arrData.length-1][headers[headerIndex]]=strMatchedValue;headerIndex++;}}return arrData;}// handleSubmit = event => {\n//   event.preventDefault();\n//   // const user = {\n//   //   name: this.state.name\n//   // };\n//   // axios.post(`/upload`, { user })\n//   axios.post('/upload', {file: (this.state.file, this.state.name)})\n//   // axios.post(`/upload`, { name: this.state.name })\n//     .then(res => {\n//       console.log(res);\n//       console.log(res.data);\n//     })\n//     .catch((err) => {\n//       // inform the user\n//       console.error(err)\n//       // removeFile(file.name)\n//   })\n// }\n//   handleChange (event) {  \n//   inference(event.target.value).then( result => {\n//     this.setState({\n//       text : event.target.value,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\n// handleChange(event) { \n//   axios.get('/upload')\n//   .then(response => {\n//     // Convert data to CSV format(optional)\n//     const file = response.files[0];\n//   })\n//   .catch(error => {\n//     // Handle errors\n//     console.error(error);\n//   });\n//   // const file = e.target.files[0];\n//   let reader = new FileReader();\n//   reader.onload = (e) => {\n//     const file = response.result;\n//     console.log(file);\n//     setTextValue(file);\n//   };\n//   reader.onerror = (e) => alert(response.error.name);\n//   reader.readAsText(file);\n// inference(textValue).then( result => {\n//   this.setState({\n//     text : textValue,\n//     data:result[1],\n//     latency:result[0],\n//   });\n// });\n// }\n// Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     axios.get('/upload')\n//     .then(response => {\n//       // Convert data to CSV format(optional)\n//       const file = response.file;\n//     })\n//     .catch(error => {\n//       // Handle errors\n//       console.error(error);\n//     });\n//     // const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div className=\"Dashboard\">\n//   {/* <div className=\"App\">  */}\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//     </div>\n//   );\n// };\n// handleChange (event) {  \n//   inference(event.target.value).then( result => {\n//     this.setState({\n//       text : event.target.value,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\n// render() {\n},{key:\"render\",value:function render(){// const [state, setState] = useState(null);\n// const [textValue, setTextValue] = this.useState(\"\");\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"em\",{children:\"In-Browser Transformer Inference\"}),/*#__PURE__*/_jsx(Chart,{width:'400px',height:'200px',chartType:\"BarChart\",data:this.state.data,options:{chartArea:{width:'40%'},colors:['purple'],backgroundColor:'#282c34',legend:{textStyle:{color:'white',fontSize:10},labels:{fontColor:'white'}},vAxis:{textStyle:{color:'white',fontSize:13}},hAxis:{minValue:5,maxValue:50,textStyle:{color:'white'}}}}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"File Upload!\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:this.onFileChange}),/*#__PURE__*/_jsx(\"button\",{onClick:this.onFileUpload,children:\"Upload!\"}),/*#__PURE__*/_jsx(ReactFileReader,{handleFiles:this.handleFiles,fileTypes:'.csv'}),/*#__PURE__*/_jsx(\"textarea\",{cols:30,rows:20,value:this.state.text// value={this.state.csvData}\n,onChange:this.onFileChange,style:{marginTop:15,width:\"50%\"}})]})]}),this.state.downloading&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"font\",{size:\"2\",children:\"Downloading model from CDN to browser..\"}),/*#__PURE__*/_jsx(Box,{sx:{width:'400px'},children:/*#__PURE__*/_jsx(LinearProgress,{})}),/*#__PURE__*/_jsx(\"p\",{})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Inference Latency \",this.state.latency,\" ms\"]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"GitHub Repo: \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/jobergum/browser-ml-inference\",children:\"browser-ml-inference\"})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Model was trained on the \",/*#__PURE__*/_jsx(\"a\",{href:\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",children:\"GoEmotions\"}),\" dataset.\"]})})]})});}}]);return TextInputArea;}(React.Component);export default TextInputArea;// export default App;\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","useState","FileUpload","FileList","FileProcessing","FontAwesomeIcon","faPlus","ReactFileReader","CsvToHtmlTable","TextInputArea","props","onFileChange","event","setState","selectedFile","target","files","file","reader","FileReader","onload","result","console","log","onerror","e","alert","error","name","readAsText","onFileUpload","state","post","then","res","catch","err","get","data","processCSV","csvData","text","latency","downloading","array","columns","handleChange","bind","CSVToArray","str","delim","headers","slice","indexOf","split","rows","newArray","map","row","values","eachObject","reduce","obj","header","i","Int8Array","readAsArrayBuffer","timerID","setInterval","checkModelStatus","value","strData","strDelimiter","objPattern","RegExp","arrData","headersFound","headerIndex","arrMatches","exec","strMatchedDelimiter","length","push","strMatchedValue","replace","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue","handleFiles","marginTop"],"sources":["/Users/nguyentrungchinh/project_19/src/App.jsx"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing';\n// import Dashboard from './Dashboard';\nimport './Dashboard.css';\n\n\n// import {textValue_exp} from './Dashboard.jsx';\n\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n\n// import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload/FileUpload.scss'\n// import axios from 'axios'\n\nimport ReactFileReader from 'react-file-reader';\nimport { CsvToHtmlTable } from 'react-csv-to-table';\n\n\n// import processCSV from './processCSV.js';\n\n \n\nclass TextInputArea extends React.Component {\n// class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n      selectedFile: null,\n      csvData: '',\n      array: [],\n      columns: null\n      // name:'',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.CSVToArray = this.CSVToArray.bind(this);\n    this.processCSV = this.processCSV.bind(this);\n\n    // this.onFileChange = this.onFileChange.bind(this);\n    // this.onFileUpload = this.onFileUpload.bind(this);\n    // [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n    // this.FileReader = this.FileReader.bind(this);\n  }\n\n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     // <div className=\"Dashboard\">\n  //     <div className=\"App\">\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n\n\n  //   handleChange(event) { \n      \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.files[0];\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n\n  //     reader.onload = (e) => {\n  //       const file = response.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(response.error.name);\n  //     reader.readAsText(file);\n  \n\n      \n  //   inference(textValue).then( result => {\n  //     this.setState({\n  //       text : textValue,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n  // onFileChange(e) {\n  //   const file = e.target.files[0];\n  //   console.log(file.name);\n  //   console.log(file.size);\n  //   console.log(file.type);\n  // }\n\n  // onFileChange(e) {\n  //   const file = e.target.files;\n  //   console.log(file);\n  // }\n\n  onFileChange =event => {\n    // const [textValue, setTextValue] = useState(\"\");\n    this.setState({ selectedFile: event.target.files[0] });\n\n          const file = event.target.files[0];\n      \n          let reader = new FileReader();\n      \n          reader.onload = function(event) {\n            const file = event.target.result;\n            console.log( 'content', file);\n            // this.setState({ text: file });\n            // setTextValue(file);\n\n            // inference(file)\n    \n\n          };\n\n          reader.onerror = (e) => alert(e.target.error.name);\n          reader.readAsText(file); \n\n          // const textValue = reader.readAsText(file);\n\n          // this.setState({ text: textValue });\n\n          // inference.then( result => {\n          //   this.setState({\n          //     // text : file,\n          //     data:result[1],\n          //     latency:result[0],\n          //   })\n    \n          // })\n\n\n  }\n\n\n  // showFile = async (e) => { \n//   showFile = async () => { \n//     // e.preventDefault() \n//     const reader = new FileReader() \n//     reader.onload = async () => { \n//        const text = (this.state.selectedFile) \n//        console.log(text) \n//        alert(text) \n//     }; \n//     reader.readAsText(this.state.selectedFile) \n//  } \n\n\n\n  onFileUpload=() => {\n    // Create an object of formData\n    // const formData = new FormData();\n\n    // // Update the formData object\n    // formData.append(\n    //   \"myFile\",\n    //   this.state.selectedFile,\n    //   this.state.selectedFile.name\n    // );\n\n    // Details of the uploaded file\n    console.log(this.state.selectedFile);\n    console.log(this.state.selectedFile.name);\n      //  console.log(event.target.files[0]);\n\n    // Request made to the backend api\n    // Send formData object\n    // axios.post(\"/upload\", formData);\n    // axios.post(\"/upload\", {file: (this.state.selectedFile,this.state.selectedFile.name)});\n\n    axios.post('/upload', {file: (this.state.selectedFile, this.state.selectedFile.name)}\n        //     {\n        //     headers: {\n        //       \"Content-Type\": \"multipart/form-data\",\n        //     },\n        //   }\n          )\n          .then((res) => {\n            console.log(res);\n            })\n            .catch((err) => {\n                // inform the user\n                console.error(err)\n                // removeFile(file.name)\n            })\n\n      axios.get(`/upload`)\n          .then(res => {\n            // const text = res;\n            // const text = 'test';\n\n              const data = res.data;\n\n        })\n\n\n\n\n      //   processCSV = (str, delim=',') => {\n      //     const headers = str.slice(0,str.indexOf('\\n')).split(delim);\n      //     const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n  \n      //     const newArray = rows.map( row => {\n      //         const values = row.split(delim);\n      //         const eachObject = headers.reduce((obj, header, i) => {\n      //             obj[header] = values[i];\n      //             return obj;\n      //         }, {})\n      //         return eachObject;\n      //     })\n\n      //   let reader = new FileReader();\n\n      //   reader.onload = () => {\n      //     // Use reader.result\n      //       array = new Int8Array(reader.result)\n      //   }\n  \n      //   reader.readAsArrayBuffer(newArray)\n      // }\n\n\n\n\n\n\n      //   let convert = new FileReader();\n\n      //   convert.onload = () => {\n      //     // Use reader.result\n\n\n      //     str = convert.result\n      //     console.log(str);\n      \n      //     headers = str.slice(0,str.indexOf('\\n')).split(',');\n      //     rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n\n      //     newArray = rows.map( row => {\n      //       const values = row.split(',');\n      //       const eachObject = headers.reduce((obj, header, i) => {\n      //           obj[header] = values[i];\n      //           return obj;\n      //       }, {})\n      //       return eachObject;\n      //    })\n\n      //    this.setState({\n      //     arrary: newArray\n         \n      //   })\n\n      //   }\n      //   convert.readAsArrayBuffer(newArray)\n\n\n\n\n        let reader = new FileReader();\n\n        reader.onload = () => {\n          // Use reader.result\n\n\n\n\n            // let convert = new FileReader();\n\n            //   convert.onload = () => {\n            //     // Use reader.result\n    \n            //     const str = convert.result\n            //     console.log(str);\n            \n            //     const headers = str.slice(0,str.indexOf('\\n')).split(',');\n            //     const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n      \n            //     const newArray = rows.map( row => {\n            //       const values = row.split(',');\n            //       const eachObject = headers.reduce((obj, header, i) => {\n            //           obj[header] = values[i];\n            //           return obj;\n            //       }, {})\n            //       return eachObject;\n            //   })\n      \n            //   this.setState({\n            //     arrary: newArray\n              \n            //   })\n      \n            //   }\n            //   convert.readAsArrayBuffer(this.state.selectedFile)\n\n\n            console.log(reader.result);\n\n            // processCSV(reader.result);\n\n            this.processCSV(reader.result, \",\");\n\n          this.setState({\n            csvData: reader.result, \n            text: reader.result\n          })\n        }\n        reader.readAsText(this.state.selectedFile);\n\n\n\n\n        inference(this.state.text).then( result => {\n          this.setState({\n            text : this.state.text,\n            data:result[1],\n            latency:result[0],\n          });\n    \n        });\n\n     };\n\n  // fileData = () => {\n \n  //   if (this.state.selectedFile) {\n\n  //       return (\n  //           <div>\n  //               <h5>File Details:</h5>\n  //               <p>File Name: {this.state.selectedFile.name}</p>\n\n  //               <p>File Type: {this.state.selectedFile.type}</p>\n\n  //               <p>\n  //                   Last Modified:{\" \"}\n  //                   {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //               </p>\n\n  //           </div>\n  //       );\n  //   } else {\n  //       return (\n  //           <div>\n  //               <br />\n  //               <h5>Choose before Pressing the Upload button</h5>\n  //           </div>\n  //       );\n  //   }\n  // };\n\n\n  // componentWillMount(){\n\n  //   axios.get(`/upload`)\n  //   .then(res => {\n  //     const text = res.data;\n  //     this.setState({ text });\n  //   })\n\n\n  // }\n\n\n  // handleFiles = files => {\n  //   let reader = new FileReader();\n  //   reader.onload = () => {\n  //     // Use reader.result\n  //     this.setState({\n  //       csvData: reader.result\n  //     })\n  //   }\n  //   reader.readAsText(files[0]);\n\n  //   inference(this.state.csvData).then( result => {\n  //     this.setState({\n  //       text : this.state.text,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n\n  //   });\n\n\n  // }\n\n\n    processCSV(str, delim=',') {\n      const headers = str.slice(0,str.indexOf('\\n')).split(delim);\n      const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n\n      const newArray = rows.map( row => {\n          const values = row.split(delim);\n          const eachObject = headers.reduce((obj, header, i) => {\n              obj[header] = values[i];\n              return obj;\n          }, {})\n          return eachObject;\n      })\n\n    let reader = new FileReader();\n\n    reader.onload = () => {\n      // Use reader.result\n        const array = new Int8Array(reader.result)\n    }\n\n    reader.readAsArrayBuffer(newArray)\n  }\n\n\n  componentDidMount() {\n\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n\n    // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.data;\n    //   this.setState({ text });\n\n    // })\n\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange (event) {  \n  \n        // Dashboard = (e) => {\n        // const [textValue, setTextValue] = useState(\"\");\n        // const handleChange = (e) => {\n\n        // event.preventDefault() \n\n        // this.setState({ selectedFile : event.target.files[0]});\n\n        // this.setState({ name: event.target.files[0].name });\n\n          // axios.get(`/upload`)\n          // .then(res => {\n          //   const text = res.content;\n          //   this.setState({ text });\n          // })\n\n\n          // const file = event.target.files[0];\n      \n          // let reader = new FileReader();\n      \n          // reader.onload(event).then(result => {\n          //   const file = event.target.result;\n          //   console.log(file);\n            // this.setState({ text: file });\n\n            // inference(file).then( result => {\n            //   this.setState({\n            //     text : file,\n            //     data:result[1],\n            //     latency:result[0],\n            //   });\n      \n            // });\n\n\n          // });\n\n          // reader.onerror(event).alert(event.target.error.name);\n          // reader.readAsText(file);\n\n\n          // axios.get(`/upload`)\n          // .then(res => {\n          //   const text = res.data;\n          //   this.setState({ text });\n      \n          // });\n          \n          inference(event.target.value).then( result => {\n            this.setState({\n              text : event.target.value,\n              data:result[1],\n              latency:result[0],\n            });\n    \n          });\n    \n    }\n\n\n    CSVToArray( strData, strDelimiter ){\n      strDelimiter = (strDelimiter || \",\");\n      let objPattern = new RegExp(\n        (\n          \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n          \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n          \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n        ),\n        \"gi\");\n\n      let arrData = [];\n      let headers = [];\n      let headersFound = false;\n      let headerIndex = 0;\n\n      let arrMatches = null;\n\n      while(arrMatches = objPattern.exec( strData )) {\n          let strMatchedDelimiter = arrMatches[ 1 ];\n          if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {\n              arrData.push( {} );\n              headersFound = true;\n              headerIndex = 0;\n          }\n\n          let strMatchedValue;\n          if (arrMatches[2]) {\n              strMatchedValue = arrMatches[2].replace(new RegExp( \"\\\"\\\"\", \"g\" ),\"\\\"\");\n          } else {\n              strMatchedValue = arrMatches[3];\n          }\n\n          if (!headersFound) {\n            headers.push(strMatchedValue);\n          } else {\n            arrData[arrData.length -1][headers[headerIndex]] = strMatchedValue;\n            headerIndex ++;\n          }\n      }\n      return arrData;\n  }\n\n\n    // handleSubmit = event => {\n    //   event.preventDefault();\n  \n    //   // const user = {\n    //   //   name: this.state.name\n    //   // };\n  \n    //   // axios.post(`/upload`, { user })\n\n    //   axios.post('/upload', {file: (this.state.file, this.state.name)})\n    //   // axios.post(`/upload`, { name: this.state.name })\n    //     .then(res => {\n    //       console.log(res);\n    //       console.log(res.data);\n    //     })\n    //     .catch((err) => {\n    //       // inform the user\n    //       console.error(err)\n    //       // removeFile(file.name)\n    //   })\n\n\n    // }\n\n\n\n\n  //   handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n    // handleChange(event) { \n      \n    //   axios.get('/upload')\n    //   .then(response => {\n    //     // Convert data to CSV format(optional)\n    //     const file = response.files[0];\n    //   })\n    //   .catch(error => {\n    //     // Handle errors\n    //     console.error(error);\n    //   });\n  \n  \n    //   // const file = e.target.files[0];\n  \n    //   let reader = new FileReader();\n\n    //   reader.onload = (e) => {\n    //     const file = response.result;\n    //     console.log(file);\n    //     setTextValue(file);\n    //   };\n  \n    //   reader.onerror = (e) => alert(response.error.name);\n    //   reader.readAsText(file);\n  \n\n      \n    // inference(textValue).then( result => {\n    //   this.setState({\n    //     text : textValue,\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n\n  // }\n\n\n  \n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  \n  \n  \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.file;\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  \n  \n  //   };\n  \n  //   return (\n  //     <div className=\"Dashboard\">\n  //   {/* <div className=\"App\">  */}\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  \n  \n  \n  //     </div>\n  //   );\n  // };\n\n\n\n  // handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n  \n\n\n\n  // render() {\n  render() {\n    // const [state, setState] = useState(null);\n    // const [textValue, setTextValue] = this.useState(\"\");\n    return (\n      <div className=\"App\">\n\n      {/* <FileProcessing /> */}\n\n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n      {/* <div> \n            <input type=\"file\" onChange={() => this.setState(this.text, this.showFile().result )} /> \n        </div> */}\n\n\n          {/* <FileProcessing /> */}\n\n\n          {/* <Dashboard /> */}\n\n\n\n        {/* <div>\n\n          {this.Dashboard()}\n        </div> */}\n\n\n\n          {/* {this.handleChange()} */}\n\n\n       {/* <div>\n\n       {this.handleChange}   \n        </div> */}\n\n\n      {/* <div>\n        <h5>File upload</h5>\n        <hr />\n        <div>\n          <form>\n            <table>\n              <tr>\n                <td>Select File :</td>\n              </tr>\n              <tr>\n                <input onChange={this.onFileChange} type=\"file\" multiple />\n              </tr>\n            </table>\n          </form>\n        </div>\n      </div> */}\n\n\n      <div>\n        <h5>File Upload!</h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>\n            Upload!\n          </button>\n          <ReactFileReader  handleFiles={this.handleFiles} fileTypes={'.csv'}>\n                  {/* <button className='btn'>Upload</button> */}\n          </ReactFileReader>\n          <textarea\n                cols={30}\n                rows={20}\n                value={this.state.text}\n                // value={this.state.csvData}\n                onChange={this.onFileChange}\n                style={{ marginTop: 15, width: \"50%\" }}\n            ></textarea> \n        </div>\n      </div>\n\n\n\n      {/* <div>\n         <ReactFileReader handleFiles={this.handleFiles} fileTypes={'.csv'}>\n                 <button className='btn'>Upload</button>\n          </ReactFileReader>\n          <CsvToHtmlTable\n               data={this.state.csvData}\n               csvDelimiter=\",\"\n               tableClassName=\"table table-striped table-hover\"\n           />\n      </div> */}\n\n\n\n{/* \n      <div> \n      <input type=\"file\" onChange={(e) => this.showFile(e)} /> \n   </div> */}\n\n      {/* <div>\n                <h5>\n                    File Upload using React!\n                </h5>\n                <div>\n                    <input type=\"file\" onChange={this.onFileChange} />\n                    <button onClick={this.onFileUpload}>\n                        Upload!\n                    </button>\n                </div>\n                {this.fileData()}\n            </div> */}\n\n\n      {/* <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Upload file:\n          <input type=\"file\" name=\"name\"  onChange={this.handleChange} />\n        </label>\n        <button type=\"submit\">Upload</button>\n      </form>\n      </div> */}\n      \n\n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n    {/* <div style={{ display: \"flex\" }}>\n          <input type=\"file\" name=\"input\" onChange={this.handleChange} />\n          <textarea\n            cols={30}\n            rows={20}\n            value={this.textValue}\n            onChange={this.setTextValue}\n            style={{ marginTop: 15, width: \"50%\" }}\n          ></textarea>\n        </div> */}\n\n\n      {/* <div>\n      {this.state.data}     \n      </div> */}\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}\n        \n       >\n      </textarea>  */}\n\n\n      \n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus // onChange={this.handleChange}\n       placeholder={Dashboard.textValue} autoFocus // onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {Dashboard.textValue}\n        // onChange={e => Dashboard.textarea.onChange(e.target.value)}\n        // onChange={Dashboard.setTextValue}\n        onChange={this.onFileChange}\n        // onDropRead={text => Dashboard.textarea.onChange.value}\n\n        // textareaProps={{\n        //   // cols: 24,\n        //   // rows: 8,\n        //   placeholder: \"Drop one text file here...\"\n        // } }\n\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea> */}\n\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header> \n\n\n    </div>   \n    );\n\n\n\n\n  };\n  \n\n\n}\nexport default TextInputArea;\n// export default App;\n\n\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":"wlBAAA,MAAO,WAAP,CAEA,MAAOA,MAAP,KAAkB,OAAlB,CACA;AAEA,MAAOC,MAAP,KAAkB,OAAlB,CAEA,OAASC,SAAT,KAA0B,OAA1B,CAEA;AACA;AAEA,OAAQC,SAAR,KAAwB,gBAAxB,CACA,OAAQC,WAAR,KAA0B,gBAA1B,CACA,OAAQC,uBAAR,KAAsC,gBAAtC,CACA,MAAOC,MAAP,KAAkB,qBAAlB,CACA,MAAOC,IAAP,KAAgB,mBAAhB,CACA,MAAOC,eAAP,KAA2B,8BAA3B,CAEA,OAASC,QAAT,KAAyB,OAAzB,CACA,MAAO,YAAP,CACA,MAAOC,WAAP,KAAuB,yBAAvB,CACA,MAAOC,SAAP,KAAqB,qBAArB,CACA,MAAOC,eAAP,KAA2B,kBAA3B,CACA;AACA,MAAO,iBAAP,CAGA;AAEA;AAEA;AACA;AAEA;AACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,OAASC,MAAT,KAAuB,mCAAvB,CACA,MAAO,8BAAP,CACA;AAEA,MAAOC,gBAAP,KAA4B,mBAA5B,CACA,OAASC,cAAT,KAA+B,oBAA/B,CAGA;2FAIMC,c,0HACN;AACE,uBAAYC,KAAZ,CAAmB,+CACjB,uBAAMA,KAAN,EADiB,MA6GnBC,YA7GmB,CA6GL,SAAAC,KAAK,CAAI,CACrB;AACA,MAAKC,QAAL,CAAc,CAAEC,YAAY,CAAEF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAhB,CAAd,EAEM,GAAMC,KAAI,CAAGL,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb,CAEA,GAAIE,OAAM,CAAG,GAAIC,WAAJ,EAAb,CAEAD,MAAM,CAACE,MAAP,CAAgB,SAASR,KAAT,CAAgB,CAC9B,GAAMK,KAAI,CAAGL,KAAK,CAACG,MAAN,CAAaM,MAA1B,CACAC,OAAO,CAACC,GAAR,CAAa,SAAb,CAAwBN,IAAxB,EACA;AACA;AAEA;AAGD,CATD,CAWAC,MAAM,CAACM,OAAP,CAAiB,SAACC,CAAD,QAAOC,MAAK,CAACD,CAAC,CAACV,MAAF,CAASY,KAAT,CAAeC,IAAhB,CAAZ,EAAjB,CACAV,MAAM,CAACW,UAAP,CAAkBZ,IAAlB,EAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGP,CAjJkB,OAkKnBa,YAlKmB,CAkKN,UAAM,CACjB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAR,OAAO,CAACC,GAAR,CAAY,MAAKQ,KAAL,CAAWjB,YAAvB,EACAQ,OAAO,CAACC,GAAR,CAAY,MAAKQ,KAAL,CAAWjB,YAAX,CAAwBc,IAApC,EACE;AAEF;AACA;AACA;AACA;AAEApC,KAAK,CAACwC,IAAN,CAAW,SAAX,CAAsB,CAACf,IAAI,EAAG,MAAKc,KAAL,CAAWjB,YAAX,CAAyB,MAAKiB,KAAL,CAAWjB,YAAX,CAAwBc,IAApD,CAAL,CAClB;AACA;AACA;AACA;AACA;AALJ,EAOOK,IAPP,CAOY,SAACC,GAAD,CAAS,CACbZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,EACC,CATT,EAUSC,KAVT,CAUe,SAACC,GAAD,CAAS,CACZ;AACAd,OAAO,CAACK,KAAR,CAAcS,GAAd,EACA;AACH,CAdT,EAgBE5C,KAAK,CAAC6C,GAAN,YACKJ,IADL,CACU,SAAAC,GAAG,CAAI,CACX;AACA;AAEE,GAAMI,KAAI,CAAGJ,GAAG,CAACI,IAAjB,CAEL,CAPH,EAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAKE,GAAIpB,OAAM,CAAG,GAAIC,WAAJ,EAAb,CAEAD,MAAM,CAACE,MAAP,CAAgB,UAAM,CACpB;AAKE;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGAE,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACG,MAAnB,EAEA;AAEA,MAAKkB,UAAL,CAAgBrB,MAAM,CAACG,MAAvB,CAA+B,GAA/B,EAEF,MAAKR,QAAL,CAAc,CACZ2B,OAAO,CAAEtB,MAAM,CAACG,MADJ,CAEZoB,IAAI,CAAEvB,MAAM,CAACG,MAFD,CAAd,EAID,CA7CD,CA8CAH,MAAM,CAACW,UAAP,CAAkB,MAAKE,KAAL,CAAWjB,YAA7B,EAKAnB,SAAS,CAAC,MAAKoC,KAAL,CAAWU,IAAZ,CAAT,CAA2BR,IAA3B,CAAiC,SAAAZ,MAAM,CAAI,CACzC,MAAKR,QAAL,CAAc,CACZ4B,IAAI,CAAG,MAAKV,KAAL,CAAWU,IADN,CAEZH,IAAI,CAACjB,MAAM,CAAC,CAAD,CAFC,CAGZqB,OAAO,CAACrB,MAAM,CAAC,CAAD,CAHF,CAAd,EAMD,CAPD,EASF,CA7Ue,CAEjB,MAAKU,KAAL,CAAa,CACXU,IAAI,CAAE,gEADK,CAEXH,IAAI,CAAC1C,WAFM,CAGX8C,OAAO,CAAC,GAHG,CAIXC,WAAW,CAAC9C,uBAAuB,EAJxB,CAKXiB,YAAY,CAAE,IALH,CAMX0B,OAAO,CAAE,EANE,CAOXI,KAAK,CAAE,EAPI,CAQXC,OAAO,CAAE,IACT;AATW,CAAb,CAWA,MAAKC,YAAL,CAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB,CACA,MAAKC,UAAL,CAAkB,MAAKA,UAAL,CAAgBD,IAAhB,+BAAlB,CACA,MAAKR,UAAL,CAAkB,MAAKA,UAAL,CAAgBQ,IAAhB,+BAAlB,CAEA;AACA;AACA;AACA;AApBiB,aAqBlB,CAGD;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;oDAoOA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGE,oBAAWE,GAAX,CAA2B,IAAXC,MAAW,2DAAL,GAAK,CACzB,GAAMC,QAAO,CAAGF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAAYH,GAAG,CAACI,OAAJ,CAAY,IAAZ,CAAZ,EAA+BC,KAA/B,CAAqCJ,KAArC,CAAhB,CACA,GAAMK,KAAI,CAAGN,GAAG,CAACG,KAAJ,CAAUH,GAAG,CAACI,OAAJ,CAAY,IAAZ,EAAkB,CAA5B,EAA+BC,KAA/B,CAAqC,IAArC,CAAb,CAEA,GAAME,SAAQ,CAAGD,IAAI,CAACE,GAAL,CAAU,SAAAC,GAAG,CAAI,CAC9B,GAAMC,OAAM,CAAGD,GAAG,CAACJ,KAAJ,CAAUJ,KAAV,CAAf,CACA,GAAMU,WAAU,CAAGT,OAAO,CAACU,MAAR,CAAe,SAACC,GAAD,CAAMC,MAAN,CAAcC,CAAd,CAAoB,CAClDF,GAAG,CAACC,MAAD,CAAH,CAAcJ,MAAM,CAACK,CAAD,CAApB,CACA,MAAOF,IAAP,CACH,CAHkB,CAGhB,EAHgB,CAAnB,CAIA,MAAOF,WAAP,CACH,CAPgB,CAAjB,CASF,GAAI1C,OAAM,CAAG,GAAIC,WAAJ,EAAb,CAEAD,MAAM,CAACE,MAAP,CAAgB,UAAM,CACpB;AACE,GAAMwB,MAAK,CAAG,GAAIqB,UAAJ,CAAc/C,MAAM,CAACG,MAArB,CAAd,CACH,CAHD,CAKAH,MAAM,CAACgD,iBAAP,CAAyBV,QAAzB,EACD,C,iCAGD,4BAAoB,iBAElB,KAAKW,OAAL,CAAeC,WAAW,CACxB,iBAAM,OAAI,CAACC,gBAAL,EAAN,EADwB,CAExB,IAFwB,CAA1B,CAKA;AACA;AACA;AACA;AAEA;AAED,C,gCAED,2BAAmB,iBACjB,KAAKxD,QAAL,CAAc,CACZ8B,WAAW,CAAE9C,uBAAuB,EADxB,CAAd,EAGA,GAAI,CAAC,KAAKkC,KAAL,CAAWY,WAAhB,CAA6B,CAC3B,KAAKwB,OAAL,CAAeC,WAAW,CACxB,iBAAM,OAAI,CAACC,gBAAX,EADwB,CAExB,OAFwB,CAA1B,CAID,CACF,C,4BAED,sBAAczD,KAAd,CAAqB,iBAEf;AACA;AACA;AAEA;AAEA;AAEA;AAEE;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACE;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGF;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEAjB,SAAS,CAACiB,KAAK,CAACG,MAAN,CAAauD,KAAd,CAAT,CAA8BrC,IAA9B,CAAoC,SAAAZ,MAAM,CAAI,CAC5C,MAAI,CAACR,QAAL,CAAc,CACZ4B,IAAI,CAAG7B,KAAK,CAACG,MAAN,CAAauD,KADR,CAEZhC,IAAI,CAACjB,MAAM,CAAC,CAAD,CAFC,CAGZqB,OAAO,CAACrB,MAAM,CAAC,CAAD,CAHF,CAAd,EAMD,CAPD,EASL,C,0BAGD,oBAAYkD,OAAZ,CAAqBC,YAArB,CAAmC,CACjCA,YAAY,CAAIA,YAAY,EAAI,GAAhC,CACA,GAAIC,WAAU,CAAG,GAAIC,OAAJ,CAEb,MAAQF,YAAR,CAAuB,iBAAvB,CAEA,iCAFA,CAIA,SAJA,CAIYA,YAJZ,CAI2B,YANd,CAQf,IARe,CAAjB,CAUA,GAAIG,QAAO,CAAG,EAAd,CACA,GAAIxB,QAAO,CAAG,EAAd,CACA,GAAIyB,aAAY,CAAG,KAAnB,CACA,GAAIC,YAAW,CAAG,CAAlB,CAEA,GAAIC,WAAU,CAAG,IAAjB,CAEA,MAAMA,UAAU,CAAGL,UAAU,CAACM,IAAX,CAAiBR,OAAjB,CAAnB,CAA+C,CAC3C,GAAIS,oBAAmB,CAAGF,UAAU,CAAE,CAAF,CAApC,CACA,GAAIE,mBAAmB,CAACC,MAApB,EAA8BD,mBAAmB,GAAKR,YAA1D,CAAwE,CACpEG,OAAO,CAACO,IAAR,CAAc,EAAd,EACAN,YAAY,CAAG,IAAf,CACAC,WAAW,CAAG,CAAd,CACH,CAED,GAAIM,gBAAe,OAAnB,CACA,GAAIL,UAAU,CAAC,CAAD,CAAd,CAAmB,CACfK,eAAe,CAAGL,UAAU,CAAC,CAAD,CAAV,CAAcM,OAAd,CAAsB,GAAIV,OAAJ,CAAY,MAAZ,CAAoB,GAApB,CAAtB,CAAgD,IAAhD,CAAlB,CACH,CAFD,IAEO,CACHS,eAAe,CAAGL,UAAU,CAAC,CAAD,CAA5B,CACH,CAED,GAAI,CAACF,YAAL,CAAmB,CACjBzB,OAAO,CAAC+B,IAAR,CAAaC,eAAb,EACD,CAFD,IAEO,CACLR,OAAO,CAACA,OAAO,CAACM,MAAR,CAAgB,CAAjB,CAAP,CAA2B9B,OAAO,CAAC0B,WAAD,CAAlC,EAAmDM,eAAnD,CACAN,WAAW,GACZ,CACJ,CACD,MAAOF,QAAP,CACH,CAGC;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;sBACA,iBAAS,CACP;AACA;AACA,mBACE,YAAK,SAAS,CAAC,KAAf,uBAIA,gBAAQ,SAAS,CAAC,YAAlB,wBACA,wDADA,cAEA,KAAC,KAAD,EACE,KAAK,CAAE,OADT,CAEE,MAAM,CAAE,OAFV,CAGE,SAAS,CAAC,UAHZ,CAIE,IAAI,CAAE,KAAK5C,KAAL,CAAWO,IAJnB,CAKE,OAAO,CAAE,CACP+C,SAAS,CAAE,CAAEC,KAAK,CAAE,KAAT,CADJ,CAEPC,MAAM,CAAE,CAAC,QAAD,CAFD,CAGPC,eAAe,CAAE,SAHV,CAIPC,MAAM,CAAE,CACNC,SAAS,CAAE,CAACC,KAAK,CAAE,OAAR,CAAiBC,QAAQ,CAAE,EAA3B,CADL,CAENC,MAAM,CAAE,CAACC,SAAS,CAAC,OAAX,CAFF,CAJD,CAQPC,KAAK,CAAE,CACLL,SAAS,CAAE,CACXC,KAAK,CAAE,OADI,CAEXC,QAAQ,CAAE,EAFC,CADN,CARA,CAcPI,KAAK,CAAE,CACLC,QAAQ,CAAE,CADL,CAELC,QAAQ,CAAE,EAFL,CAGLR,SAAS,CAAE,CACTC,KAAK,CAAE,OADE,CAHN,CAdA,CALX,EAFA,cA+EA,oCACE,oCADF,cAEE,oCACE,cAAO,IAAI,CAAC,MAAZ,CAAmB,QAAQ,CAAE,KAAKhF,YAAlC,EADF,cAEE,eAAQ,OAAO,CAAE,KAAKmB,YAAtB,qBAFF,cAKE,KAAC,eAAD,EAAkB,WAAW,CAAE,KAAKqE,WAApC,CAAiD,SAAS,CAAE,MAA5D,EALF,cAQE,iBACM,IAAI,CAAE,EADZ,CAEM,IAAI,CAAE,EAFZ,CAGM,KAAK,CAAE,KAAKpE,KAAL,CAAWU,IAClB;AAJN,CAKM,QAAQ,CAAE,KAAK9B,YALrB,CAMM,KAAK,CAAE,CAAEyF,SAAS,CAAE,EAAb,CAAiBd,KAAK,CAAE,KAAxB,CANb,EARF,GAFF,GA/EA,CAiJC,KAAKvD,KAAL,CAAWY,WAAX,eACC,oCAAK,aAAM,IAAI,CAAC,GAAX,qDAAL,cACA,KAAC,GAAD,EAAK,EAAE,CAAE,CAAE2C,KAAK,CAAE,OAAT,CAAT,uBACA,KAAC,cAAD,IADA,EADA,cAIA,YAJA,GAlJF,cA2MC,kCAAK,cAAM,IAAI,CAAC,GAAX,gCAAkC,KAAKvD,KAAL,CAAWW,OAA7C,SAAL,EA3MD,cA4MA,kCAAK,cAAM,IAAI,CAAC,GAAX,wCAA4B,UAAG,IAAI,CAAC,kDAAR,kCAA5B,GAAL,EA5MA,cA6MA,kCAAK,cAAM,IAAI,CAAC,GAAX,oDAAwC,UAAG,IAAI,CAAC,4EAAR,wBAAxC,eAAL,EA7MA,GAJA,EADF,CA6ND,C,2BAz6ByBjD,KAAK,CAACC,S,EA86BlC,cAAee,cAAf,CACA;AAWA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
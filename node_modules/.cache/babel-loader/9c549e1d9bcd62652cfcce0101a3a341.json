{"ast":null,"code":"import _classCallCheck from \"/Users/nguyentrungchinh/project_20/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nguyentrungchinh/project_20/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport var EnvImpl = /*#__PURE__*/function () {\n  function EnvImpl() {\n    _classCallCheck(this, EnvImpl);\n\n    this.wasm = {};\n    this.webgl = {};\n    this.logLevelInternal = 'warning';\n  } // TODO standadize the getter and setter convention in env for other fields.\n\n\n  _createClass(EnvImpl, [{\n    key: \"logLevel\",\n    get: function get() {\n      return this.logLevelInternal;\n    },\n    set: function set(value) {\n      if (value === undefined) {\n        return;\n      }\n\n      if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n        throw new Error(\"Unsupported logging level: \".concat(value));\n      }\n\n      this.logLevelInternal = value;\n    }\n  }]);\n\n  return EnvImpl;\n}();","map":{"version":3,"mappings":";;AAAA;AACA;AAKA,WAAaA,OAAb;EACE;IAAA;;IACE,KAAKC,IAAL,GAAY,EAAZ;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,gBAAL,GAAwB,SAAxB;EACD,CALH,CAOE;;;EAPF;IAAA;IAAA,KAiBE,eAAY;MACV,OAAO,KAAKA,gBAAZ;IACD,CAnBH;IAAA,KAQE,aAAaC,KAAb,EAAgC;MAC9B,IAAIA,KAAK,KAAKC,SAAd,EAAyB;QACvB;MACD;;MACD,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,CAAC,SAAD,EAAY,MAAZ,EAAoB,SAApB,EAA+B,OAA/B,EAAwC,OAAxC,EAAiDE,OAAjD,CAAyDF,KAAzD,MAAoE,CAAC,CAAtG,EAAyG;QACvG,MAAM,IAAIG,KAAJ,sCAAwCH,KAAxC,EAAN;MACD;;MACD,KAAKD,gBAAL,GAAwBC,KAAxB;IACD;EAhBH;;EAAA;AAAA","names":["EnvImpl","wasm","webgl","logLevelInternal","value","undefined","indexOf","Error"],"sources":["/Users/nguyentrungchinh/project_20/node_modules/onnxruntime-common/lib/env-impl.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from './env';\r\n\r\ntype LogLevelType = Env['logLevel'];\r\nexport class EnvImpl implements Env {\r\n  constructor() {\r\n    this.wasm = {};\r\n    this.webgl = {};\r\n    this.logLevelInternal = 'warning';\r\n  }\r\n\r\n  // TODO standadize the getter and setter convention in env for other fields.\r\n  set logLevel(value: LogLevelType) {\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\r\n      throw new Error(`Unsupported logging level: ${value}`);\r\n    }\r\n    this.logLevelInternal = value;\r\n  }\r\n  get logLevel(): LogLevelType {\r\n    return this.logLevelInternal;\r\n  }\r\n\r\n  debug?: boolean;\r\n\r\n  wasm: Env.WebAssemblyFlags;\r\n\r\n  webgl: Env.WebGLFlags;\r\n\r\n  [name: string]: unknown;\r\n\r\n  private logLevelInternal: Required<LogLevelType>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
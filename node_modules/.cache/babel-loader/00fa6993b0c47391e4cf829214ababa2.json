{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n  constructor(handler) {\n    this.handler = handler;\n  }\n\n  async run(feeds, arg1, arg2) {\n    const fetches = {};\n    let options = {}; // check inputs\n\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n    }\n\n    let isFetchesEmpty = true; // determine which override is being used\n\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n\n      if (arg1 instanceof Tensor) {\n        throw new TypeError('\\'fetches\\' cannot be a Tensor');\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError('\\'fetches\\' cannot be an empty array.');\n        }\n\n        isFetchesEmpty = false; // output names\n\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError('\\'fetches\\' must be a string array or an object.');\n          }\n\n          if (this.outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'options\\' must be an object.');\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n\n        for (const name of this.outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = arg1[name];\n\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else {\n          options = arg1;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n    } // check if all inputs are in feed\n\n\n    for (const name of this.inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    } // if no fetches is specified, we use the full output names list\n\n\n    if (isFetchesEmpty) {\n      for (const name of this.outputNames) {\n        fetches[name] = null;\n      }\n    } // feeds, fetches and options are prepared\n\n\n    const results = await this.handler.run(feeds, fetches, options);\n    const returnValue = {};\n\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n      }\n    }\n\n    return returnValue;\n  }\n\n  static async create(arg0, arg1, arg2, arg3) {\n    // either load from a file or buffer\n    let filePathOrUint8Array;\n    let options = {};\n\n    if (typeof arg0 === 'string') {\n      filePathOrUint8Array = arg0;\n\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (arg0 instanceof Uint8Array) {\n      filePathOrUint8Array = arg0;\n\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer) {\n      const buffer = arg0;\n      let byteOffset = 0;\n      let byteLength = arg0.byteLength;\n\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 === 'number') {\n        byteOffset = arg1;\n\n        if (!Number.isSafeInteger(byteOffset)) {\n          throw new RangeError('\\'byteOffset\\' must be an integer.');\n        }\n\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n        }\n\n        byteLength = arg0.byteLength - byteOffset;\n\n        if (typeof arg2 === 'number') {\n          byteLength = arg2;\n\n          if (!Number.isSafeInteger(byteLength)) {\n            throw new RangeError('\\'byteLength\\' must be an integer.');\n          }\n\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n          }\n\n          if (typeof arg3 === 'object' && arg3 !== null) {\n            options = arg3;\n          } else if (typeof arg3 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'byteLength\\' must be a number.');\n        }\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n    } else {\n      throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n    } // get backend hints\n\n\n    const eps = options.executionProviders || [];\n    const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n    const backend = await resolveBackend(backendHints);\n    const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n    return new InferenceSession(handler);\n  }\n\n  startProfiling() {\n    this.handler.startProfiling();\n  }\n\n  endProfiling() {\n    this.handler.endProfiling();\n  }\n\n  get inputNames() {\n    return this.handler.inputNames;\n  }\n\n  get outputNames() {\n    return this.handler.outputNames;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["resolveBackend","Tensor","InferenceSession","constructor","handler","run","feeds","arg1","arg2","fetches","options","Array","isArray","TypeError","isFetchesEmpty","length","name","outputNames","indexOf","RangeError","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","Error","results","returnValue","key","hasOwnProperty","call","type","data","dims","create","arg0","arg3","filePathOrUint8Array","Uint8Array","ArrayBuffer","SharedArrayBuffer","buffer","byteOffset","byteLength","Number","isSafeInteger","eps","executionProviders","backendHints","map","i","backend","createSessionHandler","startProfiling","endProfiling"],"sources":["/Users/nguyentrungchinh/project_20/node_modules/onnxruntime-common/lib/inference-session-impl.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {resolveBackend} from './backend-impl';\r\nimport {InferenceSession as InferenceSessionInterface} from './inference-session';\r\nimport {OnnxValue} from './onnx-value';\r\nimport {Tensor} from './tensor';\r\n\r\ntype SessionOptions = InferenceSessionInterface.SessionOptions;\r\ntype RunOptions = InferenceSessionInterface.RunOptions;\r\ntype FeedsType = InferenceSessionInterface.FeedsType;\r\ntype FetchesType = InferenceSessionInterface.FetchesType;\r\ntype ReturnType = InferenceSessionInterface.ReturnType;\r\n\r\nexport class InferenceSession implements InferenceSessionInterface {\r\n  private constructor(handler: SessionHandler) {\r\n    this.handler = handler;\r\n  }\r\n  run(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\r\n  run(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\r\n  async run(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\r\n    const fetches: {[name: string]: OnnxValue|null} = {};\r\n    let options: RunOptions = {};\r\n    // check inputs\r\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\r\n      throw new TypeError(\r\n          '\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\r\n    }\r\n\r\n    let isFetchesEmpty = true;\r\n    // determine which override is being used\r\n    if (typeof arg1 === 'object') {\r\n      if (arg1 === null) {\r\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\r\n      }\r\n      if (arg1 instanceof Tensor) {\r\n        throw new TypeError('\\'fetches\\' cannot be a Tensor');\r\n      }\r\n\r\n      if (Array.isArray(arg1)) {\r\n        if (arg1.length === 0) {\r\n          throw new TypeError('\\'fetches\\' cannot be an empty array.');\r\n        }\r\n        isFetchesEmpty = false;\r\n        // output names\r\n        for (const name of arg1) {\r\n          if (typeof name !== 'string') {\r\n            throw new TypeError('\\'fetches\\' must be a string array or an object.');\r\n          }\r\n          if (this.outputNames.indexOf(name) === -1) {\r\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\r\n          }\r\n          fetches[name] = null;\r\n        }\r\n\r\n        if (typeof arg2 === 'object' && arg2 !== null) {\r\n          options = arg2;\r\n        } else if (typeof arg2 !== 'undefined') {\r\n          throw new TypeError('\\'options\\' must be an object.');\r\n        }\r\n      } else {\r\n        // decide whether arg1 is fetches or options\r\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\r\n        let isFetches = false;\r\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\r\n        for (const name of this.outputNames) {\r\n          if (arg1Keys.indexOf(name) !== -1) {\r\n            const v = (arg1 as InferenceSessionInterface.NullableOnnxValueMapType)[name];\r\n            if (v === null || v instanceof Tensor) {\r\n              isFetches = true;\r\n              isFetchesEmpty = false;\r\n              fetches[name] = v;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (isFetches) {\r\n          if (typeof arg2 === 'object' && arg2 !== null) {\r\n            options = arg2;\r\n          } else if (typeof arg2 !== 'undefined') {\r\n            throw new TypeError('\\'options\\' must be an object.');\r\n          }\r\n        } else {\r\n          options = arg1 as RunOptions;\r\n        }\r\n      }\r\n    } else if (typeof arg1 !== 'undefined') {\r\n      throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\r\n    }\r\n\r\n    // check if all inputs are in feed\r\n    for (const name of this.inputNames) {\r\n      if (typeof feeds[name] === 'undefined') {\r\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\r\n      }\r\n    }\r\n\r\n    // if no fetches is specified, we use the full output names list\r\n    if (isFetchesEmpty) {\r\n      for (const name of this.outputNames) {\r\n        fetches[name] = null;\r\n      }\r\n    }\r\n\r\n    // feeds, fetches and options are prepared\r\n\r\n    const results = await this.handler.run(feeds, fetches, options);\r\n    const returnValue: {[name: string]: OnnxValue} = {};\r\n    for (const key in results) {\r\n      if (Object.hasOwnProperty.call(results, key)) {\r\n        returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\r\n      }\r\n    }\r\n    return returnValue;\r\n  }\r\n\r\n  static create(path: string, options?: SessionOptions): Promise<InferenceSessionInterface>;\r\n  static create(buffer: ArrayBufferLike, options?: SessionOptions): Promise<InferenceSessionInterface>;\r\n  static create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: SessionOptions):\r\n      Promise<InferenceSessionInterface>;\r\n  static create(buffer: Uint8Array, options?: SessionOptions): Promise<InferenceSessionInterface>;\r\n  static async create(\r\n      arg0: string|ArrayBufferLike|Uint8Array, arg1?: SessionOptions|number, arg2?: number,\r\n      arg3?: SessionOptions): Promise<InferenceSessionInterface> {\r\n    // either load from a file or buffer\r\n    let filePathOrUint8Array: string|Uint8Array;\r\n    let options: SessionOptions = {};\r\n\r\n    if (typeof arg0 === 'string') {\r\n      filePathOrUint8Array = arg0;\r\n      if (typeof arg1 === 'object' && arg1 !== null) {\r\n        options = arg1;\r\n      } else if (typeof arg1 !== 'undefined') {\r\n        throw new TypeError('\\'options\\' must be an object.');\r\n      }\r\n    } else if (arg0 instanceof Uint8Array) {\r\n      filePathOrUint8Array = arg0;\r\n      if (typeof arg1 === 'object' && arg1 !== null) {\r\n        options = arg1;\r\n      } else if (typeof arg1 !== 'undefined') {\r\n        throw new TypeError('\\'options\\' must be an object.');\r\n      }\r\n    } else if (\r\n        arg0 instanceof ArrayBuffer ||\r\n        (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\r\n      const buffer = arg0;\r\n      let byteOffset = 0;\r\n      let byteLength = arg0.byteLength;\r\n      if (typeof arg1 === 'object' && arg1 !== null) {\r\n        options = arg1;\r\n      } else if (typeof arg1 === 'number') {\r\n        byteOffset = arg1;\r\n        if (!Number.isSafeInteger(byteOffset)) {\r\n          throw new RangeError('\\'byteOffset\\' must be an integer.');\r\n        }\r\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\r\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\r\n        }\r\n        byteLength = arg0.byteLength - byteOffset;\r\n        if (typeof arg2 === 'number') {\r\n          byteLength = arg2;\r\n          if (!Number.isSafeInteger(byteLength)) {\r\n            throw new RangeError('\\'byteLength\\' must be an integer.');\r\n          }\r\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\r\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\r\n          }\r\n          if (typeof arg3 === 'object' && arg3 !== null) {\r\n            options = arg3;\r\n          } else if (typeof arg3 !== 'undefined') {\r\n            throw new TypeError('\\'options\\' must be an object.');\r\n          }\r\n        } else if (typeof arg2 !== 'undefined') {\r\n          throw new TypeError('\\'byteLength\\' must be a number.');\r\n        }\r\n      } else if (typeof arg1 !== 'undefined') {\r\n        throw new TypeError('\\'options\\' must be an object.');\r\n      }\r\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\r\n    } else {\r\n      throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\r\n    }\r\n\r\n    // get backend hints\r\n    const eps = options.executionProviders || [];\r\n    const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\r\n    const backend = await resolveBackend(backendHints);\r\n    const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\r\n    return new InferenceSession(handler);\r\n  }\r\n\r\n  startProfiling(): void {\r\n    this.handler.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.handler.endProfiling();\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this.handler.inputNames;\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this.handler.outputNames;\r\n  }\r\n\r\n  private handler: SessionHandler;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
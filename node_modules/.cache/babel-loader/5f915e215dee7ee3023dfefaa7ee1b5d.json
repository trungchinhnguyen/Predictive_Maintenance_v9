{"ast":null,"code":"import _classCallCheck from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/nguyentrungchinh/project_19/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import'./App.css';import axios from'axios';// import React, { Component } from 'react';\nimport React from'react';import{Component}from'react';// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\nimport{inference}from'./inference.js';import{columnNames}from'./inference.js';import{modelDownloadInProgress}from'./inference.js';import Chart from\"react-google-charts\";import Box from'@mui/material/Box';import LinearProgress from'@mui/material/LinearProgress';import{useState}from'react';import'./App.scss';import FileUpload from'./FileUpload/FileUpload';import FileList from'./FileList/FileList';import FileProcessing from'./FileProcessing';// import Dashboard from './Dashboard';\nimport'./Dashboard.css';// import {textValue_exp} from './Dashboard.jsx';\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n// import React from 'react'\nimport{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faPlus}from'@fortawesome/free-solid-svg-icons';import'./FileUpload/FileUpload.scss';// import axios from 'axios'\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TextInputArea=/*#__PURE__*/function(_React$Component){_inherits(TextInputArea,_React$Component);var _super=_createSuper(TextInputArea);// class App extends React.Component {\nfunction TextInputArea(props){var _this;_classCallCheck(this,TextInputArea);_this=_super.call(this,props);_this.onFileChange=function(event){_this.setState({selectedFile:event.target.files[0]});var file=event.target.files[0];var reader=new FileReader();reader.onload=function(event){var file=event.target.result;console.log(file);// this.setState({ text: file });\n};reader.onerror=function(e){return alert(e.target.error.name);};reader.readAsText(file);_this.setState({text:file});};_this.onFileUpload=function(){// Create an object of formData\n// const formData = new FormData();\n// // Update the formData object\n// formData.append(\n//   \"myFile\",\n//   this.state.selectedFile,\n//   this.state.selectedFile.name\n// );\n// Details of the uploaded file\nconsole.log(_this.state.selectedFile);console.log(_this.state.selectedFile.name);//  console.log(event.target.files[0]);\n// Request made to the backend api\n// Send formData object\n// axios.post(\"/upload\", formData);\n// axios.post(\"/upload\", {file: (this.state.selectedFile,this.state.selectedFile.name)});\naxios.post('/upload',{file:(_this.state.selectedFile,_this.state.selectedFile.name)}//     {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//     },\n//   }\n).then(function(res){console.log(res);}).catch(function(err){// inform the user\nconsole.error(err);// removeFile(file.name)\n});};_this.state={text:'Enter text to classify emotion, model trained on English text.',data:columnNames,latency:0.0,downloading:modelDownloadInProgress(),selectedFile:null// name:'',\n};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));// this.onFileChange = this.onFileChange.bind(this);\n// this.onFileUpload = this.onFileUpload.bind(this);\n// [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n// this.FileReader = this.FileReader.bind(this);\nreturn _this;}// Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     // <div className=\"Dashboard\">\n//     <div className=\"App\">\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//     </div>\n//   );\n// };\n//   handleChange(event) { \n//     axios.get('/upload')\n//     .then(response => {\n//       // Convert data to CSV format(optional)\n//       const file = response.files[0];\n//     })\n//     .catch(error => {\n//       // Handle errors\n//       console.error(error);\n//     });\n//     // const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = response.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(response.error.name);\n//     reader.readAsText(file);\n//   inference(textValue).then( result => {\n//     this.setState({\n//       text : textValue,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\n// onFileChange(e) {\n//   const file = e.target.files[0];\n//   console.log(file.name);\n//   console.log(file.size);\n//   console.log(file.type);\n// }\n// onFileChange(e) {\n//   const file = e.target.files;\n//   console.log(file);\n// }\n_createClass(TextInputArea,[{key:\"componentDidMount\",value:// fileData = () => {\n//   if (this.state.selectedFile) {\n//       return (\n//           <div>\n//               <h5>File Details:</h5>\n//               <p>File Name: {this.state.selectedFile.name}</p>\n//               <p>File Type: {this.state.selectedFile.type}</p>\n//               <p>\n//                   Last Modified:{\" \"}\n//                   {this.state.selectedFile.lastModifiedDate.toDateString()}\n//               </p>\n//           </div>\n//       );\n//   } else {\n//       return (\n//           <div>\n//               <br />\n//               <h5>Choose before Pressing the Upload button</h5>\n//           </div>\n//       );\n//   }\n// };\nfunction componentDidMount(){var _this2=this;// [textValue, setTextValue] = useState(\"\");\nthis.timerID=setInterval(function(){return _this2.checkModelStatus();},1000);}},{key:\"checkModelStatus\",value:function checkModelStatus(){var _this3=this;this.setState({downloading:modelDownloadInProgress()});if(!this.state.downloading){this.timerID=setInterval(function(){return _this3.checkModelStatus;},5000000);}}},{key:\"handleChange\",value:function handleChange(event){var _this4=this;// Dashboard = (e) => {\n// const [textValue, setTextValue] = useState(\"\");\n// const handleChange = (e) => {\nthis.setState({selectedFile:event.target.files[0]});this.setState({name:event.target.files[0].name});// const file = event.target.files[0];\n// let reader = new FileReader();\n// reader.onload(event).then(result => {\n//   const file = event.target.result;\n//   console.log(file);\n// this.setState({ text: file });\n// inference(file).then( result => {\n//   this.setState({\n//     text : file,\n//     data:result[1],\n//     latency:result[0],\n//   });\n// });\n// });\n// reader.onerror(event).alert(event.target.error.name);\n// reader.readAsText(file);\ninference(this.state.text).then(function(result){_this4.setState({text:event.target.value,data:result[1],latency:result[0]});});}// handleSubmit = event => {\n//   event.preventDefault();\n//   // const user = {\n//   //   name: this.state.name\n//   // };\n//   // axios.post(`/upload`, { user })\n//   axios.post('/upload', {file: (this.state.file, this.state.name)})\n//   // axios.post(`/upload`, { name: this.state.name })\n//     .then(res => {\n//       console.log(res);\n//       console.log(res.data);\n//     })\n//     .catch((err) => {\n//       // inform the user\n//       console.error(err)\n//       // removeFile(file.name)\n//   })\n// }\n//   handleChange (event) {  \n//   inference(event.target.value).then( result => {\n//     this.setState({\n//       text : event.target.value,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\n// handleChange(event) { \n//   axios.get('/upload')\n//   .then(response => {\n//     // Convert data to CSV format(optional)\n//     const file = response.files[0];\n//   })\n//   .catch(error => {\n//     // Handle errors\n//     console.error(error);\n//   });\n//   // const file = e.target.files[0];\n//   let reader = new FileReader();\n//   reader.onload = (e) => {\n//     const file = response.result;\n//     console.log(file);\n//     setTextValue(file);\n//   };\n//   reader.onerror = (e) => alert(response.error.name);\n//   reader.readAsText(file);\n// inference(textValue).then( result => {\n//   this.setState({\n//     text : textValue,\n//     data:result[1],\n//     latency:result[0],\n//   });\n// });\n// }\n// Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     axios.get('/upload')\n//     .then(response => {\n//       // Convert data to CSV format(optional)\n//       const file = response.file;\n//     })\n//     .catch(error => {\n//       // Handle errors\n//       console.error(error);\n//     });\n//     // const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div className=\"Dashboard\">\n//   {/* <div className=\"App\">  */}\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//     </div>\n//   );\n// };\n// handleChange (event) {  \n//   inference(event.target.value).then( result => {\n//     this.setState({\n//       text : event.target.value,\n//       data:result[1],\n//       latency:result[0],\n//     });\n//   });\n// }\n},{key:\"render\",value:function render(){// const [state, setState] = useState(null);\n// const [textValue, setTextValue] = this.useState(\"\");\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"em\",{children:\"In-Browser Transformer Inference\"}),/*#__PURE__*/_jsx(Chart,{width:'400px',height:'200px',chartType:\"BarChart\",data:this.state.data,options:{chartArea:{width:'40%'},colors:['purple'],backgroundColor:'#282c34',legend:{textStyle:{color:'white',fontSize:10},labels:{fontColor:'white'}},vAxis:{textStyle:{color:'white',fontSize:13}},hAxis:{minValue:5,maxValue:50,textStyle:{color:'white'}}}}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"File Upload!\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:this.onFileChange}),/*#__PURE__*/_jsx(\"button\",{onClick:this.onFileUpload,children:\"Upload!\"}),/*#__PURE__*/_jsx(\"textarea\",{cols:30,rows:20,value:this.state.text,onChange:this.onFileChange,style:{marginTop:15,width:\"50%\"}})]})]}),this.state.downloading&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"font\",{size:\"2\",children:\"Downloading model from CDN to browser..\"}),/*#__PURE__*/_jsx(Box,{sx:{width:'400px'},children:/*#__PURE__*/_jsx(LinearProgress,{})}),/*#__PURE__*/_jsx(\"p\",{})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Inference Latency \",this.state.latency,\" ms\"]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"GitHub Repo: \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/jobergum/browser-ml-inference\",children:\"browser-ml-inference\"})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"font\",{size:\"3\",children:[\"Model was trained on the \",/*#__PURE__*/_jsx(\"a\",{href:\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",children:\"GoEmotions\"}),\" dataset.\"]})})]})});}}]);return TextInputArea;}(React.Component);export default TextInputArea;// export default App;\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","useState","FileUpload","FileList","FileProcessing","FontAwesomeIcon","faPlus","TextInputArea","props","onFileChange","event","setState","selectedFile","target","files","file","reader","FileReader","onload","result","console","log","onerror","e","alert","error","name","readAsText","text","onFileUpload","state","post","then","res","catch","err","data","latency","downloading","handleChange","bind","timerID","setInterval","checkModelStatus","value","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue","marginTop"],"sources":["/Users/nguyentrungchinh/project_19/src/App.jsx"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing';\n// import Dashboard from './Dashboard';\nimport './Dashboard.css';\n\n// import {textValue_exp} from './Dashboard.jsx';\n\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n\n// import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload/FileUpload.scss'\n// import axios from 'axios'\n\n\n \n\nclass TextInputArea extends React.Component {\n// class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n      selectedFile: null\n      // name:'',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    // this.onFileChange = this.onFileChange.bind(this);\n    // this.onFileUpload = this.onFileUpload.bind(this);\n    // [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n    // this.FileReader = this.FileReader.bind(this);\n  }\n\n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     // <div className=\"Dashboard\">\n  //     <div className=\"App\">\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n\n\n  //   handleChange(event) { \n      \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.files[0];\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n\n  //     reader.onload = (e) => {\n  //       const file = response.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(response.error.name);\n  //     reader.readAsText(file);\n  \n\n      \n  //   inference(textValue).then( result => {\n  //     this.setState({\n  //       text : textValue,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n  // onFileChange(e) {\n  //   const file = e.target.files[0];\n  //   console.log(file.name);\n  //   console.log(file.size);\n  //   console.log(file.type);\n  // }\n\n  // onFileChange(e) {\n  //   const file = e.target.files;\n  //   console.log(file);\n  // }\n\n  onFileChange =event => {\n    this.setState({ selectedFile: event.target.files[0] });\n\n          const file = event.target.files[0];\n      \n          let reader = new FileReader();\n      \n          reader.onload = function(event) {\n            const file = event.target.result;\n            console.log(file)\n            // this.setState({ text: file });\n          };\n\n          reader.onerror = (e) => alert(e.target.error.name);\n          reader.readAsText(file); \n\n          this.setState({ text: file });\n\n  };\n\n  onFileUpload=() => {\n    // Create an object of formData\n    // const formData = new FormData();\n\n    // // Update the formData object\n    // formData.append(\n    //   \"myFile\",\n    //   this.state.selectedFile,\n    //   this.state.selectedFile.name\n    // );\n\n    // Details of the uploaded file\n    console.log(this.state.selectedFile);\n    console.log(this.state.selectedFile.name);\n      //  console.log(event.target.files[0]);\n\n    // Request made to the backend api\n    // Send formData object\n    // axios.post(\"/upload\", formData);\n    // axios.post(\"/upload\", {file: (this.state.selectedFile,this.state.selectedFile.name)});\n\n    axios.post('/upload', {file: (this.state.selectedFile, this.state.selectedFile.name)}\n        //     {\n        //     headers: {\n        //       \"Content-Type\": \"multipart/form-data\",\n        //     },\n        //   }\n          )\n          .then((res) => {\n            console.log(res);\n            })\n            .catch((err) => {\n                // inform the user\n                console.error(err)\n                // removeFile(file.name)\n            })\n\n\n  };\n\n  // fileData = () => {\n \n  //   if (this.state.selectedFile) {\n\n  //       return (\n  //           <div>\n  //               <h5>File Details:</h5>\n  //               <p>File Name: {this.state.selectedFile.name}</p>\n\n  //               <p>File Type: {this.state.selectedFile.type}</p>\n\n  //               <p>\n  //                   Last Modified:{\" \"}\n  //                   {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //               </p>\n\n  //           </div>\n  //       );\n  //   } else {\n  //       return (\n  //           <div>\n  //               <br />\n  //               <h5>Choose before Pressing the Upload button</h5>\n  //           </div>\n  //       );\n  //   }\n  // };\n\n\n  componentDidMount() {\n    // [textValue, setTextValue] = useState(\"\");\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange (event) {  \n  \n        // Dashboard = (e) => {\n        // const [textValue, setTextValue] = useState(\"\");\n        // const handleChange = (e) => {\n\n\n        this.setState({ selectedFile : event.target.files[0]});\n\n        this.setState({ name: event.target.files[0].name });\n\n          // const file = event.target.files[0];\n      \n          // let reader = new FileReader();\n      \n          // reader.onload(event).then(result => {\n          //   const file = event.target.result;\n          //   console.log(file);\n            // this.setState({ text: file });\n\n            // inference(file).then( result => {\n            //   this.setState({\n            //     text : file,\n            //     data:result[1],\n            //     latency:result[0],\n            //   });\n      \n            // });\n\n\n          // });\n\n          // reader.onerror(event).alert(event.target.error.name);\n          // reader.readAsText(file);\n\n          \n          inference(this.state.text).then( result => {\n            this.setState({\n              text : event.target.value,\n              data:result[1],\n              latency:result[0],\n            });\n    \n          });\n    \n    }\n\n    // handleSubmit = event => {\n    //   event.preventDefault();\n  \n    //   // const user = {\n    //   //   name: this.state.name\n    //   // };\n  \n    //   // axios.post(`/upload`, { user })\n\n    //   axios.post('/upload', {file: (this.state.file, this.state.name)})\n    //   // axios.post(`/upload`, { name: this.state.name })\n    //     .then(res => {\n    //       console.log(res);\n    //       console.log(res.data);\n    //     })\n    //     .catch((err) => {\n    //       // inform the user\n    //       console.error(err)\n    //       // removeFile(file.name)\n    //   })\n\n\n    // }\n\n\n\n\n  //   handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n    // handleChange(event) { \n      \n    //   axios.get('/upload')\n    //   .then(response => {\n    //     // Convert data to CSV format(optional)\n    //     const file = response.files[0];\n    //   })\n    //   .catch(error => {\n    //     // Handle errors\n    //     console.error(error);\n    //   });\n  \n  \n    //   // const file = e.target.files[0];\n  \n    //   let reader = new FileReader();\n\n    //   reader.onload = (e) => {\n    //     const file = response.result;\n    //     console.log(file);\n    //     setTextValue(file);\n    //   };\n  \n    //   reader.onerror = (e) => alert(response.error.name);\n    //   reader.readAsText(file);\n  \n\n      \n    // inference(textValue).then( result => {\n    //   this.setState({\n    //     text : textValue,\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n\n  // }\n\n\n  \n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  \n  \n  \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.file;\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  \n  \n  //   };\n  \n  //   return (\n  //     <div className=\"Dashboard\">\n  //   {/* <div className=\"App\">  */}\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  \n  \n  \n  //     </div>\n  //   );\n  // };\n\n\n\n  // handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n  \n\n\n\n  render() {\n    // const [state, setState] = useState(null);\n    // const [textValue, setTextValue] = this.useState(\"\");\n    return (\n      <div className=\"App\">\n\n      {/* <FileProcessing /> */}\n\n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n\n\n          {/* <FileProcessing /> */}\n\n\n          {/* <Dashboard /> */}\n\n\n\n        {/* <div>\n\n          {this.Dashboard()}\n        </div> */}\n\n\n\n          {/* {this.handleChange()} */}\n\n\n       {/* <div>\n\n       {this.handleChange}   \n        </div> */}\n\n\n      {/* <div>\n        <h5>File upload</h5>\n        <hr />\n        <div>\n          <form>\n            <table>\n              <tr>\n                <td>Select File :</td>\n              </tr>\n              <tr>\n                <input onChange={this.onFileChange} type=\"file\" multiple />\n              </tr>\n            </table>\n          </form>\n        </div>\n      </div> */}\n\n\n\n      <div>\n        <h5>File Upload!</h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>\n            Upload!\n          </button>\n          <textarea\n                cols={30}\n                rows={20}\n                value={this.state.text}\n                onChange={this.onFileChange}\n                style={{ marginTop: 15, width: \"50%\" }}\n            ></textarea> \n        </div>\n      </div>\n\n\n\n      {/* <div>\n                <h5>\n                    File Upload using React!\n                </h5>\n                <div>\n                    <input type=\"file\" onChange={this.onFileChange} />\n                    <button onClick={this.onFileUpload}>\n                        Upload!\n                    </button>\n                </div>\n                {this.fileData()}\n            </div> */}\n\n\n      {/* <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Upload file:\n          <input type=\"file\" name=\"name\"  onChange={this.handleChange} />\n        </label>\n        <button type=\"submit\">Upload</button>\n      </form>\n      </div> */}\n      \n\n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n    {/* <div style={{ display: \"flex\" }}>\n          <input type=\"file\" name=\"input\" onChange={this.handleChange} />\n          <textarea\n            cols={30}\n            rows={20}\n            value={this.textValue}\n            onChange={this.setTextValue}\n            style={{ marginTop: 15, width: \"50%\" }}\n          ></textarea>\n        </div> */}\n\n\n      {/* <div>\n      {this.state.data}     \n      </div> */}\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}\n        \n       >\n      </textarea> */}\n\n\n      \n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus // onChange={this.handleChange}\n       placeholder={Dashboard.textValue} autoFocus // onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {Dashboard.textValue}\n        // onChange={e => Dashboard.textarea.onChange(e.target.value)}\n        // onChange={Dashboard.setTextValue}\n        onChange={this.onFileChange}\n        // onDropRead={text => Dashboard.textarea.onChange.value}\n\n        // textareaProps={{\n        //   // cols: 24,\n        //   // rows: 8,\n        //   placeholder: \"Drop one text file here...\"\n        // } }\n\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea> */}\n\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header> \n\n\n    </div>   \n    );\n\n\n\n\n  };\n  \n\n\n}\nexport default TextInputArea;\n// export default App;\n\n\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":"wlBAAA,MAAO,WAAP,CAEA,MAAOA,MAAP,KAAkB,OAAlB,CACA;AAEA,MAAOC,MAAP,KAAkB,OAAlB,CAEA,OAASC,SAAT,KAA0B,OAA1B,CAEA;AACA;AAEA,OAAQC,SAAR,KAAwB,gBAAxB,CACA,OAAQC,WAAR,KAA0B,gBAA1B,CACA,OAAQC,uBAAR,KAAsC,gBAAtC,CACA,MAAOC,MAAP,KAAkB,qBAAlB,CACA,MAAOC,IAAP,KAAgB,mBAAhB,CACA,MAAOC,eAAP,KAA2B,8BAA3B,CAEA,OAASC,QAAT,KAAyB,OAAzB,CACA,MAAO,YAAP,CACA,MAAOC,WAAP,KAAuB,yBAAvB,CACA,MAAOC,SAAP,KAAqB,qBAArB,CACA,MAAOC,eAAP,KAA2B,kBAA3B,CACA;AACA,MAAO,iBAAP,CAEA;AAEA;AAEA;AACA;AAEA;AACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,OAASC,MAAT,KAAuB,mCAAvB,CACA,MAAO,8BAAP,CACA;2FAKMC,c,0HACN;AACE,uBAAYC,KAAZ,CAAmB,+CACjB,uBAAMA,KAAN,EADiB,MAuGnBC,YAvGmB,CAuGL,SAAAC,KAAK,CAAI,CACrB,MAAKC,QAAL,CAAc,CAAEC,YAAY,CAAEF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAhB,CAAd,EAEM,GAAMC,KAAI,CAAGL,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb,CAEA,GAAIE,OAAM,CAAG,GAAIC,WAAJ,EAAb,CAEAD,MAAM,CAACE,MAAP,CAAgB,SAASR,KAAT,CAAgB,CAC9B,GAAMK,KAAI,CAAGL,KAAK,CAACG,MAAN,CAAaM,MAA1B,CACAC,OAAO,CAACC,GAAR,CAAYN,IAAZ,EACA;AACD,CAJD,CAMAC,MAAM,CAACM,OAAP,CAAiB,SAACC,CAAD,QAAOC,MAAK,CAACD,CAAC,CAACV,MAAF,CAASY,KAAT,CAAeC,IAAhB,CAAZ,EAAjB,CACAV,MAAM,CAACW,UAAP,CAAkBZ,IAAlB,EAEA,MAAKJ,QAAL,CAAc,CAAEiB,IAAI,CAAEb,IAAR,CAAd,EAEP,CAzHkB,OA2HnBc,YA3HmB,CA2HN,UAAM,CACjB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAT,OAAO,CAACC,GAAR,CAAY,MAAKS,KAAL,CAAWlB,YAAvB,EACAQ,OAAO,CAACC,GAAR,CAAY,MAAKS,KAAL,CAAWlB,YAAX,CAAwBc,IAApC,EACE;AAEF;AACA;AACA;AACA;AAEAlC,KAAK,CAACuC,IAAN,CAAW,SAAX,CAAsB,CAAChB,IAAI,EAAG,MAAKe,KAAL,CAAWlB,YAAX,CAAyB,MAAKkB,KAAL,CAAWlB,YAAX,CAAwBc,IAApD,CAAL,CAClB;AACA;AACA;AACA;AACA;AALJ,EAOOM,IAPP,CAOY,SAACC,GAAD,CAAS,CACbb,OAAO,CAACC,GAAR,CAAYY,GAAZ,EACC,CATT,EAUSC,KAVT,CAUe,SAACC,GAAD,CAAS,CACZ;AACAf,OAAO,CAACK,KAAR,CAAcU,GAAd,EACA;AACH,CAdT,EAiBD,CAjKkB,CAEjB,MAAKL,KAAL,CAAa,CACXF,IAAI,CAAE,gEADK,CAEXQ,IAAI,CAACxC,WAFM,CAGXyC,OAAO,CAAC,GAHG,CAIXC,WAAW,CAACzC,uBAAuB,EAJxB,CAKXe,YAAY,CAAE,IACd;AANW,CAAb,CAQA,MAAK2B,YAAL,CAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB,CACA;AACA;AACA;AACA;AAdiB,aAelB,CAGD;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;2DA8DA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,4BAAoB,iBAClB;AACA,KAAKC,OAAL,CAAeC,WAAW,CACxB,iBAAM,OAAI,CAACC,gBAAL,EAAN,EADwB,CAExB,IAFwB,CAA1B,CAID,C,gCAED,2BAAmB,iBACjB,KAAKhC,QAAL,CAAc,CACZ2B,WAAW,CAAEzC,uBAAuB,EADxB,CAAd,EAGA,GAAI,CAAC,KAAKiC,KAAL,CAAWQ,WAAhB,CAA6B,CAC3B,KAAKG,OAAL,CAAeC,WAAW,CACxB,iBAAM,OAAI,CAACC,gBAAX,EADwB,CAExB,OAFwB,CAA1B,CAID,CACF,C,4BAED,sBAAcjC,KAAd,CAAqB,iBAEf;AACA;AACA;AAGA,KAAKC,QAAL,CAAc,CAAEC,YAAY,CAAGF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAjB,CAAd,EAEA,KAAKH,QAAL,CAAc,CAAEe,IAAI,CAAEhB,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsBY,IAA9B,CAAd,EAEE;AAEA;AAEA;AACA;AACA;AACE;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGF;AAEA;AACA;AAGA/B,SAAS,CAAC,KAAKmC,KAAL,CAAWF,IAAZ,CAAT,CAA2BI,IAA3B,CAAiC,SAAAb,MAAM,CAAI,CACzC,MAAI,CAACR,QAAL,CAAc,CACZiB,IAAI,CAAGlB,KAAK,CAACG,MAAN,CAAa+B,KADR,CAEZR,IAAI,CAACjB,MAAM,CAAC,CAAD,CAFC,CAGZkB,OAAO,CAAClB,MAAM,CAAC,CAAD,CAHF,CAAd,EAMD,CAPD,EASL,CAED;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;sBAKA,iBAAS,CACP;AACA;AACA,mBACE,YAAK,SAAS,CAAC,KAAf,uBAIA,gBAAQ,SAAS,CAAC,YAAlB,wBACA,wDADA,cAEA,KAAC,KAAD,EACE,KAAK,CAAE,OADT,CAEE,MAAM,CAAE,OAFV,CAGE,SAAS,CAAC,UAHZ,CAIE,IAAI,CAAE,KAAKW,KAAL,CAAWM,IAJnB,CAKE,OAAO,CAAE,CACPS,SAAS,CAAE,CAAEC,KAAK,CAAE,KAAT,CADJ,CAEPC,MAAM,CAAE,CAAC,QAAD,CAFD,CAGPC,eAAe,CAAE,SAHV,CAIPC,MAAM,CAAE,CACNC,SAAS,CAAE,CAACC,KAAK,CAAE,OAAR,CAAiBC,QAAQ,CAAE,EAA3B,CADL,CAENC,MAAM,CAAE,CAACC,SAAS,CAAC,OAAX,CAFF,CAJD,CAQPC,KAAK,CAAE,CACLL,SAAS,CAAE,CACXC,KAAK,CAAE,OADI,CAEXC,QAAQ,CAAE,EAFC,CADN,CARA,CAcPI,KAAK,CAAE,CACLC,QAAQ,CAAE,CADL,CAELC,QAAQ,CAAE,EAFL,CAGLR,SAAS,CAAE,CACTC,KAAK,CAAE,OADE,CAHN,CAdA,CALX,EAFA,cA6EA,oCACE,oCADF,cAEE,oCACE,cAAO,IAAI,CAAC,MAAZ,CAAmB,QAAQ,CAAE,KAAK1C,YAAlC,EADF,cAEE,eAAQ,OAAO,CAAE,KAAKoB,YAAtB,qBAFF,cAKE,iBACM,IAAI,CAAE,EADZ,CAEM,IAAI,CAAE,EAFZ,CAGM,KAAK,CAAE,KAAKC,KAAL,CAAWF,IAHxB,CAIM,QAAQ,CAAE,KAAKnB,YAJrB,CAKM,KAAK,CAAE,CAAEkD,SAAS,CAAE,EAAb,CAAiBb,KAAK,CAAE,KAAxB,CALb,EALF,GAFF,GA7EA,CAyHC,KAAKhB,KAAL,CAAWQ,WAAX,eACC,oCAAK,aAAM,IAAI,CAAC,GAAX,qDAAL,cACA,KAAC,GAAD,EAAK,EAAE,CAAE,CAAEQ,KAAK,CAAE,OAAT,CAAT,uBACA,KAAC,cAAD,IADA,EADA,cAIA,YAJA,GA1HF,cAmLC,kCAAK,cAAM,IAAI,CAAC,GAAX,gCAAkC,KAAKhB,KAAL,CAAWO,OAA7C,SAAL,EAnLD,cAoLA,kCAAK,cAAM,IAAI,CAAC,GAAX,wCAA4B,UAAG,IAAI,CAAC,kDAAR,kCAA5B,GAAL,EApLA,cAqLA,kCAAK,cAAM,IAAI,CAAC,GAAX,oDAAwC,UAAG,IAAI,CAAC,4EAAR,wBAAxC,eAAL,EArLA,GAJA,EADF,CAqMD,C,2BApmByB5C,KAAK,CAACC,S,EAymBlC,cAAea,cAAf,CACA;AAWA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
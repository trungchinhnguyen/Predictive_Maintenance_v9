{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentrungchinh/project_19/src/App.jsx\";\nimport './App.css';\nimport axios from 'axios'; // import React, { Component } from 'react';\n\nimport React from 'react';\nimport { Component } from 'react'; // import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport { inference } from './inference.js';\nimport { columnNames } from './inference.js';\nimport { modelDownloadInProgress } from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing'; // import Dashboard from './Dashboard';\n\nimport './Dashboard.css'; // import {textValue_exp} from './Dashboard.jsx';\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n// import React from 'react'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport './FileUpload/FileUpload.scss'; // import axios from 'axios'\n\nimport ReactFileReader from 'react-file-reader';\nimport { CsvToHtmlTable } from 'react-csv-to-table'; // import processCSV from './processCSV.js';\n\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TextInputArea extends React.Component {\n  // class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onFileChange = event => {\n      // const [textValue, setTextValue] = useState(\"\");\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n      const file = event.target.files[0];\n      let reader = new FileReader();\n\n      reader.onload = function (event) {\n        const file = event.target.result;\n        console.log('content', file); // this.setState({ text: file });\n        // setTextValue(file);\n        // inference(file)\n      };\n\n      reader.onerror = e => alert(e.target.error.name);\n\n      reader.readAsText(file); // const textValue = reader.readAsText(file);\n      // this.setState({ text: textValue });\n      // inference.then( result => {\n      //   this.setState({\n      //     // text : file,\n      //     data:result[1],\n      //     latency:result[0],\n      //   })\n      // })\n      // let reader = new FileReader();\n      // reader.onload = () => {\n      //   // Use reader.result\n      //   this.setState({\n      //     csvData: reader.result, \n      //     text: reader.result\n      //   })\n      // };\n      // reader.readAsText(this.state.selectedFile);\n      // inference(this.state.text).then( result => {\n      //   this.setState({\n      //     text : this.state.text,\n      //     data:result[1],\n      //     latency:result[0],\n      //   });\n      // });\n    };\n\n    this.onFileUpload = () => {\n      // Create an object of formData\n      // const formData = new FormData();\n      // // Update the formData object\n      // formData.append(\n      //   \"myFile\",\n      //   this.state.selectedFile,\n      //   this.state.selectedFile.name\n      // );\n      // Details of the uploaded file\n      // console.log(this.state.selectedFile);\n      // console.log(this.state.selectedFile.name);\n      // console.log(event.target.files[0]);\n      // console.log(event.target.files[0].name);\n      // this.setState({ selectedFile: event.target.files[0] });\n      // Request made to the backend api\n      // Send formData object\n      // axios.post(\"/upload\", formData);\n      // axios.post(\"/upload\", {file: (this.state.selectedFile,this.state.selectedFile.name)});\n      axios.post('/upload', {\n        file: (this.state.selectedFile, this.state.selectedFile.name)\n      } //     {\n      //     headers: {\n      //       \"Content-Type\": \"multipart/form-data\",\n      //     },\n      //   }\n      ).then(res => {\n        console.log(res); // let reader = new FileReader();\n        // reader.onload = () => {\n        //   // Use reader.result\n        //   this.setState({\n        //     csvData: reader.result, \n        //     text: reader.result\n        //   })\n        // };\n        // reader.readAsText(res.data);\n      }).catch(err => {\n        // inform the user\n        console.error(err); // removeFile(file.name)\n      }); // axios.get(`/upload`)\n      //     .then(res => {\n      //       console.log(res);\n      //       // const text = res;\n      //       // const text = 'test';\n      //       // let reader = new FileReader();\n      //       // reader.onload = () => {\n      //       //   // Use reader.result\n      //       //   this.setState({\n      //       //     csvData: reader.result, \n      //       //     text: reader.result\n      //       //   })\n      //       // };\n      //       // reader.readAsText(res.data[0]);\n      //   })\n\n      let reader = new FileReader();\n\n      reader.onload = () => {\n        // Use reader.result\n        // this.setState({\n        //   csvData: reader.result, \n        //   text: reader.result\n        // })\n        // const textvalue = ''\n        // const csv = Papa.parse(reader.result, { header: true });\n        // const parsedData = csv?.data;\n        // // const columns = Object.keys(parsedData[0])\n        // const columns = Object.keys(parsedData[0,1])\n        // // const value = Object.keys(parsedData[1])\n        // // textvalue = Object.keys(parsedData[0][0]) + ' ' + Object.keys(parsedData[1][0]) + Object.keys(parsedData[0][1]) + ' ' + Object.keys(parsedData[1][1])\n        // // textvalue.append(value)\n        const textvalue = '';\n        const lines = reader.result.split(\"\\n\");\n        const headers = lines[0].split(\",\"); // const result = [];\n\n        const obj = {};\n        const currentLine = lines[1].split(\",\");\n\n        for (let j = 0; j < headers.length; j++) {\n          // obj[headers[j].trim()] = currentLine[j].trim();\n          const factor = '';\n          factor.concat(headers[j]);\n          factor.concat(currentLine[j]);\n          textvalue.concat(factor);\n        } // const textvalue = JSON.stringify(obj);\n        // for (let i = 1; i < lines.length; i++) {\n        //   const obj = {};\n        //   // const textline = '';\n        //   const currentLine = lines[i].split(\",\");\n        //   for (let j = 0; j < headers.length; j++) {\n        //     obj[headers[j].trim()] = currentLine[j].trim();\n        //     // const factor = `${headers[j]}` + ' ' + `${currentLine[j]}` + ' ';\n        //     // textline.append(factor);\n        //   }\n        //   const textline = JSON.stringify(obj);\n        //   result.push(textline);\n        //   // textvalue.append(textline);\n        // }\n        // const textvalue = result[0];\n\n\n        this.setState({\n          csvData: textvalue,\n          text: textvalue\n        });\n        inference(textvalue).then(result => {\n          this.setState({\n            text: this.state.text,\n            data: result[1],\n            latency: result[0]\n          });\n        }); // inference(reader.result).then( result => {\n        //   this.setState({\n        //     text : this.state.text,\n        //     data:result[1],\n        //     latency:result[0],\n        //   });\n        // })\n      };\n\n      reader.readAsText(this.state.selectedFile); // reader.readAsText(event.target.files[0]);\n      // inference(this.state.text).then( result => {\n      //   this.setState({\n      //     text : this.state.text,\n      //     data:result[1],\n      //     latency:result[0],\n      //   });\n      // });\n    };\n\n    this.state = {\n      text: '',\n      data: columnNames,\n      latency: 0.0,\n      downloading: modelDownloadInProgress(),\n      selectedFile: null,\n      csvData: '',\n      array: [],\n      columns: null // name:'',\n\n    };\n    this.handleChange = this.handleChange.bind(this); // this.CSVToArray = this.CSVToArray.bind(this);\n    // this.processCSV = this.processCSV.bind(this);\n    // this.onFileChange = this.onFileChange.bind(this);\n    // this.onFileUpload = this.onFileUpload.bind(this);\n    // [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n    // this.FileReader = this.FileReader.bind(this);\n  } // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  //     let reader = new FileReader();\n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     // <div className=\"Dashboard\">\n  //     <div className=\"App\">\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n  //   handleChange(event) { \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.files[0];\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  //     // const file = e.target.files[0];\n  //     let reader = new FileReader();\n  //     reader.onload = (e) => {\n  //       const file = response.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  //     reader.onerror = (e) => alert(response.error.name);\n  //     reader.readAsText(file);\n  //   inference(textValue).then( result => {\n  //     this.setState({\n  //       text : textValue,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n  // }\n  // onFileChange(e) {\n  //   const file = e.target.files[0];\n  //   console.log(file.name);\n  //   console.log(file.size);\n  //   console.log(file.type);\n  // }\n  // onFileChange(e) {\n  //   const file = e.target.files;\n  //   console.log(file);\n  // }\n\n\n  // fileData = () => {\n  //   if (this.state.selectedFile) {\n  //       return (\n  //           <div>\n  //               <h5>File Details:</h5>\n  //               <p>File Name: {this.state.selectedFile.name}</p>\n  //               <p>File Type: {this.state.selectedFile.type}</p>\n  //               <p>\n  //                   Last Modified:{\" \"}\n  //                   {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //               </p>\n  //           </div>\n  //       );\n  //   } else {\n  //       return (\n  //           <div>\n  //               <br />\n  //               <h5>Choose before Pressing the Upload button</h5>\n  //           </div>\n  //       );\n  //   }\n  // };\n  // componentWillMount(){\n  //   axios.get(`/upload`)\n  //   .then(res => {\n  //     const text = res.data;\n  //     this.setState({ text });\n  //   })\n  // }\n  // handleFiles = files => {\n  //   let reader = new FileReader();\n  //   reader.onload = () => {\n  //     // Use reader.result\n  //     this.setState({\n  //       csvData: reader.result\n  //     })\n  //   }\n  //   reader.readAsText(files[0]);\n  //   inference(this.state.csvData).then( result => {\n  //     this.setState({\n  //       text : this.state.text,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n  // }\n  //   processCSV(str, delim=',') {\n  //     const headers = str.slice(0,str.indexOf('\\n')).split(delim);\n  //     const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n  //     const newArray = rows.map( row => {\n  //         const values = row.split(delim);\n  //         const eachObject = headers.reduce((obj, header, i) => {\n  //             obj[header] = values[i];\n  //             return obj;\n  //         }, {})\n  //         return eachObject;\n  //     })\n  //   let reader = new FileReader();\n  //   reader.onload = () => {\n  //     // Use reader.result\n  //       const array = new Int8Array(reader.result)\n  //   }\n  //   reader.readAsArrayBuffer(newArray)\n  // }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.checkModelStatus(), 1000); // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.data;\n    //   this.setState({ text });\n    // })\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress()\n    });\n\n    if (!this.state.downloading) {\n      this.timerID = setInterval(() => this.checkModelStatus, 5000000);\n    }\n  }\n\n  handleChange(event) {\n    // Dashboard = (e) => {\n    // const [textValue, setTextValue] = useState(\"\");\n    // const handleChange = (e) => {\n    // event.preventDefault() \n    // this.setState({ selectedFile : event.target.files[0]});\n    // this.setState({ name: event.target.files[0].name });\n    // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.content;\n    //   this.setState({ text });\n    // })\n    // const file = event.target.files[0];\n    // let reader = new FileReader();\n    // reader.onload(event).then(result => {\n    //   const file = event.target.result;\n    //   console.log(file);\n    // this.setState({ text: file });\n    // inference(file).then( result => {\n    //   this.setState({\n    //     text : file,\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n    // });\n    // reader.onerror(event).alert(event.target.error.name);\n    // reader.readAsText(file);\n    // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.data;\n    //   this.setState({ text });\n    // });\n    inference(event.target.value).then(result => {\n      this.setState({\n        text: event.target.value,\n        data: result[1],\n        latency: result[0]\n      });\n    });\n  } //   CSVToArray( strData, strDelimiter ){\n  //     strDelimiter = (strDelimiter || \",\");\n  //     let objPattern = new RegExp(\n  //       (\n  //         \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n  //         \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n  //         \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n  //       ),\n  //       \"gi\");\n  //     let arrData = [];\n  //     let headers = [];\n  //     let headersFound = false;\n  //     let headerIndex = 0;\n  //     let arrMatches = null;\n  //     while(arrMatches = objPattern.exec( strData )) {\n  //         let strMatchedDelimiter = arrMatches[ 1 ];\n  //         if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {\n  //             arrData.push( {} );\n  //             headersFound = true;\n  //             headerIndex = 0;\n  //         }\n  //         let strMatchedValue;\n  //         if (arrMatches[2]) {\n  //             strMatchedValue = arrMatches[2].replace(new RegExp( \"\\\"\\\"\", \"g\" ),\"\\\"\");\n  //         } else {\n  //             strMatchedValue = arrMatches[3];\n  //         }\n  //         if (!headersFound) {\n  //           headers.push(strMatchedValue);\n  //         } else {\n  //           arrData[arrData.length -1][headers[headerIndex]] = strMatchedValue;\n  //           headerIndex ++;\n  //         }\n  //     }\n  //     return arrData;\n  // }\n  // handleSubmit = event => {\n  //   event.preventDefault();\n  //   // const user = {\n  //   //   name: this.state.name\n  //   // };\n  //   // axios.post(`/upload`, { user })\n  //   axios.post('/upload', {file: (this.state.file, this.state.name)})\n  //   // axios.post(`/upload`, { name: this.state.name })\n  //     .then(res => {\n  //       console.log(res);\n  //       console.log(res.data);\n  //     })\n  //     .catch((err) => {\n  //       // inform the user\n  //       console.error(err)\n  //       // removeFile(file.name)\n  //   })\n  // }\n  //   handleChange (event) {  \n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n  // }\n  // handleChange(event) { \n  //   axios.get('/upload')\n  //   .then(response => {\n  //     // Convert data to CSV format(optional)\n  //     const file = response.files[0];\n  //   })\n  //   .catch(error => {\n  //     // Handle errors\n  //     console.error(error);\n  //   });\n  //   // const file = e.target.files[0];\n  //   let reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     const file = response.result;\n  //     console.log(file);\n  //     setTextValue(file);\n  //   };\n  //   reader.onerror = (e) => alert(response.error.name);\n  //   reader.readAsText(file);\n  // inference(textValue).then( result => {\n  //   this.setState({\n  //     text : textValue,\n  //     data:result[1],\n  //     latency:result[0],\n  //   });\n  // });\n  // }\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.file;\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  //     // const file = e.target.files[0];\n  //     let reader = new FileReader();\n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     <div className=\"Dashboard\">\n  //   {/* <div className=\"App\">  */}\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n  // handleChange (event) {  \n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n  // }\n  // render() {\n\n\n  render() {\n    // const [state, setState] = useState(null);\n    // const [textValue, setTextValue] = this.useState(\"\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"In-Browser Transformer Inference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          width: '400px',\n          height: '200px',\n          chartType: \"BarChart\",\n          data: this.state.data,\n          options: {\n            chartArea: {\n              width: '40%'\n            },\n            colors: ['purple'],\n            backgroundColor: '#282c34',\n            legend: {\n              textStyle: {\n                color: 'white',\n                fontSize: 10\n              },\n              labels: {\n                fontColor: 'white'\n              }\n            },\n            vAxis: {\n              textStyle: {\n                color: 'white',\n                fontSize: 13\n              }\n            },\n            hAxis: {\n              minValue: 5,\n              maxValue: 50,\n              textStyle: {\n                color: 'white'\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"File Upload!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 914,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: this.onFileChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.onFileUpload,\n              children: \"Upload!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(ReactFileReader, {\n              handleFiles: this.handleFiles,\n              fileTypes: '.csv'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 920,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              cols: 30,\n              rows: 20,\n              value: this.state.text // value={this.state.csvData}\n              ,\n              onChange: this.onFileChange,\n              style: {\n                marginTop: 15,\n                width: \"50%\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 923,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 915,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 913,\n          columnNumber: 7\n        }, this), this.state.downloading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"2\",\n            children: \"Downloading model from CDN to browser..\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 980,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '400px'\n            },\n            children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 982,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 981,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 984,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"Inference Latency \", this.state.latency, \" ms\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1037,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"GitHub Repo: \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://github.com/jobergum/browser-ml-inference\",\n              children: \"browser-ml-inference\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1038,\n              columnNumber: 40\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1038,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"Model was trained on the \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",\n              children: \"GoEmotions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1039,\n              columnNumber: 52\n            }, this), \" dataset.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1039,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1039,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 830,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TextInputArea; // export default App;\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","useState","FileUpload","FileList","FileProcessing","FontAwesomeIcon","faPlus","ReactFileReader","CsvToHtmlTable","Papa","TextInputArea","constructor","props","onFileChange","event","setState","selectedFile","target","files","file","reader","FileReader","onload","result","console","log","onerror","e","alert","error","name","readAsText","onFileUpload","post","state","then","res","catch","err","textvalue","lines","split","headers","obj","currentLine","j","length","factor","concat","csvData","text","data","latency","downloading","array","columns","handleChange","bind","componentDidMount","timerID","setInterval","checkModelStatus","value","render","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue","handleFiles","marginTop"],"sources":["/Users/nguyentrungchinh/project_19/src/App.jsx"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing';\n// import Dashboard from './Dashboard';\nimport './Dashboard.css';\n\n\n// import {textValue_exp} from './Dashboard.jsx';\n\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n\n// import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload/FileUpload.scss'\n// import axios from 'axios'\n\nimport ReactFileReader from 'react-file-reader';\nimport { CsvToHtmlTable } from 'react-csv-to-table';\n\n\n// import processCSV from './processCSV.js';\n\nimport Papa from \"papaparse\";\n\n \n\nclass TextInputArea extends React.Component {\n// class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n      selectedFile: null,\n      csvData: '',\n      array: [],\n      columns: null\n      // name:'',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    // this.CSVToArray = this.CSVToArray.bind(this);\n    // this.processCSV = this.processCSV.bind(this);\n\n    // this.onFileChange = this.onFileChange.bind(this);\n    // this.onFileUpload = this.onFileUpload.bind(this);\n    // [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n    // this.FileReader = this.FileReader.bind(this);\n  }\n\n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     // <div className=\"Dashboard\">\n  //     <div className=\"App\">\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n\n\n  //   handleChange(event) { \n      \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.files[0];\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n\n  //     reader.onload = (e) => {\n  //       const file = response.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(response.error.name);\n  //     reader.readAsText(file);\n  \n\n      \n  //   inference(textValue).then( result => {\n  //     this.setState({\n  //       text : textValue,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n  // onFileChange(e) {\n  //   const file = e.target.files[0];\n  //   console.log(file.name);\n  //   console.log(file.size);\n  //   console.log(file.type);\n  // }\n\n  // onFileChange(e) {\n  //   const file = e.target.files;\n  //   console.log(file);\n  // }\n\n  onFileChange =event => {\n    // const [textValue, setTextValue] = useState(\"\");\n    this.setState({ selectedFile: event.target.files[0] });\n\n          const file = event.target.files[0];\n      \n          let reader = new FileReader();\n      \n          reader.onload = function(event) {\n            const file = event.target.result;\n            console.log( 'content', file);\n            // this.setState({ text: file });\n            // setTextValue(file);\n\n            // inference(file)\n    \n\n          };\n\n          reader.onerror = (e) => alert(e.target.error.name);\n          reader.readAsText(file); \n\n          // const textValue = reader.readAsText(file);\n\n          // this.setState({ text: textValue });\n\n          // inference.then( result => {\n          //   this.setState({\n          //     // text : file,\n          //     data:result[1],\n          //     latency:result[0],\n          //   })\n    \n          // })\n\n\n\n          // let reader = new FileReader();\n\n          // reader.onload = () => {\n          //   // Use reader.result\n  \n  \n          //   this.setState({\n          //     csvData: reader.result, \n          //     text: reader.result\n          //   })\n  \n          // };\n          // reader.readAsText(this.state.selectedFile);\n  \n  \n  \n  \n          // inference(this.state.text).then( result => {\n          //   this.setState({\n          //     text : this.state.text,\n          //     data:result[1],\n          //     latency:result[0],\n          //   });\n      \n          // });\n\n\n  }\n\n\n  // showFile = async (e) => { \n//   showFile = async () => { \n//     // e.preventDefault() \n//     const reader = new FileReader() \n//     reader.onload = async () => { \n//        const text = (this.state.selectedFile) \n//        console.log(text) \n//        alert(text) \n//     }; \n//     reader.readAsText(this.state.selectedFile) \n//  } \n\n\n\n  onFileUpload=() => {\n   \n    // Create an object of formData\n    // const formData = new FormData();\n\n    // // Update the formData object\n    // formData.append(\n    //   \"myFile\",\n    //   this.state.selectedFile,\n    //   this.state.selectedFile.name\n    // );\n\n    // Details of the uploaded file\n    // console.log(this.state.selectedFile);\n    // console.log(this.state.selectedFile.name);\n\n      // console.log(event.target.files[0]);\n      // console.log(event.target.files[0].name);\n\n      // this.setState({ selectedFile: event.target.files[0] });\n\n    // Request made to the backend api\n    // Send formData object\n    // axios.post(\"/upload\", formData);\n    // axios.post(\"/upload\", {file: (this.state.selectedFile,this.state.selectedFile.name)});\n\n\n\n    axios.post('/upload', {file: (this.state.selectedFile, this.state.selectedFile.name)}\n\n        //     {\n        //     headers: {\n        //       \"Content-Type\": \"multipart/form-data\",\n        //     },\n        //   }\n          )\n          .then((res) => {\n            console.log(res);\n\n            // let reader = new FileReader();\n\n            // reader.onload = () => {\n            //   // Use reader.result\n    \n    \n            //   this.setState({\n            //     csvData: reader.result, \n            //     text: reader.result\n            //   })\n    \n            // };\n            // reader.readAsText(res.data);\n            \n\n\n\n            })\n            .catch((err) => {\n                // inform the user\n                console.error(err)\n                // removeFile(file.name)\n            })\n\n\n\n      // axios.get(`/upload`)\n      //     .then(res => {\n      //       console.log(res);\n      //       // const text = res;\n      //       // const text = 'test';\n\n\n      //       // let reader = new FileReader();\n\n      //       // reader.onload = () => {\n      //       //   // Use reader.result\n    \n    \n      //       //   this.setState({\n      //       //     csvData: reader.result, \n      //       //     text: reader.result\n      //       //   })\n    \n      //       // };\n      //       // reader.readAsText(res.data[0]);\n            \n\n\n      //   })\n\n\n\n\n\n        let reader = new FileReader();\n\n        reader.onload = () => {\n          // Use reader.result\n\n\n          // this.setState({\n          //   csvData: reader.result, \n          //   text: reader.result\n          // })\n\n          // const textvalue = ''\n          // const csv = Papa.parse(reader.result, { header: true });\n          // const parsedData = csv?.data;\n          // // const columns = Object.keys(parsedData[0])\n          // const columns = Object.keys(parsedData[0,1])\n          // // const value = Object.keys(parsedData[1])\n          // // textvalue = Object.keys(parsedData[0][0]) + ' ' + Object.keys(parsedData[1][0]) + Object.keys(parsedData[0][1]) + ' ' + Object.keys(parsedData[1][1])\n          // // textvalue.append(value)\n\n\n          const textvalue = '';\n          const lines = reader.result.split(\"\\n\");\n          const headers = lines[0].split(\",\");\n          \n\n          // const result = [];\n\n          const obj = {};\n          const currentLine = lines[1].split(\",\");\n\n          for (let j = 0; j < headers.length; j++) {\n            // obj[headers[j].trim()] = currentLine[j].trim();\n            const factor = '';\n            factor.concat(headers[j]);\n            factor.concat(currentLine[j]);\n            textvalue.concat(factor);\n\n          }\n          // const textvalue = JSON.stringify(obj);\n\n      \n          // for (let i = 1; i < lines.length; i++) {\n          //   const obj = {};\n          //   // const textline = '';\n          //   const currentLine = lines[i].split(\",\");\n           \n          //   for (let j = 0; j < headers.length; j++) {\n          //     obj[headers[j].trim()] = currentLine[j].trim();\n              \n          //     // const factor = `${headers[j]}` + ' ' + `${currentLine[j]}` + ' ';\n          //     // textline.append(factor);\n              \n          //   }\n          //   const textline = JSON.stringify(obj);\n          //   result.push(textline);\n          //   // textvalue.append(textline);\n          // }\n      \n          // const textvalue = result[0];\n\n\n          this.setState({\n            csvData: textvalue, \n            text: textvalue\n          })\n\n\n          inference(textvalue).then( result => {\n            this.setState({\n              text : this.state.text,\n              data:result[1],\n              latency:result[0],\n            });\n      \n          })\n\n\n\n          // inference(reader.result).then( result => {\n          //   this.setState({\n          //     text : this.state.text,\n          //     data:result[1],\n          //     latency:result[0],\n          //   });\n      \n          // })\n\n\n\n\n        };\n        reader.readAsText(this.state.selectedFile);\n        // reader.readAsText(event.target.files[0]);\n\n\n\n        // inference(this.state.text).then( result => {\n        //   this.setState({\n        //     text : this.state.text,\n        //     data:result[1],\n        //     latency:result[0],\n        //   });\n    \n        // });\n\n\n\n\n\n     };\n\n  // fileData = () => {\n \n  //   if (this.state.selectedFile) {\n\n  //       return (\n  //           <div>\n  //               <h5>File Details:</h5>\n  //               <p>File Name: {this.state.selectedFile.name}</p>\n\n  //               <p>File Type: {this.state.selectedFile.type}</p>\n\n  //               <p>\n  //                   Last Modified:{\" \"}\n  //                   {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //               </p>\n\n  //           </div>\n  //       );\n  //   } else {\n  //       return (\n  //           <div>\n  //               <br />\n  //               <h5>Choose before Pressing the Upload button</h5>\n  //           </div>\n  //       );\n  //   }\n  // };\n\n\n  // componentWillMount(){\n\n  //   axios.get(`/upload`)\n  //   .then(res => {\n  //     const text = res.data;\n  //     this.setState({ text });\n  //   })\n\n\n  // }\n\n\n  // handleFiles = files => {\n  //   let reader = new FileReader();\n  //   reader.onload = () => {\n  //     // Use reader.result\n  //     this.setState({\n  //       csvData: reader.result\n  //     })\n  //   }\n  //   reader.readAsText(files[0]);\n\n  //   inference(this.state.csvData).then( result => {\n  //     this.setState({\n  //       text : this.state.text,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n\n  //   });\n\n\n  // }\n\n\n  //   processCSV(str, delim=',') {\n  //     const headers = str.slice(0,str.indexOf('\\n')).split(delim);\n  //     const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n\n  //     const newArray = rows.map( row => {\n  //         const values = row.split(delim);\n  //         const eachObject = headers.reduce((obj, header, i) => {\n  //             obj[header] = values[i];\n  //             return obj;\n  //         }, {})\n  //         return eachObject;\n  //     })\n\n  //   let reader = new FileReader();\n\n  //   reader.onload = () => {\n  //     // Use reader.result\n  //       const array = new Int8Array(reader.result)\n  //   }\n\n  //   reader.readAsArrayBuffer(newArray)\n  // }\n\n\n  componentDidMount() {\n\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n\n    // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.data;\n    //   this.setState({ text });\n\n    // })\n\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange (event) {  \n  \n        // Dashboard = (e) => {\n        // const [textValue, setTextValue] = useState(\"\");\n        // const handleChange = (e) => {\n\n        // event.preventDefault() \n\n        // this.setState({ selectedFile : event.target.files[0]});\n\n        // this.setState({ name: event.target.files[0].name });\n\n          // axios.get(`/upload`)\n          // .then(res => {\n          //   const text = res.content;\n          //   this.setState({ text });\n          // })\n\n\n          // const file = event.target.files[0];\n      \n          // let reader = new FileReader();\n      \n          // reader.onload(event).then(result => {\n          //   const file = event.target.result;\n          //   console.log(file);\n            // this.setState({ text: file });\n\n            // inference(file).then( result => {\n            //   this.setState({\n            //     text : file,\n            //     data:result[1],\n            //     latency:result[0],\n            //   });\n      \n            // });\n\n\n          // });\n\n          // reader.onerror(event).alert(event.target.error.name);\n          // reader.readAsText(file);\n\n\n          // axios.get(`/upload`)\n          // .then(res => {\n          //   const text = res.data;\n          //   this.setState({ text });\n      \n          // });\n          \n          inference(event.target.value).then( result => {\n            this.setState({\n              text : event.target.value,\n              data:result[1],\n              latency:result[0],\n            });\n    \n          });\n    \n    }\n\n\n  //   CSVToArray( strData, strDelimiter ){\n  //     strDelimiter = (strDelimiter || \",\");\n  //     let objPattern = new RegExp(\n  //       (\n  //         \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n  //         \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n  //         \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n  //       ),\n  //       \"gi\");\n\n  //     let arrData = [];\n  //     let headers = [];\n  //     let headersFound = false;\n  //     let headerIndex = 0;\n\n  //     let arrMatches = null;\n\n  //     while(arrMatches = objPattern.exec( strData )) {\n  //         let strMatchedDelimiter = arrMatches[ 1 ];\n  //         if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {\n  //             arrData.push( {} );\n  //             headersFound = true;\n  //             headerIndex = 0;\n  //         }\n\n  //         let strMatchedValue;\n  //         if (arrMatches[2]) {\n  //             strMatchedValue = arrMatches[2].replace(new RegExp( \"\\\"\\\"\", \"g\" ),\"\\\"\");\n  //         } else {\n  //             strMatchedValue = arrMatches[3];\n  //         }\n\n  //         if (!headersFound) {\n  //           headers.push(strMatchedValue);\n  //         } else {\n  //           arrData[arrData.length -1][headers[headerIndex]] = strMatchedValue;\n  //           headerIndex ++;\n  //         }\n  //     }\n  //     return arrData;\n  // }\n\n\n    // handleSubmit = event => {\n    //   event.preventDefault();\n  \n    //   // const user = {\n    //   //   name: this.state.name\n    //   // };\n  \n    //   // axios.post(`/upload`, { user })\n\n    //   axios.post('/upload', {file: (this.state.file, this.state.name)})\n    //   // axios.post(`/upload`, { name: this.state.name })\n    //     .then(res => {\n    //       console.log(res);\n    //       console.log(res.data);\n    //     })\n    //     .catch((err) => {\n    //       // inform the user\n    //       console.error(err)\n    //       // removeFile(file.name)\n    //   })\n\n\n    // }\n\n\n\n\n  //   handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n    // handleChange(event) { \n      \n    //   axios.get('/upload')\n    //   .then(response => {\n    //     // Convert data to CSV format(optional)\n    //     const file = response.files[0];\n    //   })\n    //   .catch(error => {\n    //     // Handle errors\n    //     console.error(error);\n    //   });\n  \n  \n    //   // const file = e.target.files[0];\n  \n    //   let reader = new FileReader();\n\n    //   reader.onload = (e) => {\n    //     const file = response.result;\n    //     console.log(file);\n    //     setTextValue(file);\n    //   };\n  \n    //   reader.onerror = (e) => alert(response.error.name);\n    //   reader.readAsText(file);\n  \n\n      \n    // inference(textValue).then( result => {\n    //   this.setState({\n    //     text : textValue,\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n\n  // }\n\n\n  \n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  \n  \n  \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.file;\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  \n  \n  //   };\n  \n  //   return (\n  //     <div className=\"Dashboard\">\n  //   {/* <div className=\"App\">  */}\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  \n  \n  \n  //     </div>\n  //   );\n  // };\n\n\n\n  // handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n  \n\n\n\n  // render() {\n  render() {\n    // const [state, setState] = useState(null);\n    // const [textValue, setTextValue] = this.useState(\"\");\n    return (\n      <div className=\"App\">\n\n      {/* <FileProcessing /> */}\n\n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n      {/* <div> \n            <input type=\"file\" onChange={() => this.setState(this.text, this.showFile().result )} /> \n        </div> */}\n\n\n          {/* <FileProcessing /> */}\n\n\n          {/* <Dashboard /> */}\n\n\n\n        {/* <div>\n\n          {this.Dashboard()}\n        </div> */}\n\n\n\n          {/* {this.handleChange()} */}\n\n\n       {/* <div>\n\n       {this.handleChange}   \n        </div> */}\n\n\n      {/* <div>\n        <h5>File upload</h5>\n        <hr />\n        <div>\n          <form>\n            <table>\n              <tr>\n                <td>Select File :</td>\n              </tr>\n              <tr>\n                <input onChange={this.onFileChange} type=\"file\" multiple />\n              </tr>\n            </table>\n          </form>\n        </div>\n      </div> */}\n\n\n      <div>\n        <h5>File Upload!</h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>\n            Upload!\n          </button>\n          <ReactFileReader  handleFiles={this.handleFiles} fileTypes={'.csv'}>\n                  {/* <button className='btn'>Upload</button> */}\n          </ReactFileReader>\n          <textarea\n                cols={30}\n                rows={20}\n                value={this.state.text}\n                // value={this.state.csvData}\n                onChange={this.onFileChange}\n                style={{ marginTop: 15, width: \"50%\" }}\n            ></textarea> \n        </div>\n      </div>\n\n\n\n      {/* <div>\n         <ReactFileReader handleFiles={this.handleFiles} fileTypes={'.csv'}>\n                 <button className='btn'>Upload</button>\n          </ReactFileReader>\n          <CsvToHtmlTable\n               data={this.state.csvData}\n               csvDelimiter=\",\"\n               tableClassName=\"table table-striped table-hover\"\n           />\n      </div> */}\n\n\n\n{/* \n      <div> \n      <input type=\"file\" onChange={(e) => this.showFile(e)} /> \n   </div> */}\n\n      {/* <div>\n                <h5>\n                    File Upload using React!\n                </h5>\n                <div>\n                    <input type=\"file\" onChange={this.onFileChange} />\n                    <button onClick={this.onFileUpload}>\n                        Upload!\n                    </button>\n                </div>\n                {this.fileData()}\n            </div> */}\n\n\n      {/* <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Upload file:\n          <input type=\"file\" name=\"name\"  onChange={this.handleChange} />\n        </label>\n        <button type=\"submit\">Upload</button>\n      </form>\n      </div> */}\n      \n\n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n    {/* <div style={{ display: \"flex\" }}>\n          <input type=\"file\" name=\"input\" onChange={this.handleChange} />\n          <textarea\n            cols={30}\n            rows={20}\n            value={this.textValue}\n            onChange={this.setTextValue}\n            style={{ marginTop: 15, width: \"50%\" }}\n          ></textarea>\n        </div> */}\n\n\n      {/* <div>\n      {this.state.data}     \n      </div> */}\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}\n        \n       >\n      </textarea>  */}\n\n\n      \n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus // onChange={this.handleChange}\n       placeholder={Dashboard.textValue} autoFocus // onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {Dashboard.textValue}\n        // onChange={e => Dashboard.textarea.onChange(e.target.value)}\n        // onChange={Dashboard.setTextValue}\n        onChange={this.onFileChange}\n        // onDropRead={text => Dashboard.textarea.onChange.value}\n\n        // textareaProps={{\n        //   // cols: 24,\n        //   // rows: 8,\n        //   placeholder: \"Drop one text file here...\"\n        // } }\n\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea> */}\n\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header> \n\n\n    </div>   \n    );\n\n\n\n\n  };\n  \n\n\n}\nexport default TextInputArea;\n// export default App;\n\n\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":"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;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAEA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAGA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;;;EAiSA;EAEA;EAEA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAEA;EACA;EACA;EACA;EACA;EAGA;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EAGA;EAGA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EAEA;EACA;EAGAC,iBAAiB,GAAG;IAElB,KAAKC,OAAL,GAAeC,WAAW,CACxB,MAAM,KAAKC,gBAAL,EADkB,EAExB,IAFwB,CAA1B,CAFkB,CAOlB;IACA;IACA;IACA;IAEA;EAED;;EAEDA,gBAAgB,GAAG;IACjB,KAAK9C,QAAL,CAAc;MACZsC,WAAW,EAAExD,uBAAuB;IADxB,CAAd;;IAGA,IAAI,CAAC,KAAKqC,KAAL,CAAWmB,WAAhB,EAA6B;MAC3B,KAAKM,OAAL,GAAeC,WAAW,CACxB,MAAM,KAAKC,gBADa,EAExB,OAFwB,CAA1B;IAID;EACF;;EAEDL,YAAY,CAAE1C,KAAF,EAAS;IAEf;IACA;IACA;IAEA;IAEA;IAEA;IAEE;IACA;IACA;IACA;IACA;IAGA;IAEA;IAEA;IACA;IACA;IACE;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IAGF;IAEA;IACA;IAGA;IACA;IACA;IACA;IAEA;IAEAnB,SAAS,CAACmB,KAAK,CAACG,MAAN,CAAa6C,KAAd,CAAT,CAA8B3B,IAA9B,CAAoCZ,MAAM,IAAI;MAC5C,KAAKR,QAAL,CAAc;QACZmC,IAAI,EAAGpC,KAAK,CAACG,MAAN,CAAa6C,KADR;QAEZX,IAAI,EAAC5B,MAAM,CAAC,CAAD,CAFC;QAGZ6B,OAAO,EAAC7B,MAAM,CAAC,CAAD;MAHF,CAAd;IAMD,CAPD;EASL,CA9jBuC,CAikB1C;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGE;EACA;EAEA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAKF;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAGE;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAEA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EAEF;EAKA;EACA;EACA;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAEA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAGA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EACA;EACA;EAIA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAKA;;;EACAwC,MAAM,GAAG;IACP;IACA;IACA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,uBAIA;QAAQ,SAAS,EAAC,YAAlB;QAAA,wBACA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADA,eAEA,QAAC,KAAD;UACE,KAAK,EAAE,OADT;UAEE,MAAM,EAAE,OAFV;UAGE,SAAS,EAAC,UAHZ;UAIE,IAAI,EAAE,KAAK7B,KAAL,CAAWiB,IAJnB;UAKE,OAAO,EAAE;YACPa,SAAS,EAAE;cAAEC,KAAK,EA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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n  constructor() {\n    this.wasm = {};\n    this.webgl = {};\n    this.logLevelInternal = 'warning';\n  } // TODO standadize the getter and setter convention in env for other fields.\n\n\n  set logLevel(value) {\n    if (value === undefined) {\n      return;\n    }\n\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n      throw new Error(`Unsupported logging level: ${value}`);\n    }\n\n    this.logLevelInternal = value;\n  }\n\n  get logLevel() {\n    return this.logLevelInternal;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAKA,OAAM,MAAOA,OAAP,CAAc;EAClBC;IACE,KAAKC,IAAL,GAAY,EAAZ;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,gBAAL,GAAwB,SAAxB;EACD,CALiB,CAOlB;;;EACY,IAARC,QAAQ,CAACC,KAAD,EAAoB;IAC9B,IAAIA,KAAK,KAAKC,SAAd,EAAyB;MACvB;IACD;;IACD,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,CAAC,SAAD,EAAY,MAAZ,EAAoB,SAApB,EAA+B,OAA/B,EAAwC,OAAxC,EAAiDE,OAAjD,CAAyDF,KAAzD,MAAoE,CAAC,CAAtG,EAAyG;MACvG,MAAM,IAAIG,KAAJ,CAAU,8BAA8BH,KAAK,EAA7C,CAAN;IACD;;IACD,KAAKF,gBAAL,GAAwBE,KAAxB;EACD;;EACW,IAARD,QAAQ;IACV,OAAO,KAAKD,gBAAZ;EACD;;AAnBiB","names":["EnvImpl","constructor","wasm","webgl","logLevelInternal","logLevel","value","undefined","indexOf","Error"],"sources":["/Users/nguyentrungchinh/project_25/node_modules/onnxruntime-common/lib/env-impl.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from './env';\r\n\r\ntype LogLevelType = Env['logLevel'];\r\nexport class EnvImpl implements Env {\r\n  constructor() {\r\n    this.wasm = {};\r\n    this.webgl = {};\r\n    this.logLevelInternal = 'warning';\r\n  }\r\n\r\n  // TODO standadize the getter and setter convention in env for other fields.\r\n  set logLevel(value: LogLevelType) {\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\r\n      throw new Error(`Unsupported logging level: ${value}`);\r\n    }\r\n    this.logLevelInternal = value;\r\n  }\r\n  get logLevel(): LogLevelType {\r\n    return this.logLevelInternal;\r\n  }\r\n\r\n  debug?: boolean;\r\n\r\n  wasm: Env.WebAssemblyFlags;\r\n\r\n  webgl: Env.WebGLFlags;\r\n\r\n  [name: string]: unknown;\r\n\r\n  private logLevelInternal: Required<LogLevelType>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentrungchinh/project_19/src/App.jsx\";\nimport './App.css';\nimport axios from 'axios'; // import React, { Component } from 'react';\n\nimport React from 'react';\nimport { Component } from 'react'; // import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport { inference } from './inference.js';\nimport { columnNames } from './inference.js';\nimport { modelDownloadInProgress } from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList'; // import {uploadfile} from './uploadfile.js';\n// import React from 'react'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport './FileUpload.scss'; // import axios from 'axios'\n// function App() {\n//   const [files, setFiles] = useState([])\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n//   return (\n//     <div className=\"App\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n// export default App;\n// function App() {\n//   const [files, setFiles] = useState([])\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n//   componentDidMount= () =>{\n//     timerID = setInterval(\n//       () => checkModelStatus(),\n//       1000\n//     );\n//   }\n//   checkModelStatus= () => {\n//     setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     };\n//   }\n//   handleChange= (event) => {  \n//     inference(event.target.value).then( result => {\n//       this.setState({\n//         text : event.target.value,\n//         data:result[1],\n//         latency:result[0],\n//       });\n//     });\n//   }\n//   return (\n//     <div className=\"App\">\n//       <div>\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//       </div>\n//       <header className=\"App-header\">   \n//       <em>In-Browser Transformer Inference</em>\n//       <Chart  \n//         width={'400px'}\n//         height={'200px'}\n//         chartType=\"BarChart\"\n//         data={state.data}\n//         options={{\n//           chartArea: { width: '40%'},\n//           colors: ['purple'],\n//           backgroundColor: '#282c34',\n//           legend: { \n//             textStyle: {color: 'white', fontSize: 10},\n//             labels: {fontColor:'white'}\n//           },\n//           vAxis: {\n//             textStyle: {\n//             color: 'white',\n//             fontSize: 13\n//           }\n//           },\n//           hAxis: {\n//             minValue: 5,\n//             maxValue: 50,\n//             textStyle: {\n//               color: 'white'\n//             }\n//           }\n//       }}\n//       />\n//       {state.downloading && \n//         <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//         <Box sx={{ width: '400px' }}>\n//         <LinearProgress />\n//         </Box> \n//         <p></p>\n//         </div>\n//       }\n//       <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n//        placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n//       </textarea>\n//       {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n//       //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n//       // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n//         // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n//         value = {this.Dashboard.value}\n//         onChange={e => this.Dashboard.setValue(e.target.value)}\n//         onDropRead={text => this.Dashboard.setValue(text)}\n//         textareaProps={{\n//           // cols: 24,\n//           // rows: 8,\n//           placeholder: \"Drop one text file here...\"\n//         }}\n//         // onChange={this.Dashboard}  \n//         // {this.Dashboard()} \n//         ></textarea> */}\n//        <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n//       <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n//       <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\n// class TextInputArea extends React.Component {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.FileUpload = _ref => {\n      let {\n        files,\n        setFiles,\n        removeFile\n      } = _ref;\n\n      // function FileUpload ({ files, setFiles, removeFile })  {\n      const uploadHandler = event => {\n        const file = event.target.files[0];\n        if (!file) return;\n        file.isUploading = true;\n        setFiles([...files, file]); // upload file\n        // const formData = new FormData();\n        // formData.append(\n        //     // \"newFile\",\n        //     file.name,\n        //     file,\n        //     file.name\n        // )\n        // axios.post('http://localhost:8080/upload', formData)\n\n        axios.post('/upload', {\n          newfile: (event.target.files[0], event.target.files[0].name)\n        } //     {\n        //     headers: {\n        //       \"Content-Type\": \"multipart/form-data\",\n        //     },\n        //   }\n        ).then(res => {\n          file.isUploading = false;\n          setFiles([...files, file]);\n        }).catch(err => {\n          // inform the user\n          console.error(err);\n          removeFile(file.name);\n        });\n      };\n    };\n\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data: columnNames,\n      latency: 0.0,\n      downloading: modelDownloadInProgress()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  } // Dashboard = () => {\n  //   const [value , setValue] = React.useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  //     let reader = new FileReader();\n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setValue(file);\n  //     };\n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  // return (\n  //   <div style={{ display: \"flex\" }}>\n  //     <input type=\"file\" name=\"input\" onChange={handleChange}\n  //     // placeholder={this.state.text} autoFocus\n  //      />\n  //     <textarea\n  //       cols={30}\n  //       rows={20}\n  //       value={value}\n  //       onChange={setValue}\n  //       style={{ marginTop: 15, width: \"50%\" }}\n  //     ></textarea>\n  //   </div>\n  // );\n  // }\n  // state = {\n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // }\n  // // On file select (from the pop up)\n  // onFileChange = event => {\n  //   // Update the state\n  //   this.setState({ selectedFile: event.target.files[0] });\n  // }\n  // // On file upload (click the upload button)\n  // onFileUpload = () => {\n  //   // Create an object of formData\n  //   // const formData = new FormData();\n  //   // // Update the formData object\n  //   // formData.append(\n  //   //   \"myFile\",\n  //   //   this.state.selectedFile,\n  //   //   this.state.selectedFile.name\n  //   // );\n  //   // Details of the uploaded file\n  //   console.log(this.state.selectedFile);\n  //   // Request made to the backend api\n  //   // Send formData object\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n  //   //   },\n  //   // }\n  //   // );\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)}, \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"67c784071bmsh339dd9d9dfa4776p1995bdjsn2731d6524052\",\n  //   //   },\n  //   // }\n  //   // );\n  //   axios.post(\"http://localhost:3001/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)});\n  // }\n  // // File content to be displayed after\n  // // file upload is complete\n  // fileData = () => {\n  //   if (this.state.selectedFile) {\n  //     return (\n  //       <div>\n  //         <h5>File Details:</h5>\n  //         <p>File Name: {this.state.selectedFile.name}</p>\n  //         <p>File Type: {this.state.selectedFile.type}</p>\n  //         <p>\n  //           Last Modified:{\" \"}\n  //           {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //         </p>\n  //       </div>\n  //     );\n  //   } else {\n  //     return (\n  //       <div>\n  //         <br />\n  //         <h5>Choose before Pressing the Upload button</h5>\n  //       </div>\n  //     );\n  //   };\n  // }\n  // App()  {\n  // App_upload= () => {\n  //   const [files, setFiles] = React.useState([])\n  //   const removeFile = (filename) => {\n  //     setFiles(files.filter(file => file.name !== filename))\n  //   }\n  // }\n  // App_upload= () => {\n  // const [files, setFiles] = useState([])\n  // const removeFile = (filename) => {\n  //   setFiles(files.filter(file => file.name !== filename))\n  // }\n  //   return (\n  //     <div className=\"App_upload\">\n  //       <div className=\"title\">Upload file</div>\n  //       <FileUpload files={files} setFiles={setFiles}\n  //         removeFile={removeFile} />\n  //       <FileList files={files} removeFile={removeFile} />\n  //     </div>\n  //   );\n  // }\n\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.checkModelStatus(), 1000);\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress()\n    });\n\n    if (!this.state.downloading) {\n      this.timerID = setInterval(() => this.checkModelStatus, 5000000);\n    }\n  }\n\n  handleChange(event) {\n    inference(event.target.value).then(result => {\n      this.setState({\n        text: event.target.value,\n        data: result[1],\n        latency: result[0]\n      });\n    }); // inference(event.target.value).then( result => {\n    //   this.setState({\n    //     text : text => this.Dashboard.setValue(text),\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-inputs\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: this.FileUpload.uploadHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faPlus\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 25\n              }, this), \"Upload\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"main\",\n            children: \"Supported files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info\",\n            children: \"CSV, TXT, PDF, JPG, PNG\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this);\n  }\n\n} // export default TextInputArea;\n\n\nexport default App; // const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","useState","FileUpload","FileList","FontAwesomeIcon","faPlus","App","constructor","props","files","setFiles","removeFile","uploadHandler","event","file","target","isUploading","post","newfile","name","then","res","catch","err","console","error","state","text","data","latency","downloading","handleChange","bind","componentDidMount","timerID","setInterval","checkModelStatus","setState","value","result","render"],"sources":["/Users/nguyentrungchinh/project_19/src/App.jsx"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\n\n// import {uploadfile} from './uploadfile.js';\n\n// import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload.scss'\n// import axios from 'axios'\n\n\n\n// function App() {\n//   const [files, setFiles] = useState([])\n\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n// function App() {\n//   const [files, setFiles] = useState([])\n\n//   const removeFile = (filename) => {\n//     setFiles(files.filter(file => file.name !== filename))\n//   }\n\n\n//   componentDidMount= () =>{\n//     timerID = setInterval(\n//       () => checkModelStatus(),\n//       1000\n//     );\n//   }\n\n//   checkModelStatus= () => {\n//     setState({\n//       downloading: modelDownloadInProgress(),\n//     });\n//     if (!this.state.downloading) {\n//       timerID = setInterval(\n//         () => this.checkModelStatus,\n//         5000000\n//       );\n//     };\n//   }\n\n//   handleChange= (event) => {  \n//     inference(event.target.value).then( result => {\n//       this.setState({\n//         text : event.target.value,\n//         data:result[1],\n//         latency:result[0],\n//       });\n//     });\n//   }\n\n\n\n\n//   return (\n//     <div className=\"App\">\n\n//       <div>\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//       </div>\n\n\n\n//       <header className=\"App-header\">   \n//       <em>In-Browser Transformer Inference</em>\n//       <Chart  \n//         width={'400px'}\n//         height={'200px'}\n//         chartType=\"BarChart\"\n//         data={state.data}\n//         options={{\n//           chartArea: { width: '40%'},\n//           colors: ['purple'],\n//           backgroundColor: '#282c34',\n//           legend: { \n//             textStyle: {color: 'white', fontSize: 10},\n//             labels: {fontColor:'white'}\n//           },\n//           vAxis: {\n//             textStyle: {\n//             color: 'white',\n//             fontSize: 13\n//           }\n//           },\n//           hAxis: {\n//             minValue: 5,\n//             maxValue: 50,\n//             textStyle: {\n//               color: 'white'\n//             }\n//           }\n//       }}\n//       />\n\n\n\n\n\n      \n//       {state.downloading && \n//         <div><font size=\"2\">Downloading model from CDN to browser..</font>\n//         <Box sx={{ width: '400px' }}>\n//         <LinearProgress />\n//         </Box> \n//         <p></p>\n//         </div>\n//       }\n\n\n//       <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n//        placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n//       </textarea>\n\n\n      \n//       {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n//       //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n//       // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n//         // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n//         value = {this.Dashboard.value}\n//         onChange={e => this.Dashboard.setValue(e.target.value)}\n//         onDropRead={text => this.Dashboard.setValue(text)}\n\n//         textareaProps={{\n//           // cols: 24,\n//           // rows: 8,\n//           placeholder: \"Drop one text file here...\"\n//         }}\n//         // onChange={this.Dashboard}  \n//         // {this.Dashboard()} \n//         ></textarea> */}\n\n\n//        <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n//       <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n//       <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n//       </header>\n\n\n\n\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n// class TextInputArea extends React.Component {\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  // Dashboard = () => {\n  //   const [value , setValue] = React.useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n\n\n\n\n      // return (\n      //   <div style={{ display: \"flex\" }}>\n      //     <input type=\"file\" name=\"input\" onChange={handleChange}\n      //     // placeholder={this.state.text} autoFocus\n      //      />\n      //     <textarea\n \n      //       cols={30}\n      //       rows={20}\n      //       value={value}\n      //       onChange={setValue}\n      //       style={{ marginTop: 15, width: \"50%\" }}\n      //     ></textarea>\n      //   </div>\n      // );\n  // }\n\n\n\n\n  \n  // state = {\n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // }\n  \n  // // On file select (from the pop up)\n  // onFileChange = event => {\n  //   // Update the state\n  //   this.setState({ selectedFile: event.target.files[0] });\n  // }\n  \n  // // On file upload (click the upload button)\n  // onFileUpload = () => {\n    \n  //   // Create an object of formData\n  //   // const formData = new FormData();\n  \n  //   // // Update the formData object\n  //   // formData.append(\n  //   //   \"myFile\",\n  //   //   this.state.selectedFile,\n  //   //   this.state.selectedFile.name\n  //   // );\n  \n  //   // Details of the uploaded file\n  //   console.log(this.state.selectedFile);\n  \n  //   // Request made to the backend api\n  //   // Send formData object\n\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n    \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n  //   //   },\n  //   // }\n  //   // );\n\n\n  //   // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)}, \n    \n  //   // {\n  //   //   headers: {\n  //   //     \"Content-Type\": \"multipart/form-data\",\n  //   //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n  //   //     \"x-rapidapi-key\": \"67c784071bmsh339dd9d9dfa4776p1995bdjsn2731d6524052\",\n  //   //   },\n  //   // }\n  //   // );\n\n\n\n  //   axios.post(\"http://localhost:3001/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)});\n\n  // }\n  \n  // // File content to be displayed after\n  // // file upload is complete\n  // fileData = () => {\n  //   if (this.state.selectedFile) {\n  //     return (\n  //       <div>\n  //         <h5>File Details:</h5>\n  //         <p>File Name: {this.state.selectedFile.name}</p>\n  //         <p>File Type: {this.state.selectedFile.type}</p>\n  //         <p>\n  //           Last Modified:{\" \"}\n  //           {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //         </p>\n  //       </div>\n  //     );\n  //   } else {\n  //     return (\n  //       <div>\n  //         <br />\n  //         <h5>Choose before Pressing the Upload button</h5>\n  //       </div>\n  //     );\n  //   };\n  // }\n\n\n\n\n\n  // App()  {\n  // App_upload= () => {\n  //   const [files, setFiles] = React.useState([])\n  \n  //   const removeFile = (filename) => {\n  //     setFiles(files.filter(file => file.name !== filename))\n  //   }\n\n\n  // }\n\n\n\n// App_upload= () => {\n// const [files, setFiles] = useState([])\n\n// const removeFile = (filename) => {\n//   setFiles(files.filter(file => file.name !== filename))\n// }\n\n//   return (\n//     <div className=\"App_upload\">\n//       <div className=\"title\">Upload file</div>\n//       <FileUpload files={files} setFiles={setFiles}\n//         removeFile={removeFile} />\n//       <FileList files={files} removeFile={removeFile} />\n//     </div>\n//   );\n// }\n\n\n\n\n\nFileUpload = ({ files, setFiles, removeFile }) => {\n\n  // function FileUpload ({ files, setFiles, removeFile })  {\n      const uploadHandler = (event) => {\n          const file = event.target.files[0];\n          if(!file) return;\n          file.isUploading = true;\n          setFiles([...files, file])\n  \n          // upload file\n          // const formData = new FormData();\n          // formData.append(\n              \n          //     // \"newFile\",\n          //     file.name,\n          //     file,\n          //     file.name\n          // )\n  \n          // axios.post('http://localhost:8080/upload', formData)\n          axios.post('/upload', {newfile: (event.target.files[0], event.target.files[0].name)}\n          //     {\n          //     headers: {\n          //       \"Content-Type\": \"multipart/form-data\",\n          //     },\n          //   }\n            )\n              .then((res) => {\n                  file.isUploading = false;\n                  setFiles([...files, file])\n              })\n              .catch((err) => {\n                  // inform the user\n                  console.error(err)\n                  removeFile(file.name)\n              });\n      }\n    }\n\n\n\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange(event) {  \n    inference(event.target.value).then( result => {\n      this.setState({\n        text : event.target.value,\n        data:result[1],\n        latency:result[0],\n      });\n    });\n\n    // inference(event.target.value).then( result => {\n    //   this.setState({\n    //     text : text => this.Dashboard.setValue(text),\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n    \n      {/* <div >\n\n      <div className=\"title\">Upload file</div>\n    <FileUpload files={this.App_upload.files} setFiles={this.App_upload.setFiles}\n      removeFile={this.App_upload.removeFile}  />\n    <FileList files={this.App_upload.files} removeFile={this.App_upload.removeFile} />\n\n\n    </div> */}\n\n\n\n\n    <>\n            <div className=\"file-card\">\n\n                <div className=\"file-inputs\">\n                    <input type=\"file\" onChange={this.FileUpload.uploadHandler} />\n                    <button>\n                        <i>\n                            <FontAwesomeIcon icon={faPlus} />\n                        </i>\n                        Upload\n                    </button>\n                </div>\n\n                <p className=\"main\">Supported files</p>\n                <p className=\"info\">CSV, TXT, PDF, JPG, PNG</p>\n\n            </div>\n        </>\n\n\n    </div>   \n    );\n\n\n\n\n\n  }\n\n\n}\n// export default TextInputArea;\n\nexport default App;\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":";AAAA,OAAO,WAAP;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,OAA1B,C,CAEA;AACA;;AAEA,SAAQC,SAAR,QAAwB,gBAAxB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,uBAAR,QAAsC,gBAAtC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,YAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB,C,CAEA;AAEA;;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,OAAO,mBAAP,C,CACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAQA;;;;;AACA,MAAMC,GAAN,SAAkBb,KAAK,CAACC,SAAxB,CAAkC;EAChCa,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KA+KrBN,UA/K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AA;cAAA;YAAA,QADJ,eAEI;cAAA,wBACI;gBAAA,uBACI,QAAC,eAAD;kBAAiB,IAAI,EAAEP;gBAAvB;kBAAA;kBAAA;kBAAA;gBAAA;cADJ;gBAAA;gBAAA;gBAAA;cAAA,QADJ;YAAA;cAAA;cAAA;cAAA;YAAA,QAFJ;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ,eAYI;YAAG,SAAS,EAAC,MAAb;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAZJ,eAaI;YAAG,SAAS,EAAC,MAAb;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAbJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADR;IAfE;MAAA;MAAA;MAAA;IAAA,QADF;EA2CD;;AA5S+B,C,CAgTlC;;;AAEA,eAAeC,GAAf,C,CASA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
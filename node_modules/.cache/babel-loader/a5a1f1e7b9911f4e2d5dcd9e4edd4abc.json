{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentrungchinh/project_19/src/App.jsx\";\nimport './App.css';\nimport axios from 'axios'; // import React, { Component } from 'react';\n\nimport React from 'react';\nimport { Component } from 'react'; // import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport { inference } from './inference.js';\nimport { columnNames } from './inference.js';\nimport { modelDownloadInProgress } from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing'; // import Dashboard from './Dashboard';\n\nimport './Dashboard.css'; // import {textValue_exp} from './Dashboard.jsx';\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n// import React from 'react'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport './FileUpload/FileUpload.scss'; // import axios from 'axios'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TextInputArea extends React.Component {\n  // class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onFileChange = event => {\n      // const [textValue, setTextValue] = useState(\"\");\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n      const file = event.target.files[0];\n      let reader = new FileReader();\n\n      reader.onload = function (event) {\n        const file = event.target.result;\n        console.log('content', file); // this.setState({ text: file });\n        // setTextValue(file);\n\n        inference(file).then(result => {\n          this.setState({\n            text: file,\n            data: result[1],\n            latency: result[0]\n          });\n        });\n      };\n\n      reader.onerror = e => alert(e.target.error.name); // reader.readAsText(file); \n\n\n      const textValue = reader.readAsText(file);\n      this.setState({\n        text: textValue\n      });\n    };\n\n    this.showFile = async e => {\n      e.preventDefault();\n      const reader = new FileReader();\n\n      reader.onload = async e => {\n        const text = e.target.result;\n        console.log(text);\n        alert(text);\n      };\n\n      reader.readAsText(e.target.files[0]);\n    };\n\n    this.onFileUpload = () => {\n      // Create an object of formData\n      // const formData = new FormData();\n      // // Update the formData object\n      // formData.append(\n      //   \"myFile\",\n      //   this.state.selectedFile,\n      //   this.state.selectedFile.name\n      // );\n      // Details of the uploaded file\n      console.log(this.state.selectedFile);\n      console.log(this.state.selectedFile.name); //  console.log(event.target.files[0]);\n      // Request made to the backend api\n      // Send formData object\n      // axios.post(\"/upload\", formData);\n      // axios.post(\"/upload\", {file: (this.state.selectedFile,this.state.selectedFile.name)});\n\n      axios.post('/upload', {\n        file: (this.state.selectedFile, this.state.selectedFile.name)\n      } //     {\n      //     headers: {\n      //       \"Content-Type\": \"multipart/form-data\",\n      //     },\n      //   }\n      ).then(res => {\n        console.log(res);\n      }).catch(err => {\n        // inform the user\n        console.error(err); // removeFile(file.name)\n      });\n      axios.get(`/upload`).then(res => {\n        const text = res; // const text = 'test';\n\n        this.setState({\n          text\n        });\n      });\n    };\n\n    this.render = () => {\n      // const [state, setState] = useState(null);\n      // const [textValue, setTextValue] = this.useState(\"\");\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"App-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"In-Browser Transformer Inference\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Chart, {\n            width: '400px',\n            height: '200px',\n            chartType: \"BarChart\",\n            data: this.state.data,\n            options: {\n              chartArea: {\n                width: '40%'\n              },\n              colors: ['purple'],\n              backgroundColor: '#282c34',\n              legend: {\n                textStyle: {\n                  color: 'white',\n                  fontSize: 10\n                },\n                labels: {\n                  fontColor: 'white'\n                }\n              },\n              vAxis: {\n                textStyle: {\n                  color: 'white',\n                  fontSize: 13\n                }\n              },\n              hAxis: {\n                minValue: 5,\n                maxValue: 50,\n                textStyle: {\n                  color: 'white'\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"File Upload!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                onChange: this.onFileChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.onFileUpload,\n                children: \"Upload!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                cols: 30,\n                rows: 20,\n                value: this.state.text,\n                onChange: this.onFileChange,\n                style: {\n                  marginTop: 15,\n                  width: \"50%\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 7\n          }, this), this.state.downloading && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"font\", {\n              size: \"2\",\n              children: \"Downloading model from CDN to browser..\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 14\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '400px'\n              },\n              children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"font\", {\n              size: \"3\",\n              children: [\"Inference Latency \", this.state.latency, \" ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"font\", {\n              size: \"3\",\n              children: [\"GitHub Repo: \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://github.com/jobergum/browser-ml-inference\",\n                children: \"browser-ml-inference\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 40\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"font\", {\n              size: \"3\",\n              children: [\"Model was trained on the \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",\n                children: \"GoEmotions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 715,\n                columnNumber: 52\n              }, this), \" dataset.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data: columnNames,\n      latency: 0.0,\n      downloading: modelDownloadInProgress(),\n      selectedFile: null // name:'',\n\n    };\n    this.handleChange = this.handleChange.bind(this); // this.onFileChange = this.onFileChange.bind(this);\n    // this.onFileUpload = this.onFileUpload.bind(this);\n    // [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n    // this.FileReader = this.FileReader.bind(this);\n  } // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  //     let reader = new FileReader();\n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     // <div className=\"Dashboard\">\n  //     <div className=\"App\">\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n  //   handleChange(event) { \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.files[0];\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  //     // const file = e.target.files[0];\n  //     let reader = new FileReader();\n  //     reader.onload = (e) => {\n  //       const file = response.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  //     reader.onerror = (e) => alert(response.error.name);\n  //     reader.readAsText(file);\n  //   inference(textValue).then( result => {\n  //     this.setState({\n  //       text : textValue,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n  // }\n  // onFileChange(e) {\n  //   const file = e.target.files[0];\n  //   console.log(file.name);\n  //   console.log(file.size);\n  //   console.log(file.type);\n  // }\n  // onFileChange(e) {\n  //   const file = e.target.files;\n  //   console.log(file);\n  // }\n\n\n  // fileData = () => {\n  //   if (this.state.selectedFile) {\n  //       return (\n  //           <div>\n  //               <h5>File Details:</h5>\n  //               <p>File Name: {this.state.selectedFile.name}</p>\n  //               <p>File Type: {this.state.selectedFile.type}</p>\n  //               <p>\n  //                   Last Modified:{\" \"}\n  //                   {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //               </p>\n  //           </div>\n  //       );\n  //   } else {\n  //       return (\n  //           <div>\n  //               <br />\n  //               <h5>Choose before Pressing the Upload button</h5>\n  //           </div>\n  //       );\n  //   }\n  // };\n  // componentWillMount(){\n  //   axios.get(`/upload`)\n  //   .then(res => {\n  //     const text = res.data;\n  //     this.setState({ text });\n  //   })\n  // }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.checkModelStatus(), 1000); // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.data;\n    //   this.setState({ text });\n    // })\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress()\n    });\n\n    if (!this.state.downloading) {\n      this.timerID = setInterval(() => this.checkModelStatus, 5000000);\n    }\n  }\n\n  handleChange(event) {\n    // Dashboard = (e) => {\n    // const [textValue, setTextValue] = useState(\"\");\n    // const handleChange = (e) => {\n    event.preventDefault();\n    this.setState({\n      selectedFile: event.target.files[0]\n    });\n    this.setState({\n      name: event.target.files[0].name\n    }); // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.content;\n    //   this.setState({ text });\n    // })\n    // const file = event.target.files[0];\n    // let reader = new FileReader();\n    // reader.onload(event).then(result => {\n    //   const file = event.target.result;\n    //   console.log(file);\n    // this.setState({ text: file });\n    // inference(file).then( result => {\n    //   this.setState({\n    //     text : file,\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n    // });\n    // reader.onerror(event).alert(event.target.error.name);\n    // reader.readAsText(file);\n    // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.data;\n    //   this.setState({ text });\n    // });\n\n    inference(this.state.text).then(result => {\n      this.setState({\n        text: this.state.text,\n        data: result[1],\n        latency: result[0]\n      });\n    });\n  } // handleSubmit = event => {\n  //   event.preventDefault();\n  //   // const user = {\n  //   //   name: this.state.name\n  //   // };\n  //   // axios.post(`/upload`, { user })\n  //   axios.post('/upload', {file: (this.state.file, this.state.name)})\n  //   // axios.post(`/upload`, { name: this.state.name })\n  //     .then(res => {\n  //       console.log(res);\n  //       console.log(res.data);\n  //     })\n  //     .catch((err) => {\n  //       // inform the user\n  //       console.error(err)\n  //       // removeFile(file.name)\n  //   })\n  // }\n  //   handleChange (event) {  \n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n  // }\n  // handleChange(event) { \n  //   axios.get('/upload')\n  //   .then(response => {\n  //     // Convert data to CSV format(optional)\n  //     const file = response.files[0];\n  //   })\n  //   .catch(error => {\n  //     // Handle errors\n  //     console.error(error);\n  //   });\n  //   // const file = e.target.files[0];\n  //   let reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     const file = response.result;\n  //     console.log(file);\n  //     setTextValue(file);\n  //   };\n  //   reader.onerror = (e) => alert(response.error.name);\n  //   reader.readAsText(file);\n  // inference(textValue).then( result => {\n  //   this.setState({\n  //     text : textValue,\n  //     data:result[1],\n  //     latency:result[0],\n  //   });\n  // });\n  // }\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.file;\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  //     // const file = e.target.files[0];\n  //     let reader = new FileReader();\n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     <div className=\"Dashboard\">\n  //   {/* <div className=\"App\">  */}\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n  // handleChange (event) {  \n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n  // }\n  // render() {\n\n\n}\n\nexport default TextInputArea; // export default App;\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n//     let reader = new FileReader();\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }","map":{"version":3,"names":["axios","React","Component","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","useState","FileUpload","FileList","FileProcessing","FontAwesomeIcon","faPlus","TextInputArea","constructor","props","onFileChange","event","setState","selectedFile","target","files","file","reader","FileReader","onload","result","console","log","then","text","data","latency","onerror","e","alert","error","name","textValue","readAsText","showFile","preventDefault","onFileUpload","state","post","res","catch","err","get","render","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue","marginTop","downloading","handleChange","bind","componentDidMount","timerID","setInterval","checkModelStatus"],"sources":["/Users/nguyentrungchinh/project_19/src/App.jsx"],"sourcesContent":["import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing';\n// import Dashboard from './Dashboard';\nimport './Dashboard.css';\n\n// import {textValue_exp} from './Dashboard.jsx';\n\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n\n// import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload/FileUpload.scss'\n// import axios from 'axios'\n\n\n \n\nclass TextInputArea extends React.Component {\n// class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n      selectedFile: null\n      // name:'',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    // this.onFileChange = this.onFileChange.bind(this);\n    // this.onFileUpload = this.onFileUpload.bind(this);\n    // [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n    // this.FileReader = this.FileReader.bind(this);\n  }\n\n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     // <div className=\"Dashboard\">\n  //     <div className=\"App\">\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n\n\n  //   handleChange(event) { \n      \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.files[0];\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n\n  //     reader.onload = (e) => {\n  //       const file = response.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(response.error.name);\n  //     reader.readAsText(file);\n  \n\n      \n  //   inference(textValue).then( result => {\n  //     this.setState({\n  //       text : textValue,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n  // onFileChange(e) {\n  //   const file = e.target.files[0];\n  //   console.log(file.name);\n  //   console.log(file.size);\n  //   console.log(file.type);\n  // }\n\n  // onFileChange(e) {\n  //   const file = e.target.files;\n  //   console.log(file);\n  // }\n\n  onFileChange =event => {\n    // const [textValue, setTextValue] = useState(\"\");\n    this.setState({ selectedFile: event.target.files[0] });\n\n          const file = event.target.files[0];\n      \n          let reader = new FileReader();\n      \n          reader.onload = function(event) {\n            const file = event.target.result;\n            console.log( 'content', file)\n            // this.setState({ text: file });\n            // setTextValue(file);\n\n            inference(file).then( result => {\n              this.setState({\n                text : file,\n                data:result[1],\n                latency:result[0],\n              });\n      \n            });\n\n          };\n\n          reader.onerror = (e) => alert(e.target.error.name);\n          // reader.readAsText(file); \n          const textValue = reader.readAsText(file);\n\n          this.setState({ text: textValue });\n\n  }\n\n  showFile = async (e) => { \n    e.preventDefault() \n    const reader = new FileReader() \n    reader.onload = async (e) => { \n       const text = (e.target.result) \n       console.log(text) \n       alert(text) \n    }; \n    reader.readAsText(e.target.files[0]) \n } \n\n  onFileUpload=() => {\n    // Create an object of formData\n    // const formData = new FormData();\n\n    // // Update the formData object\n    // formData.append(\n    //   \"myFile\",\n    //   this.state.selectedFile,\n    //   this.state.selectedFile.name\n    // );\n\n    // Details of the uploaded file\n    console.log(this.state.selectedFile);\n    console.log(this.state.selectedFile.name);\n      //  console.log(event.target.files[0]);\n\n    // Request made to the backend api\n    // Send formData object\n    // axios.post(\"/upload\", formData);\n    // axios.post(\"/upload\", {file: (this.state.selectedFile,this.state.selectedFile.name)});\n\n    axios.post('/upload', {file: (this.state.selectedFile, this.state.selectedFile.name)}\n        //     {\n        //     headers: {\n        //       \"Content-Type\": \"multipart/form-data\",\n        //     },\n        //   }\n          )\n          .then((res) => {\n            console.log(res);\n            })\n            .catch((err) => {\n                // inform the user\n                console.error(err)\n                // removeFile(file.name)\n            })\n\n      axios.get(`/upload`)\n          .then(res => {\n            const text = res;\n            // const text = 'test';\n            this.setState({ text });\n          })\n\n\n  };\n\n  // fileData = () => {\n \n  //   if (this.state.selectedFile) {\n\n  //       return (\n  //           <div>\n  //               <h5>File Details:</h5>\n  //               <p>File Name: {this.state.selectedFile.name}</p>\n\n  //               <p>File Type: {this.state.selectedFile.type}</p>\n\n  //               <p>\n  //                   Last Modified:{\" \"}\n  //                   {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //               </p>\n\n  //           </div>\n  //       );\n  //   } else {\n  //       return (\n  //           <div>\n  //               <br />\n  //               <h5>Choose before Pressing the Upload button</h5>\n  //           </div>\n  //       );\n  //   }\n  // };\n\n\n  // componentWillMount(){\n\n  //   axios.get(`/upload`)\n  //   .then(res => {\n  //     const text = res.data;\n  //     this.setState({ text });\n  //   })\n\n\n  // }\n\n\n  componentDidMount() {\n\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n\n    // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.data;\n    //   this.setState({ text });\n\n    // })\n\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange (event) {  \n  \n        // Dashboard = (e) => {\n        // const [textValue, setTextValue] = useState(\"\");\n        // const handleChange = (e) => {\n\n        event.preventDefault() \n\n        this.setState({ selectedFile : event.target.files[0]});\n\n        this.setState({ name: event.target.files[0].name });\n\n          // axios.get(`/upload`)\n          // .then(res => {\n          //   const text = res.content;\n          //   this.setState({ text });\n          // })\n\n\n          // const file = event.target.files[0];\n      \n          // let reader = new FileReader();\n      \n          // reader.onload(event).then(result => {\n          //   const file = event.target.result;\n          //   console.log(file);\n            // this.setState({ text: file });\n\n            // inference(file).then( result => {\n            //   this.setState({\n            //     text : file,\n            //     data:result[1],\n            //     latency:result[0],\n            //   });\n      \n            // });\n\n\n          // });\n\n          // reader.onerror(event).alert(event.target.error.name);\n          // reader.readAsText(file);\n\n\n          // axios.get(`/upload`)\n          // .then(res => {\n          //   const text = res.data;\n          //   this.setState({ text });\n      \n          // });\n          \n          inference(this.state.text).then( result => {\n            this.setState({\n              text : this.state.text,\n              data:result[1],\n              latency:result[0],\n            });\n    \n          });\n    \n    }\n\n    // handleSubmit = event => {\n    //   event.preventDefault();\n  \n    //   // const user = {\n    //   //   name: this.state.name\n    //   // };\n  \n    //   // axios.post(`/upload`, { user })\n\n    //   axios.post('/upload', {file: (this.state.file, this.state.name)})\n    //   // axios.post(`/upload`, { name: this.state.name })\n    //     .then(res => {\n    //       console.log(res);\n    //       console.log(res.data);\n    //     })\n    //     .catch((err) => {\n    //       // inform the user\n    //       console.error(err)\n    //       // removeFile(file.name)\n    //   })\n\n\n    // }\n\n\n\n\n  //   handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n    // handleChange(event) { \n      \n    //   axios.get('/upload')\n    //   .then(response => {\n    //     // Convert data to CSV format(optional)\n    //     const file = response.files[0];\n    //   })\n    //   .catch(error => {\n    //     // Handle errors\n    //     console.error(error);\n    //   });\n  \n  \n    //   // const file = e.target.files[0];\n  \n    //   let reader = new FileReader();\n\n    //   reader.onload = (e) => {\n    //     const file = response.result;\n    //     console.log(file);\n    //     setTextValue(file);\n    //   };\n  \n    //   reader.onerror = (e) => alert(response.error.name);\n    //   reader.readAsText(file);\n  \n\n      \n    // inference(textValue).then( result => {\n    //   this.setState({\n    //     text : textValue,\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n\n  // }\n\n\n  \n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  \n  \n  \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.file;\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  \n  \n  //   };\n  \n  //   return (\n  //     <div className=\"Dashboard\">\n  //   {/* <div className=\"App\">  */}\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  \n  \n  \n  //     </div>\n  //   );\n  // };\n\n\n\n  // handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n  \n\n\n\n  // render() {\n  render=() =>{\n    // const [state, setState] = useState(null);\n    // const [textValue, setTextValue] = this.useState(\"\");\n    return (\n      <div className=\"App\">\n\n      {/* <FileProcessing /> */}\n\n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n\n\n          {/* <FileProcessing /> */}\n\n\n          {/* <Dashboard /> */}\n\n\n\n        {/* <div>\n\n          {this.Dashboard()}\n        </div> */}\n\n\n\n          {/* {this.handleChange()} */}\n\n\n       {/* <div>\n\n       {this.handleChange}   \n        </div> */}\n\n\n      {/* <div>\n        <h5>File upload</h5>\n        <hr />\n        <div>\n          <form>\n            <table>\n              <tr>\n                <td>Select File :</td>\n              </tr>\n              <tr>\n                <input onChange={this.onFileChange} type=\"file\" multiple />\n              </tr>\n            </table>\n          </form>\n        </div>\n      </div> */}\n\n\n      <div>\n        <h5>File Upload!</h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>\n            Upload!\n          </button>\n          <textarea\n                cols={30}\n                rows={20}\n                value={this.state.text}\n                onChange={this.onFileChange}\n                style={{ marginTop: 15, width: \"50%\" }}\n            ></textarea> \n        </div>\n      </div>\n\n\n{/* \n      <div> \n      <input type=\"file\" onChange={(e) => this.showFile(e)} /> \n   </div> */}\n\n      {/* <div>\n                <h5>\n                    File Upload using React!\n                </h5>\n                <div>\n                    <input type=\"file\" onChange={this.onFileChange} />\n                    <button onClick={this.onFileUpload}>\n                        Upload!\n                    </button>\n                </div>\n                {this.fileData()}\n            </div> */}\n\n\n      {/* <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Upload file:\n          <input type=\"file\" name=\"name\"  onChange={this.handleChange} />\n        </label>\n        <button type=\"submit\">Upload</button>\n      </form>\n      </div> */}\n      \n\n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n    {/* <div style={{ display: \"flex\" }}>\n          <input type=\"file\" name=\"input\" onChange={this.handleChange} />\n          <textarea\n            cols={30}\n            rows={20}\n            value={this.textValue}\n            onChange={this.setTextValue}\n            style={{ marginTop: 15, width: \"50%\" }}\n          ></textarea>\n        </div> */}\n\n\n      {/* <div>\n      {this.state.data}     \n      </div> */}\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}\n        \n       >\n      </textarea> */}\n\n\n      \n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus // onChange={this.handleChange}\n       placeholder={Dashboard.textValue} autoFocus // onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {Dashboard.textValue}\n        // onChange={e => Dashboard.textarea.onChange(e.target.value)}\n        // onChange={Dashboard.setTextValue}\n        onChange={this.onFileChange}\n        // onDropRead={text => Dashboard.textarea.onChange.value}\n\n        // textareaProps={{\n        //   // cols: 24,\n        //   // rows: 8,\n        //   placeholder: \"Drop one text file here...\"\n        // } }\n\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea> */}\n\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header> \n\n\n    </div>   \n    );\n\n\n\n\n  };\n  \n\n\n}\nexport default TextInputArea;\n// export default App;\n\n\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n"],"mappings":"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;IACE;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IAGF;IAEA;IACA;IAGA;IACA;IACA;IACA;IAEA;;IAEApC,SAAS,CAAC,KAAK0C,KAAL,CAAWb,IAAZ,CAAT,CAA2BD,IAA3B,CAAiCH,MAAM,IAAI;MACzC,KAAKR,QAAL,CAAc;QACZY,IAAI,EAAG,KAAKa,KAAL,CAAWb,IADN;QAEZC,IAAI,EAACL,MAAM,CAAC,CAAD,CAFC;QAGZM,OAAO,EAACN,MAAM,CAAC,CAAD;MAHF,CAAd;IAMD,CAPD;EASL,CArUuC,CAuUxC;EACA;EAEA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAKF;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAGE;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAEA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EAEF;EAKA;EACA;EACA;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EAEA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAGA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EACA;EACA;EAIA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAKA;;;AA9d0C;;AA+qB5C,eAAeb,aAAf,C,CACA;AAWA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
[{"/Users/nguyentrungchinh/project_14/src/index.js":"1","/Users/nguyentrungchinh/project_14/src/App.js":"2","/Users/nguyentrungchinh/project_14/src/inference.js":"3","/Users/nguyentrungchinh/project_14/src/bert_tokenizer.ts":"4","/Users/nguyentrungchinh/project_14/src/uploadfile.js":"5","/Users/nguyentrungchinh/project_19/src/index.js":"6","/Users/nguyentrungchinh/project_19/src/reportWebVitals.js":"7","/Users/nguyentrungchinh/project_19/src/inference.js":"8","/Users/nguyentrungchinh/project_19/src/FileList/FileList.jsx":"9","/Users/nguyentrungchinh/project_19/src/FileUpload/FileUpload.jsx":"10","/Users/nguyentrungchinh/project_19/src/bert_tokenizer.ts":"11","/Users/nguyentrungchinh/project_19/src/FileItem/FileItem.jsx":"12","/Users/nguyentrungchinh/project_19/src/App.jsx":"13","/Users/nguyentrungchinh/project_19/src/FileProcessing.jsx":"14","/Users/nguyentrungchinh/project_19/src/Dashboard.jsx":"15","/Users/nguyentrungchinh/project_20/src/index.js":"16","/Users/nguyentrungchinh/project_20/src/reportWebVitals.js":"17","/Users/nguyentrungchinh/project_20/src/App.jsx":"18","/Users/nguyentrungchinh/project_20/src/inference.js":"19","/Users/nguyentrungchinh/project_20/src/bert_tokenizer.ts":"20","/Users/nguyentrungchinh/project_25/src/index.js":"21","/Users/nguyentrungchinh/project_25/src/reportWebVitals.js":"22","/Users/nguyentrungchinh/project_25/src/App.jsx":"23","/Users/nguyentrungchinh/project_25/src/inference.js":"24","/Users/nguyentrungchinh/project_25/src/bert_tokenizer.ts":"25","/Users/nguyentrungchinh/project_25b/src/index.js":"26","/Users/nguyentrungchinh/project_25b/src/reportWebVitals.js":"27","/Users/nguyentrungchinh/project_25b/src/App.jsx":"28","/Users/nguyentrungchinh/project_25b/src/inference.js":"29","/Users/nguyentrungchinh/project_25b/src/bert_tokenizer.ts":"30"},{"size":239,"mtime":1696126472998,"results":"31","hashOfConfig":"32"},{"size":10031,"mtime":1696484501979,"results":"33","hashOfConfig":"32"},{"size":4188,"mtime":1664259239000,"results":"34","hashOfConfig":"32"},{"size":7921,"mtime":1664259239000,"results":"35","hashOfConfig":"32"},{"size":1231,"mtime":1696213559330,"results":"36","hashOfConfig":"32"},{"size":523,"mtime":1696913337586,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":1664259239000,"results":"39","hashOfConfig":"38"},{"size":4988,"mtime":1697536668052,"results":"40","hashOfConfig":"38"},{"size":822,"mtime":1696578431976,"results":"41","hashOfConfig":"38"},{"size":3762,"mtime":1696880056080,"results":"42","hashOfConfig":"38"},{"size":7921,"mtime":1664259239000,"results":"43","hashOfConfig":"38"},{"size":1018,"mtime":1696556759162,"results":"44","hashOfConfig":"38"},{"size":33177,"mtime":1697537580698,"results":"45","hashOfConfig":"38"},{"size":609,"mtime":1696718348424,"results":"46","hashOfConfig":"38"},{"size":5603,"mtime":1696831905076,"results":"47","hashOfConfig":"38"},{"size":500,"mtime":1697546678445,"results":"48","hashOfConfig":"49"},{"size":362,"mtime":1664259239000,"results":"50","hashOfConfig":"49"},{"size":4925,"mtime":1697562423442,"results":"51","hashOfConfig":"49"},{"size":3677,"mtime":1697546682858,"results":"52","hashOfConfig":"49"},{"size":7921,"mtime":1664259239000,"results":"53","hashOfConfig":"49"},{"size":500,"mtime":1697546678445,"results":"54","hashOfConfig":"55"},{"size":362,"mtime":1664259239000,"results":"56","hashOfConfig":"55"},{"size":4929,"mtime":1697877030854,"results":"57","hashOfConfig":"55"},{"size":3677,"mtime":1697546682858,"results":"58","hashOfConfig":"55"},{"size":7921,"mtime":1664259239000,"results":"59","hashOfConfig":"55"},{"size":500,"mtime":1697546678445,"results":"60","hashOfConfig":"61"},{"size":362,"mtime":1664259239000,"results":"62","hashOfConfig":"61"},{"size":4812,"mtime":1697880344729,"results":"63","hashOfConfig":"61"},{"size":3677,"mtime":1697546682858,"results":"64","hashOfConfig":"61"},{"size":7921,"mtime":1664259239000,"results":"65","hashOfConfig":"61"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"p1neor",{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"69"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"izcwv5",{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"89"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wumzdh",{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17m14wb",{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hcfds0",{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nguyentrungchinh/project_14/src/index.js",[],[],[],"/Users/nguyentrungchinh/project_14/src/App.js",["169","170","171","172"],[],"import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\nimport { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// import {uploadfile} from './uploadfile.js';\n\n \n\nclass TextInputArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  Dashboard = () => {\n    const [value , setValue] = React.useState(\"\");\n    const handleChange = (e) => {\n      const file = e.target.files[0];\n  \n      let reader = new FileReader();\n  \n      reader.onload = (e) => {\n        const file = e.target.result;\n        console.log(file);\n        setValue(file);\n      };\n  \n      reader.onerror = (e) => alert(e.target.error.name);\n      reader.readAsText(file);\n    };\n\n      // return (\n      //   <div style={{ display: \"flex\" }}>\n      //     <input type=\"file\" name=\"input\" onChange={handleChange}\n      //     // placeholder={this.state.text} autoFocus\n      //      />\n      //     <textarea\n \n      //       cols={30}\n      //       rows={20}\n      //       value={value}\n      //       onChange={setValue}\n      //       style={{ marginTop: 15, width: \"50%\" }}\n      //     ></textarea>\n      //   </div>\n      // );\n  }\n\n\n\n\n  \n  state = {\n    // Initially, no file is selected\n    selectedFile: null\n  }\n  \n  // On file select (from the pop up)\n  onFileChange = event => {\n    // Update the state\n    this.setState({ selectedFile: event.target.files[0] });\n  }\n  \n  // On file upload (click the upload button)\n  onFileUpload = () => {\n    // Create an object of formData\n    const formData = new FormData();\n  \n    // Update the formData object\n    formData.append(\n      \"myFile\",\n      this.state.selectedFile,\n      this.state.selectedFile.name\n    );\n  \n    // Details of the uploaded file\n    console.log(this.state.selectedFile);\n  \n    // Request made to the backend api\n    // Send formData object\n\n    // axios.post(\"https://file-upload8.p.rapidapi.com/upload\", formData, \n    \n    // {\n    //   headers: {\n    //     \"Content-Type\": \"multipart/form-data\",\n    //     \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n    //     \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n    //   },\n    // }\n    // );\n\n\n    axios.post(\"https://file-upload8.p.rapidapi.com/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)}, \n    \n    {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"67c784071bmsh339dd9d9dfa4776p1995bdjsn2731d6524052\",\n      },\n    }\n    );\n\n\n\n    // axios.post(\"http://localhost:3001/upload\", {myFile: (this.state.selectedFile,this.state.selectedFile.name)});\n\n  }\n  \n  // File content to be displayed after\n  // file upload is complete\n  fileData = () => {\n    if (this.state.selectedFile) {\n      return (\n        <div>\n          <h5>File Details:</h5>\n          <p>File Name: {this.state.selectedFile.name}</p>\n          <p>File Type: {this.state.selectedFile.type}</p>\n          <p>\n            Last Modified:{\" \"}\n            {this.state.selectedFile.lastModifiedDate.toDateString()}\n          </p>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <br />\n          <h5>Choose before Pressing the Upload button</h5>\n        </div>\n      );\n    };\n  }\n\n\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange(event) {  \n    inference(event.target.value).then( result => {\n      this.setState({\n        text : event.target.value,\n        data:result[1],\n        latency:result[0],\n      });\n    });\n\n    // inference(event.target.value).then( result => {\n    //   this.setState({\n    //     text : text => this.Dashboard.setValue(text),\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">   \n      <em>In-Browser Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['purple'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n\n\n      <div>\n          <h5>\n              File Upload\n          </h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>Upload!</button>\n        </div>\n        {this.fileData()}\n      </div>\n\n\n\n      \n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}>\n      </textarea> */}\n\n\n      \n      <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus //onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {this.Dashboard.value}\n        onChange={e => this.Dashboard.setValue(e.target.value)}\n        onDropRead={text => this.Dashboard.setValue(text)}\n\n        textareaProps={{\n          // cols: 24,\n          // rows: 8,\n          placeholder: \"Drop one text file here...\"\n        }}\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea>\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header>\n\n\n    </div>   \n    );\n\n\n\n\n\n  }\n\n\n}\nexport default TextInputArea;\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n","/Users/nguyentrungchinh/project_14/src/inference.js",["173"],[],"/** */\n/*global BigInt */\n/*global BigInt64Array */\n\nimport { loadTokenizer } from './bert_tokenizer.ts';\nimport * as wasmFeatureDetect from 'wasm-feature-detect';\n\n//Setup onnxruntime \nconst ort = require('onnxruntime-web');\n\n//requires Cross-Origin-*-policy headers https://web.dev/coop-coep/\n/**\nconst simdResolver = wasmFeatureDetect.simd().then(simdSupported => {\n    console.log(\"simd is supported? \"+ simdSupported);\n    if (simdSupported) {\n      ort.env.wasm.numThreads = 3; \n      ort.env.wasm.simd = true;\n    } else {\n      ort.env.wasm.numThreads = 1; \n      ort.env.wasm.simd = false;\n    }\n});\n*/\n\nconst options = {\n  executionProviders: ['wasm'], \n  graphOptimizationLevel: 'all'\n};\n\nvar downLoadingModel = true;\nconst model = \"./xtremedistill-go-emotion-int8.onnx\";\n\nconst session = ort.InferenceSession.create(model, options);\nsession.then(t => { \n  downLoadingModel = false;\n  //warmup the VM\n  for(var i = 0; i < 10; i++) {\n    console.log(\"Inference warmup \" + i);\n    lm_inference(\"this is a warmup inference\");\n  }\n});\n\nconst tokenizer = loadTokenizer()\n\nconst EMOJI_DEFAULT_DISPLAY = [\n  [\"Emotion\", \"Score\"],\n  ['admiration 👏',0],\n  ['amusement 😂', 0],\n  ['neutral 😐',0],\n  ['approval 👍',0],\n  ['joy 😃',0],\n  ['gratitude 🙏',0],\n];\n\nconst EMOJIS = [\n  'admiration 👏',\n  'amusement 😂',\n  'anger 😡',\n  'annoyance 😒',\n  'approval 👍',\n  'caring 🤗',\n  'confusion 😕',\n  'curiosity 🤔',\n  'desire 😍',\n  'disappointment 😞',\n  'disapproval 👎',\n  'disgust 🤮',\n  'embarrassment 😳',\n  'excitement 🤩',\n  'fear 😨',\n  'gratitude 🙏',\n  'grief 😢',\n  'joy 😃',\n  'love ❤️',\n  'nervousness 😬',\n  'optimism 🤞',\n  'pride 😌',\n  'realization 💡',\n  'relief😅',\n  'remorse 😞', \n  'sadness 😞',\n  'surprise 😲',\n  'neutral 😐'\n];\n\nfunction isDownloading() {\n  return downLoadingModel;\n}\n\nfunction sortResult(a, b) {\n  if (a[1] === b[1]) {\n      return 0;\n  }\n  else {\n      return (a[1] < b[1]) ? 1 : -1;\n  }\n}\n\nfunction sigmoid(t) {\n  return 1/(1+Math.pow(Math.E, -t));\n}\n\nfunction create_model_input(encoded) {\n  var input_ids = new Array(encoded.length+2);\n  var attention_mask = new Array(encoded.length+2);\n  var token_type_ids = new Array(encoded.length+2);\n  input_ids[0] = BigInt(101);\n  attention_mask[0] = BigInt(1);\n  token_type_ids[0] = BigInt(0);\n  var i = 0;\n  for(; i < encoded.length; i++) { \n    input_ids[i+1] = BigInt(encoded[i]);\n    attention_mask[i+1] = BigInt(1);\n    token_type_ids[i+1] = BigInt(0);\n  }\n  input_ids[i+1] = BigInt(102);\n  attention_mask[i+1] = BigInt(1);\n  token_type_ids[i+1] = BigInt(0);\n  const sequence_length = input_ids.length;\n  input_ids = new ort.Tensor('int64', BigInt64Array.from(input_ids), [1,sequence_length]);\n  attention_mask = new ort.Tensor('int64', BigInt64Array.from(attention_mask), [1,sequence_length]);\n  token_type_ids = new ort.Tensor('int64', BigInt64Array.from(token_type_ids), [1,sequence_length]);\n  return {\n    input_ids: input_ids,\n    attention_mask: attention_mask,\n    token_type_ids:token_type_ids\n  }\n}\n\nasync function lm_inference(text) {\n  try { \n    const encoded_ids = await tokenizer.then(t => {\n      return t.tokenize(text); \n    });\n    if(encoded_ids.length === 0) {\n      return [0.0, EMOJI_DEFAULT_DISPLAY];\n    }\n    const start = performance.now();\n    const model_input = create_model_input(encoded_ids);\n    const output =  await session.then(s => { return s.run(model_input,['output_0'])});\n    const duration = (performance.now() - start).toFixed(1);\n    const probs = output['output_0'].data.map(sigmoid).map( t => Math.floor(t*100));\n    \n    const result = [];\n    for(var i = 0; i < EMOJIS.length;i++) {\n      const t = [EMOJIS[i], probs[i]];\n      result[i] = t;\n    }\n    result.sort(sortResult); \n    \n    const result_list = [];\n    result_list[0] = [\"Emotion\", \"Score\"];\n    for(i = 0; i < 6; i++) {\n       result_list[i+1] = result[i];\n    }\n    return [duration,result_list];    \n  } catch (e) {\n    return [0.0,EMOJI_DEFAULT_DISPLAY];\n  }\n}    \n\nexport let inference = lm_inference \nexport let columnNames = EMOJI_DEFAULT_DISPLAY\nexport let modelDownloadInProgress = isDownloading\n","/Users/nguyentrungchinh/project_14/src/bert_tokenizer.ts",[],[],[],"/Users/nguyentrungchinh/project_14/src/uploadfile.js",["174","175","176","177","178"],[],"import React from \"react\";\nimport axios from \"axios\";\n\nconst UPLOAD_ENDPOINT = \"http://localhost:3000\";\n\nfunction uploadfile() {\n  const [file, setFile] = React.useState(null);\n  const [name, setName] = React.useState(\"\");\n  const [status, setStatus] = React.useState(\"\");\n  const { userInfo } = useSelector((state) => state.userLogin);\n\n  const handleSubmit = async (event) => {\n    setStatus(\"\"); // Reset status\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append(\"avatar\", file);\n    formData.append(\"name\", name);\n    const resp = await axios.post(UPLOAD_ENDPOINT, formData, {\n      headers: {\n        \"content-type\": \"multipart/form-data\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    });\n    setStatus(resp.status === 200 ? \"Thank you!\" : \"Error.\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>React File Upload</h1>\n      <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n      <input type=\"text\" onChange={(e) => setName(e.target.value)} value={name} />\n      <button type=\"submit\" disabled={!(file && name)}>\n        Upload File\n      </button>\n      {status ? <h1>{status}</h1> : null}\n    </form>\n  );\n}\n\nexport default uploadfile;\n","/Users/nguyentrungchinh/project_19/src/index.js",[],[],[],"/Users/nguyentrungchinh/project_19/src/reportWebVitals.js",[],[],"/Users/nguyentrungchinh/project_19/src/inference.js",["179"],[],"/** */\n/*global BigInt */\n/*global BigInt64Array */\n\nimport { loadTokenizer } from './bert_tokenizer.ts';\nimport * as wasmFeatureDetect from 'wasm-feature-detect';\n\n//Setup onnxruntime \nconst ort = require('onnxruntime-web');\n\n//requires Cross-Origin-*-policy headers https://web.dev/coop-coep/\n/**\nconst simdResolver = wasmFeatureDetect.simd().then(simdSupported => {\n    console.log(\"simd is supported? \"+ simdSupported);\n    if (simdSupported) {\n      ort.env.wasm.numThreads = 3; \n      ort.env.wasm.simd = true;\n    } else {\n      ort.env.wasm.numThreads = 1; \n      ort.env.wasm.simd = false;\n    }\n});\n*/\n\nconst options = {\n  executionProviders: ['wasm'], \n  graphOptimizationLevel: 'all'\n};\n\nvar downLoadingModel = true;\n// const model = \"./xtremedistill-go-emotion-int8.onnx\";\nconst model = \"./classifier_2_int8.onnx\";\n\nconst session = ort.InferenceSession.create(model, options);\nsession.then(t => { \n  downLoadingModel = false;\n  //warmup the VM\n  for(var i = 0; i < 10; i++) {\n    console.log(\"Inference warmup \" + i);\n    lm_inference(\"this is a warmup inference\");\n  }\n});\n\nconst tokenizer = loadTokenizer()\n\nconst EMOJI_DEFAULT_DISPLAY = [\n  // [\"Emotion\", \"Score\"],\n  // ['admiration 👏',0],\n  // ['amusement 😂', 0],\n  // ['neutral 😐',0],\n  // ['approval 👍',0],\n  // ['joy 😃',0],\n  // ['gratitude 🙏',0],\n  [\"Status\", \"Score\"],\n  ['false: normal system next step 👍',0],\n  ['ttrue: fail system next step 👎',0],\n//   [0,0],\n//   [1,0],\n];\n\nconst EMOJIS = [\n  // 'admiration 👏',\n  // 'amusement 😂',\n  // 'anger 😡',\n  // 'annoyance 😒',\n  // 'approval 👍',\n  // 'caring 🤗',\n  // 'confusion 😕',\n  // 'curiosity 🤔',\n  // 'desire 😍',\n  // 'disappointment 😞',\n  // 'disapproval 👎',\n  // 'disgust 🤮',\n  // 'embarrassment 😳',\n  // 'excitement 🤩',\n  // 'fear 😨',\n  // 'gratitude 🙏',\n  // 'grief 😢',\n  // 'joy 😃',\n  // 'love ❤️',\n  // 'nervousness 😬',\n  // 'optimism 🤞',\n  // 'pride 😌',\n  // 'realization 💡',\n  // 'relief😅',\n  // 'remorse 😞', \n  // 'sadness 😞',\n  // 'surprise 😲',\n  // 'neutral 😐'\n  'false: normal system next step 👍',\n  'true: fail system next step 👎'\n  // 0,\n  // 1\n];\n\nfunction isDownloading() {\n  return downLoadingModel;\n}\n\nfunction sortResult(a, b) {\n  if (a[1] === b[1]) {\n      return 0;\n  }\n  else {\n      return (a[1] < b[1]) ? 1 : -1;\n  }\n}\n\nfunction sigmoid(t) {\n  return 1/(1+Math.pow(Math.E, -t));\n}\n\nfunction create_model_input(encoded) {\n  var input_ids = new Array(encoded.length+2);\n  var attention_mask = new Array(encoded.length+2);\n  var token_type_ids = new Array(encoded.length+2);\n  input_ids[0] = BigInt(101);\n  attention_mask[0] = BigInt(1);\n  token_type_ids[0] = BigInt(0);\n  var i = 0;\n  for(; i < encoded.length; i++) { \n    input_ids[i+1] = BigInt(encoded[i]);\n    attention_mask[i+1] = BigInt(1);\n    token_type_ids[i+1] = BigInt(0);\n  }\n  input_ids[i+1] = BigInt(102);\n  attention_mask[i+1] = BigInt(1);\n  token_type_ids[i+1] = BigInt(0);\n  const sequence_length = input_ids.length;\n  input_ids = new ort.Tensor('int64', BigInt64Array.from(input_ids), [1,sequence_length]);\n  attention_mask = new ort.Tensor('int64', BigInt64Array.from(attention_mask), [1,sequence_length]);\n  token_type_ids = new ort.Tensor('int64', BigInt64Array.from(token_type_ids), [1,sequence_length]);\n\n  // input_ids = new ort.Tensor('int32', BigInt32Array.from(input_ids), [1,sequence_length]);\n  // attention_mask = new ort.Tensor('int8', BigInt8Array.from(attention_mask), [1,sequence_length]);\n  // token_type_ids = new ort.Tensor('int8', BigInt8Array.from(token_type_ids), [1,sequence_length]);\n\n  return {\n    input_ids: input_ids,\n    attention_mask: attention_mask,\n    token_type_ids:token_type_ids\n  }\n}\n\nasync function lm_inference(text) {\n  try { \n    const encoded_ids = await tokenizer.then(t => {\n      return t.tokenize(text); \n    });\n    if(encoded_ids.length === 0) {\n      return [0.0, EMOJI_DEFAULT_DISPLAY];\n    }\n    const start = performance.now();\n    const model_input = create_model_input(encoded_ids);\n    const output =  await session.then(s => { return s.run(model_input,['output_0'])});\n    const duration = (performance.now() - start).toFixed(1);\n    const probs = output['output_0'].data.map(sigmoid).map( t => Math.floor(t*100));\n    // const probs = output['output_0'][0].data.map(sigmoid).map( t => Math.floor(t*100));\n    \n    const result = [];\n    for(var i = 0; i < EMOJIS.length;i++) {\n      const t = [EMOJIS[i], probs[i]];\n      result[i] = t;\n    }\n    result.sort(sortResult); \n    \n    const result_list = [];\n    result_list[0] = [\"Status\", \"Score\"];\n    // for(i = 0; i < 6; i++) {\n    for(i = 0; i < 2; i++) {\n       result_list[i+1] = result[i];\n    }\n    return [duration,result_list];    \n  } catch (e) {\n    return [0.0,EMOJI_DEFAULT_DISPLAY];\n  }\n}    \n\nexport let inference = lm_inference \nexport let columnNames = EMOJI_DEFAULT_DISPLAY\nexport let modelDownloadInProgress = isDownloading\n","/Users/nguyentrungchinh/project_19/src/FileList/FileList.jsx",[],[],"/Users/nguyentrungchinh/project_19/src/FileUpload/FileUpload.jsx",["180","181","182","183","184","185","186","187","188"],[],"import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload.scss'\nimport axios from 'axios'\n\n// import React, { useState } from \"react\";\nimport { useState } from \"react\";\n// import './Dashboard.css';\n\nimport {inference} from '../inference.js';\nimport {columnNames} from '../inference.js';\nimport {modelDownloadInProgress} from '../inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n\n\nconst FileUpload = ({ files, setFiles, removeFile }) => {\n\n    const [textValue, setTextValue] = useState(\"\");\n    const [data, latency, downloading] = useState(\"\");\n\n\n// function FileUpload ({ files, setFiles, removeFile })  {\n    const uploadHandler = (event) => {\n        const file = event.target.files[0];\n        if(!file) return;\n        file.isUploading = true;\n        setFiles([...files, file])\n\n        // upload file\n        // const formData = new FormData();\n        // formData.append(\n            \n        //     // \"newFile\",\n        //     file.name,\n        //     file,\n        //     file.name\n        // )\n\n        // axios.post('http://localhost:8080/upload', formData)\n        axios.post('/upload', {file: (event.target.files[0], event.target.files[0].name)}\n        //     {\n        //     headers: {\n        //       \"Content-Type\": \"multipart/form-data\",\n        //     },\n        //   }\n          )\n            .then((res) => {\n                file.isUploading = false;\n                setFiles([...files, file])\n            })\n            .catch((err) => {\n                // inform the user\n                console.error(err)\n                removeFile(file.name)\n            })\n\n\n\n\n\n        let reader = new FileReader();\n    \n        reader.onload = (e) => {\n        const file = e.target.result;\n        console.log(file);\n        // processCSV(file);\n        setTextValue(file);\n        };\n    \n        reader.onerror = (e) => alert(e.target.error.name);\n        reader.readAsText(file); \n\n        \n        // inference(textValue).then( result => {\n        //     this.setState({\n        //       text : data,\n        //       data:result[1],\n        //       latency:result[0],\n        //     });\n    \n        //   });\n    \n\n    }\n\n    return (\n        <>\n\n            {/* <div className=\"file-card\">\n\n                <div className=\"file-inputs\">\n                \n                    <input type=\"file\" onChange={uploadHandler} />\n                    <button>\n                        <i>\n                            <FontAwesomeIcon icon={faPlus} />\n                        </i>\n                        Upload\n                    </button>\n                    \n\n                </div>\n\n                <p className=\"main\">Supported files</p>\n                <p className=\"info\">CSV, TXT, PDF, JPG, PNG</p>\n\n            </div> */}\n\n\n            <div className=\"Dashboard\">\n            {/* <div className=\"App\">  */}\n            {/* <div style={{ display: \"flex\" }}> */}\n            <input type=\"file\" name=\"input\" onChange={uploadHandler} />\n            <button>\n                        <i>\n                            <FontAwesomeIcon icon={faPlus} />\n                        </i>\n                        Upload\n                    </button>\n\n            <textarea\n                cols={30}\n                rows={20}\n                value={textValue}\n                onChange={setTextValue}\n                style={{ marginTop: 15, width: \"50%\" }}\n            ></textarea> \n\n\n            {/* </div> */}\n\n\n\n            </div>\n\n\n\n\n        </>\n\n        \n    )\n}\n\nexport default FileUpload\n\n// export let FileUpload_exp =  FileUpload\n","/Users/nguyentrungchinh/project_19/src/bert_tokenizer.ts",[],[],[],"/Users/nguyentrungchinh/project_19/src/FileItem/FileItem.jsx",[],[],"/Users/nguyentrungchinh/project_19/src/App.jsx",["189","190","191","192","193","194","195","196","197"],[],"import './App.css';\n\nimport axios from 'axios';\n// import React, { Component } from 'react';\n\nimport React from 'react';\n\nimport { Component } from 'react';\n\n// import { useState } from 'react';\n// import Textarea from \"react-dropzone-textarea\";\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport { useState } from 'react';\nimport './App.scss';\nimport FileUpload from './FileUpload/FileUpload';\nimport FileList from './FileList/FileList';\nimport FileProcessing from './FileProcessing';\n// import Dashboard from './Dashboard';\nimport './Dashboard.css';\n\n\n// import {textValue_exp} from './Dashboard.jsx';\n\n// import GetFileUpload from './GetFileUpload/GetFileUpload';\n\n// import CsvReader from './CsvReader';\n// import {uploadfile} from './uploadfile.js';\n\n// import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport './FileUpload/FileUpload.scss'\n// import axios from 'axios'\n\nimport ReactFileReader from 'react-file-reader';\nimport { CsvToHtmlTable } from 'react-csv-to-table';\n\n\n// import processCSV from './processCSV.js';\n\nimport Papa from \"papaparse\";\n\n \n\nclass TextInputArea extends React.Component {\n// class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n      selectedFile: null,\n      csvData: '',\n      array: [],\n      columns: null\n      // name:'',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    // this.CSVToArray = this.CSVToArray.bind(this);\n    // this.processCSV = this.processCSV.bind(this);\n\n    // this.onFileChange = this.onFileChange.bind(this);\n    // this.onFileUpload = this.onFileUpload.bind(this);\n    // [this.textValue, this.setTextValue] = this.useState(\"\").bind(this);\n    // this.FileReader = this.FileReader.bind(this);\n  }\n\n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  //     const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  //   };\n  //   return (\n  //     // <div className=\"Dashboard\">\n  //     <div className=\"App\">\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  //     </div>\n  //   );\n  // };\n\n\n  //   handleChange(event) { \n      \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.files[0];\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n\n  //     reader.onload = (e) => {\n  //       const file = response.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(response.error.name);\n  //     reader.readAsText(file);\n  \n\n      \n  //   inference(textValue).then( result => {\n  //     this.setState({\n  //       text : textValue,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n  // onFileChange(e) {\n  //   const file = e.target.files[0];\n  //   console.log(file.name);\n  //   console.log(file.size);\n  //   console.log(file.type);\n  // }\n\n  // onFileChange(e) {\n  //   const file = e.target.files;\n  //   console.log(file);\n  // }\n\n  onFileChange =event => {\n    // const [textValue, setTextValue] = useState(\"\");\n    this.setState({ selectedFile: event.target.files[0] });\n\n          const file = event.target.files[0];\n      \n          let reader = new FileReader();\n      \n          reader.onload = function(event) {\n            const file = event.target.result;\n            console.log(file);\n            // this.setState({ text: file });\n            // setTextValue(file);\n\n            // inference(file)\n    \n\n\n                      // const textline = '';\n          // const lines = reader.result.split(\"\\n\");\n          // const headers = lines[0].split(\";\");\n          \n          // const result = [];\n\n          // // const obj = {};\n          // const currentLine = lines[1].split(\";\");\n\n          // this.setState({\n          //   // csvData1:  headers[1] + ' ' + currentLine[1],\n          //   // csvData2:  headers[2] + ' ' + currentLine[2],\n          //   // csvData3:  headers[3] + ' ' + currentLine[3],\n          //   // csvData4:  headers[4] + ' ' + currentLine[4],\n          //   // csvData5:  headers[5] + ' ' + currentLine[5],\n          //   // csvData6:  headers[6] + ' ' + currentLine[6],\n          //   // csvData7:  headers[7] + ' ' + currentLine[7],\n          //   // csvData8:  headers[8] + ' ' + currentLine[8],\n          //   // csvData9:  headers[9] + ' ' + currentLine[9],\n\n          //   csvData1:  'time ' + currentLine[1],\n          //   csvData2:  'date ' + currentLine[2],\n          //   csvData3:  'machine ID ' + currentLine[3],\n          //   csvData4:  'model ID' + currentLine[4],\n          //   csvData5:  'age ' + currentLine[5],\n          //   csvData6:  'hourly average voltage ' + currentLine[6],\n          //   csvData7:  'hourly average rotation ' + currentLine[7],\n          //   csvData8:  'hourly average presure ' + currentLine[8],\n          //   csvData9:  'hourly average vibration  ' + currentLine[9],\n          //   text: 'time ' + currentLine[1] + 'date ' + currentLine[2] + 'machine ID ' + currentLine[3] + 'model ID' + currentLine[4] + 'age ' + currentLine[5] + 'hourly average voltage ' + currentLine[6] + 'hourly average rotation ' + currentLine[7] + 'hourly average presure ' + currentLine[8] + 'hourly average vibration  ' + currentLine[9]\n\n          // })\n\n          // for (let j = 0; j < headers.length; j++) {\n          //   // obj[headers[j].trim()] = currentLine[j].trim();\n          //   // const factor = '';\n          //   // factor.concat(headers[j]);\n          //   // factor.concat(currentLine[j]);\n          //   // textvalue.concat(factor);\n          //   // textvalue.concat(headers[j]);\n          //   // textvalue.concat(currentLine[j]);\n\n          // //   textline += headers[j].valueOf() + ' ' + currentLine[j].valueOf();\n\n          //   // result.push(headers[j]);\n          //   // result.push(' ');\n          //   // result.push(currentLine[j]);\n          //   // result.push(' ');\n\n\n          //   this.setState({\n          //     csvData1:  headers[j] + ' ' + currentLine[j],\n          //   })\n\n          // }\n\n\n          // // const textvalue = JSON.stringify(obj);\n\n          // const textvalue  = result.join();\n\n\n\n\n\n\n\n          };\n\n          reader.onerror = (e) => alert(e.target.error.name);\n          reader.readAsText(file); \n\n          // const textValue = reader.readAsText(file);\n\n          // this.setState({ text: textValue });\n\n          // inference.then( result => {\n          //   this.setState({\n          //     // text : file,\n          //     data:result[1],\n          //     latency:result[0],\n          //   })\n    \n          // })\n\n\n\n          // let reader = new FileReader();\n\n          // reader.onload = () => {\n          //   // Use reader.result\n  \n  \n          //   this.setState({\n          //     csvData: reader.result, \n          //     text: reader.result\n          //   })\n  \n          // };\n          // reader.readAsText(this.state.selectedFile);\n  \n  \n  \n  \n          // inference(this.state.text).then( result => {\n          //   this.setState({\n          //     text : this.state.text,\n          //     data:result[1],\n          //     latency:result[0],\n          //   });\n      \n          // });\n\n\n  }\n\n\n  // showFile = async (e) => { \n//   showFile = async () => { \n//     // e.preventDefault() \n//     const reader = new FileReader() \n//     reader.onload = async () => { \n//        const text = (this.state.selectedFile) \n//        console.log(text) \n//        alert(text) \n//     }; \n//     reader.readAsText(this.state.selectedFile) \n//  } \n\n\n\n  onFileUpload=() => {\n   \n    // Create an object of formData\n    // const formData = new FormData();\n\n    // // Update the formData object\n    // formData.append(\n    //   \"myFile\",\n    //   this.state.selectedFile,\n    //   this.state.selectedFile.name\n    // );\n\n    // Details of the uploaded file\n    // console.log(this.state.selectedFile);\n    // console.log(this.state.selectedFile.name);\n\n      // console.log(event.target.files[0]);\n      // console.log(event.target.files[0].name);\n\n      // this.setState({ selectedFile: event.target.files[0] });\n\n    // Request made to the backend api\n    // Send formData object\n    // axios.post(\"/upload\", formData);\n    // axios.post(\"/upload\", {file: (this.state.selectedFile,this.state.selectedFile.name)});\n\n\n\n    axios.post('/upload', {file: (this.state.selectedFile, this.state.selectedFile.name)}\n\n        //     {\n        //     headers: {\n        //       \"Content-Type\": \"multipart/form-data\",\n        //     },\n        //   }\n          )\n          .then((res) => {\n            console.log(res);\n\n            // let reader = new FileReader();\n\n            // reader.onload = () => {\n            //   // Use reader.result\n    \n    \n            //   this.setState({\n            //     csvData: reader.result, \n            //     text: reader.result\n            //   })\n    \n            // };\n            // reader.readAsText(res.data);\n            \n\n\n\n            })\n            .catch((err) => {\n                // inform the user\n                console.error(err)\n                // removeFile(file.name)\n            })\n\n\n\n      // axios.get(`/upload`)\n      //     .then(res => {\n      //       console.log(res);\n      //       // const text = res;\n      //       // const text = 'test';\n\n\n      //       // let reader = new FileReader();\n\n      //       // reader.onload = () => {\n      //       //   // Use reader.result\n    \n    \n      //       //   this.setState({\n      //       //     csvData: reader.result, \n      //       //     text: reader.result\n      //       //   })\n    \n      //       // };\n      //       // reader.readAsText(res.data[0]);\n            \n\n\n      //   })\n\n\n\n\n\n        let reader = new FileReader();\n\n        reader.onload = () => {\n          // Use reader.result\n\n\n          // this.setState({\n          //   // csvData: reader.result, \n          //   text: reader.result\n          // })\n\n\n\n          // // const textvalue = ''\n          // // const csv = Papa.parse(reader.result, { header: true });\n          // // const parsedData = csv?.data;\n          // // // const columns = Object.keys(parsedData[0])\n          // // const columns = Object.keys(parsedData[0,1])\n          // // // const value = Object.keys(parsedData[1])\n          // // // textvalue = Object.keys(parsedData[0][0]) + ' ' + Object.keys(parsedData[1][0]) + Object.keys(parsedData[0][1]) + ' ' + Object.keys(parsedData[1][1])\n          // // // textvalue.append(value)\n\n\n          // const textline = '';\n\n          const lines = reader.result.split(\"\\n\");\n          const headers = lines[0].split(',');\n          const currentLine = lines[1].split(',');\n          // const textline = 'time ' + currentLine[0] + '\\n'+ 'date ' + currentLine[1] + '\\n'+ 'machine ID ' + currentLine[2] + '\\n'+ 'model ID' + currentLine[3] +  '\\n'+ 'age ' + currentLine[4] + '\\n'+ 'hourly average voltage ' + currentLine[5] + '\\n'+ 'hourly average rotation ' + currentLine[6] + '\\n'+ 'hourly average presure ' + currentLine[7] + '\\n'+ 'hourly average vibration  ' +  currentLine[8];\n\n          const textline = headers[0] + ' ' + currentLine[0] + '\\n'+ headers[1] + ' ' + currentLine[1] + '\\n'+ headers[2] + ' ' + currentLine[2] + '\\n'+ headers[3] + ' ' + currentLine[3] +  '\\n'+ headers[4] + ' ' + currentLine[4] + '\\n'+ headers[5] + ' ' + currentLine[5] + '\\n'+ headers[6] + ' ' + currentLine[6] + '\\n'+ headers[7] + ' ' + currentLine[7] + '\\n'+ headers[8] + ' ' + currentLine[8];\n\n\n\n\n\n          // const textline = '';\n\n          // for (let j = 0; j < headers.length; j++) {\n          //   // obj[headers[j].trim()] = currentLine[j].trim();\n          //   // const factor = '';\n          //   // factor.concat(headers[j]);\n          //   // factor.concat(currentLine[j]);\n          //   // textvalue.concat(factor);\n          //   // textvalue.concat(headers[j]);\n          //   // textvalue.concat(currentLine[j]);\n\n          //   textline += headers[j] + ' ' + currentLine[j] + '\\n';\n\n          //   // result.push(headers[j]);\n          //   // result.push(' ');\n          //   // result.push(currentLine[j]);\n          //   // result.push(' ');\n\n          // }\n\n          this.setState({\n            // csvData: reader.result, \n            text: textline\n            // text: reader.result\n          })\n\n \n          // const result = [];\n\n          // // const obj = {};\n          // const currentLine = lines[1].split(\",\");\n\n          // for (let j = 0; j < headers.length; j++) {\n          //   // obj[headers[j].trim()] = currentLine[j].trim();\n          //   // const factor = '';\n          //   // factor.concat(headers[j]);\n          //   // factor.concat(currentLine[j]);\n          //   // textvalue.concat(factor);\n          //   // textvalue.concat(headers[j]);\n          //   // textvalue.concat(currentLine[j]);\n\n          // //   textline += headers[j].valueOf() + ' ' + currentLine[j].valueOf();\n\n          //   result.push(headers[j]);\n          //   result.push(' ');\n          //   result.push(currentLine[j]);\n          //   result.push(' ');\n\n          // }\n\n\n          // // const textvalue = JSON.stringify(obj);\n\n          // const textvalue  = result.join();\n\n\n\n\n          // // for (let i = 1; i < lines.length; i++) {\n          // //   const obj = {};\n          // //   // const textline = '';\n          // //   const currentLine = lines[i].split(\",\");\n           \n          // //   for (let j = 0; j < headers.length; j++) {\n          // //     obj[headers[j].trim()] = currentLine[j].trim();\n              \n          // //     // const factor = `${headers[j]}` + ' ' + `${currentLine[j]}` + ' ';\n          // //     // textline.append(factor);\n              \n          // //   }\n          // //   const textline = JSON.stringify(obj);\n          // //   result.push(textline);\n          // //   // textvalue.append(textline);\n          // // }\n      \n          // // const textvalue = result[0];\n\n\n          // this.setState({\n          //   csvData: textvalue, \n          //   text: textvalue\n          // })\n\n\n\n          inference(textline).then( result => {\n          // inference(reader.result).then( result => {\n            this.setState({\n              text : this.state.text,\n              data:result[1],\n              latency:result[0],\n            });\n      \n          })\n\n\n\n          // inference(reader.result).then( result => {\n          //   this.setState({\n          //     text : this.state.text,\n          //     data:result[1],\n          //     latency:result[0],\n          //   });\n      \n          // })\n\n\n\n\n        };\n        reader.readAsText(this.state.selectedFile);\n        // reader.readAsText(event.target.files[0]);\n\n\n\n        // inference(this.state.text).then( result => {\n        //   this.setState({\n        //     text : this.state.text,\n        //     data:result[1],\n        //     latency:result[0],\n        //   });\n    \n        // });\n\n\n\n\n\n     };\n\n  // fileData = () => {\n \n  //   if (this.state.selectedFile) {\n\n  //       return (\n  //           <div>\n  //               <h5>File Details:</h5>\n  //               <p>File Name: {this.state.selectedFile.name}</p>\n\n  //               <p>File Type: {this.state.selectedFile.type}</p>\n\n  //               <p>\n  //                   Last Modified:{\" \"}\n  //                   {this.state.selectedFile.lastModifiedDate.toDateString()}\n  //               </p>\n\n  //           </div>\n  //       );\n  //   } else {\n  //       return (\n  //           <div>\n  //               <br />\n  //               <h5>Choose before Pressing the Upload button</h5>\n  //           </div>\n  //       );\n  //   }\n  // };\n\n\n  // componentWillMount(){\n\n  //   axios.get(`/upload`)\n  //   .then(res => {\n  //     const text = res.data;\n  //     this.setState({ text });\n  //   })\n\n\n  // }\n\n\n  // handleFiles = files => {\n  //   let reader = new FileReader();\n  //   reader.onload = () => {\n  //     // Use reader.result\n  //     this.setState({\n  //       csvData: reader.result\n  //     })\n  //   }\n  //   reader.readAsText(files[0]);\n\n  //   inference(this.state.csvData).then( result => {\n  //     this.setState({\n  //       text : this.state.text,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n\n  //   });\n\n\n  // }\n\n\n  //   processCSV(str, delim=',') {\n  //     const headers = str.slice(0,str.indexOf('\\n')).split(delim);\n  //     const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n\n  //     const newArray = rows.map( row => {\n  //         const values = row.split(delim);\n  //         const eachObject = headers.reduce((obj, header, i) => {\n  //             obj[header] = values[i];\n  //             return obj;\n  //         }, {})\n  //         return eachObject;\n  //     })\n\n  //   let reader = new FileReader();\n\n  //   reader.onload = () => {\n  //     // Use reader.result\n  //       const array = new Int8Array(reader.result)\n  //   }\n\n  //   reader.readAsArrayBuffer(newArray)\n  // }\n\n\n  componentDidMount() {\n\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n\n    // axios.get(`/upload`)\n    // .then(res => {\n    //   const text = res.data;\n    //   this.setState({ text });\n\n    // })\n\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n  handleChange (event) {  \n  \n        // Dashboard = (e) => {\n        // const [textValue, setTextValue] = useState(\"\");\n        // const handleChange = (e) => {\n\n        // event.preventDefault() \n\n        // this.setState({ selectedFile : event.target.files[0]});\n\n        // this.setState({ name: event.target.files[0].name });\n\n          // axios.get(`/upload`)\n          // .then(res => {\n          //   const text = res.content;\n          //   this.setState({ text });\n          // })\n\n\n          // const file = event.target.files[0];\n      \n          // let reader = new FileReader();\n      \n          // reader.onload(event).then(result => {\n          //   const file = event.target.result;\n          //   console.log(file);\n            // this.setState({ text: file });\n\n            // inference(file).then( result => {\n            //   this.setState({\n            //     text : file,\n            //     data:result[1],\n            //     latency:result[0],\n            //   });\n      \n            // });\n\n\n          // });\n\n          // reader.onerror(event).alert(event.target.error.name);\n          // reader.readAsText(file);\n\n\n          // axios.get(`/upload`)\n          // .then(res => {\n          //   const text = res.data;\n          //   this.setState({ text });\n      \n          // });\n          \n          inference(event.target.value).then( result => {\n            this.setState({\n              text : event.target.value,\n              data:result[1],\n              latency:result[0],\n            });\n    \n          });\n    \n    }\n\n\n  //   CSVToArray( strData, strDelimiter ){\n  //     strDelimiter = (strDelimiter || \",\");\n  //     let objPattern = new RegExp(\n  //       (\n  //         \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n  //         \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n  //         \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n  //       ),\n  //       \"gi\");\n\n  //     let arrData = [];\n  //     let headers = [];\n  //     let headersFound = false;\n  //     let headerIndex = 0;\n\n  //     let arrMatches = null;\n\n  //     while(arrMatches = objPattern.exec( strData )) {\n  //         let strMatchedDelimiter = arrMatches[ 1 ];\n  //         if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {\n  //             arrData.push( {} );\n  //             headersFound = true;\n  //             headerIndex = 0;\n  //         }\n\n  //         let strMatchedValue;\n  //         if (arrMatches[2]) {\n  //             strMatchedValue = arrMatches[2].replace(new RegExp( \"\\\"\\\"\", \"g\" ),\"\\\"\");\n  //         } else {\n  //             strMatchedValue = arrMatches[3];\n  //         }\n\n  //         if (!headersFound) {\n  //           headers.push(strMatchedValue);\n  //         } else {\n  //           arrData[arrData.length -1][headers[headerIndex]] = strMatchedValue;\n  //           headerIndex ++;\n  //         }\n  //     }\n  //     return arrData;\n  // }\n\n\n    // handleSubmit = event => {\n    //   event.preventDefault();\n  \n    //   // const user = {\n    //   //   name: this.state.name\n    //   // };\n  \n    //   // axios.post(`/upload`, { user })\n\n    //   axios.post('/upload', {file: (this.state.file, this.state.name)})\n    //   // axios.post(`/upload`, { name: this.state.name })\n    //     .then(res => {\n    //       console.log(res);\n    //       console.log(res.data);\n    //     })\n    //     .catch((err) => {\n    //       // inform the user\n    //       console.error(err)\n    //       // removeFile(file.name)\n    //   })\n\n\n    // }\n\n\n\n\n  //   handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n\n\n    // handleChange(event) { \n      \n    //   axios.get('/upload')\n    //   .then(response => {\n    //     // Convert data to CSV format(optional)\n    //     const file = response.files[0];\n    //   })\n    //   .catch(error => {\n    //     // Handle errors\n    //     console.error(error);\n    //   });\n  \n  \n    //   // const file = e.target.files[0];\n  \n    //   let reader = new FileReader();\n\n    //   reader.onload = (e) => {\n    //     const file = response.result;\n    //     console.log(file);\n    //     setTextValue(file);\n    //   };\n  \n    //   reader.onerror = (e) => alert(response.error.name);\n    //   reader.readAsText(file);\n  \n\n      \n    // inference(textValue).then( result => {\n    //   this.setState({\n    //     text : textValue,\n    //     data:result[1],\n    //     latency:result[0],\n    //   });\n    // });\n\n  // }\n\n\n  \n\n  // Dashboard = () => {\n  //   const [textValue, setTextValue] = useState(\"\");\n  //   const handleChange = (e) => {\n  \n  \n  \n  //     axios.get('/upload')\n  //     .then(response => {\n  //       // Convert data to CSV format(optional)\n  //       const file = response.file;\n  //     })\n  //     .catch(error => {\n  //       // Handle errors\n  //       console.error(error);\n  //     });\n  \n  \n  //     // const file = e.target.files[0];\n  \n  //     let reader = new FileReader();\n  \n  //     reader.onload = (e) => {\n  //       const file = e.target.result;\n  //       console.log(file);\n  //       setTextValue(file);\n  //     };\n  \n  //     reader.onerror = (e) => alert(e.target.error.name);\n  //     reader.readAsText(file);\n  \n  \n  //   };\n  \n  //   return (\n  //     <div className=\"Dashboard\">\n  //   {/* <div className=\"App\">  */}\n  //     <div style={{ display: \"flex\" }}>\n  //       <input type=\"file\" name=\"input\" onChange={handleChange} />\n  //       <textarea\n  //         cols={30}\n  //         rows={20}\n  //         value={textValue}\n  //         onChange={setTextValue}\n  //         style={{ marginTop: 15, width: \"50%\" }}\n  //       ></textarea>\n  //     </div>\n  \n  \n  \n  //     </div>\n  //   );\n  // };\n\n\n\n  // handleChange (event) {  \n\n  //   inference(event.target.value).then( result => {\n  //     this.setState({\n  //       text : event.target.value,\n  //       data:result[1],\n  //       latency:result[0],\n  //     });\n  //   });\n\n  // }\n  \n\n\n\n  // render() {\n  render() {\n    // const [state, setState] = useState(null);\n    // const [textValue, setTextValue] = this.useState(\"\");\n    return (\n      <div className=\"App\">\n\n      {/* <FileProcessing /> */}\n\n      <header className=\"App-header\">   \n      <em>Precdictive Maintenance: Transformer Inference</em>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          // colors: ['purple'],\n          colors: ['yellow'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n\n\n      {/* <div> \n            <input type=\"file\" onChange={() => this.setState(this.text, this.showFile().result )} /> \n        </div> */}\n\n\n          {/* <FileProcessing /> */}\n\n\n          {/* <Dashboard /> */}\n\n\n\n        {/* <div>\n\n          {this.Dashboard()}\n        </div> */}\n\n\n\n          {/* {this.handleChange()} */}\n\n\n       {/* <div>\n\n       {this.handleChange}   \n        </div> */}\n\n\n      {/* <div>\n        <h5>File upload</h5>\n        <hr />\n        <div>\n          <form>\n            <table>\n              <tr>\n                <td>Select File :</td>\n              </tr>\n              <tr>\n                <input onChange={this.onFileChange} type=\"file\" multiple />\n              </tr>\n            </table>\n          </form>\n        </div>\n      </div> */}\n\n\n      <div>\n        <h5>File Upload!</h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>\n            Upload!\n          </button>\n          <ReactFileReader  handleFiles={this.handleFiles} fileTypes={'.csv'}>\n                  {/* <button className='btn'>Upload</button> */}\n          </ReactFileReader>\n          <textarea\n                cols={30}\n                rows={20}\n                value={this.state.text}\n                // value={this.state.csvData}\n                onChange={this.onFileChange}\n                style={{ marginTop: 15, width: \"50%\" }}\n            ></textarea> \n        </div>\n      </div>\n\n\n\n      {/* <div>\n         <ReactFileReader handleFiles={this.handleFiles} fileTypes={'.csv'}>\n                 <button className='btn'>Upload</button>\n          </ReactFileReader>\n          <CsvToHtmlTable\n               data={this.state.csvData}\n               csvDelimiter=\",\"\n               tableClassName=\"table table-striped table-hover\"\n           />\n      </div> */}\n\n\n\n{/* \n      <div> \n      <input type=\"file\" onChange={(e) => this.showFile(e)} /> \n   </div> */}\n\n      {/* <div>\n                <h5>\n                    File Upload using React!\n                </h5>\n                <div>\n                    <input type=\"file\" onChange={this.onFileChange} />\n                    <button onClick={this.onFileUpload}>\n                        Upload!\n                    </button>\n                </div>\n                {this.fileData()}\n            </div> */}\n\n\n      {/* <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Upload file:\n          <input type=\"file\" name=\"name\"  onChange={this.handleChange} />\n        </label>\n        <button type=\"submit\">Upload</button>\n      </form>\n      </div> */}\n      \n\n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n\n    {/* <div style={{ display: \"flex\" }}>\n          <input type=\"file\" name=\"input\" onChange={this.handleChange} />\n          <textarea\n            cols={30}\n            rows={20}\n            value={this.textValue}\n            onChange={this.setTextValue}\n            style={{ marginTop: 15, width: \"50%\" }}\n          ></textarea>\n        </div> */}\n\n\n      {/* <div>\n      {this.state.data}     \n      </div> */}\n\n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \n       placeholder={this.state.text} autoFocus onChange={this.handleChange}\n        \n       >\n      </textarea>  */}\n\n\n      \n      {/* <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\"  name=\"message\" \n      //  placeholder={this.state.text} autoFocus // onChange={this.handleChange}\n       placeholder={Dashboard.textValue} autoFocus // onChange={this.handleChange}\n      // rows=\"8\" cols=\"24\" placeholder={this.state.text}\n\n        // placeholder={this.state.text} autoFocus onChange={this.onFileChange}\n        value = {Dashboard.textValue}\n        // onChange={e => Dashboard.textarea.onChange(e.target.value)}\n        // onChange={Dashboard.setTextValue}\n        onChange={this.onFileChange}\n        // onDropRead={text => Dashboard.textarea.onChange.value}\n\n        // textareaProps={{\n        //   // cols: 24,\n        //   // rows: 8,\n        //   placeholder: \"Drop one text file here...\"\n        // } }\n\n        // onChange={this.Dashboard}  \n        // {this.Dashboard()} \n        ></textarea> */}\n\n\n\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\n      \n      </header> \n\n\n    </div>   \n    );\n\n\n\n\n  };\n  \n\n\n}\nexport default TextInputArea;\n// export default App;\n\n\n\n\n\n\n\n\n\n\n// const Dashboard = () => {\n//   const [textValue, setTextValue] = useState(\"\");\n//   const handleChange = (e) => {\n//     const file = e.target.files[0];\n\n//     let reader = new FileReader();\n\n//     reader.onload = (e) => {\n//       const file = e.target.result;\n//       console.log(file);\n//       setTextValue(file);\n//     };\n\n//     reader.onerror = (e) => alert(e.target.error.name);\n//     reader.readAsText(file);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <input type=\"file\" name=\"input\" onChange={handleChange} />\n//       <textarea\n//         cols={30}\n//         rows={20}\n//         value={textValue}\n//         onChange={setTextValue}\n//         style={{ marginTop: 15, width: \"50%\" }}\n//       ></textarea>\n//     </div>\n//   );\n// };\n\n\n\n// axios\n// .post(\"https://file-upload8.p.rapidapi.com/upload\", formData,\n//   {\n//     headers: {\n//       \"Content-Type\": \"multipart/form-data\",\n//       \"x-rapidapi-host\": \"file-upload8.p.rapidapi.com\",\n//       \"x-rapidapi-key\": \"54b5d42c85mshe8beeaee0224812p19c856jsn693dc0130385\",\n//     },\n//   }\n// )\n// .then((response) => {\n//   // handle the response\n//       console.log(response);\n//     })\n// .catch((error) => {\n//   // handle errors\n//   console.log(error);\n// });\n\n\n\n// state = {\n//   // Initially, no file is selected\n//   selectedFile: null\n// };\n\n// // On file select (from the pop up)\n// onFileChange = event => {\n//   // Update the state\n//   this.setState({ selectedFile: event.target.files[0] });\n// };\n\n// // On file upload (click the upload button)\n// onFileUpload = () => {\n//   // Create an object of formData\n//   const formData = new FormData();\n\n//   // Update the formData object\n//   formData.append(\n//     \"myFile\",\n//     this.state.selectedFile,\n//     this.state.selectedFile.name\n//   );\n\n//   // Details of the uploaded file\n//   console.log(this.state.selectedFile);\n\n//   // Request made to the backend api\n//   // Send formData object\n//   axios.post(\"api/uploadfile\", formData);\n// };\n\n// // File content to be displayed after\n// // file upload is complete\n// fileData = () => {\n//   if (this.state.selectedFile) {\n//     return (\n//       <div>\n//         <h2>File Details:</h2>\n//         <p>File Name: {this.state.selectedFile.name}</p>\n//         <p>File Type: {this.state.selectedFile.type}</p>\n//         <p>\n//           Last Modified:{\" \"}\n//           {this.state.selectedFile.lastModifiedDate.toDateString()}\n//         </p>\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <br />\n//         <h4>Choose before Pressing the Upload button</h4>\n//       </div>\n//     );\n//   }\n","/Users/nguyentrungchinh/project_19/src/FileProcessing.jsx",[],[],"/Users/nguyentrungchinh/project_19/src/Dashboard.jsx",["198","199","200","201","202","203","204","205","206"],[],"/Users/nguyentrungchinh/project_20/src/index.js",[],[],"/Users/nguyentrungchinh/project_20/src/reportWebVitals.js",[],[],"/Users/nguyentrungchinh/project_20/src/App.jsx",["207","208"],[],"/Users/nguyentrungchinh/project_20/src/inference.js",["209"],[],"/** */\n/*global BigInt */\n/*global BigInt64Array */\n\nimport { loadTokenizer } from './bert_tokenizer.ts';\nimport * as wasmFeatureDetect from 'wasm-feature-detect';\n\n//Setup onnxruntime \nconst ort = require('onnxruntime-web');\n\n//requires Cross-Origin-*-policy headers https://web.dev/coop-coep/\n/**\nconst simdResolver = wasmFeatureDetect.simd().then(simdSupported => {\n    console.log(\"simd is supported? \"+ simdSupported);\n    if (simdSupported) {\n      ort.env.wasm.numThreads = 3; \n      ort.env.wasm.simd = true;\n    } else {\n      ort.env.wasm.numThreads = 1; \n      ort.env.wasm.simd = false;\n    }\n});\n*/\n\nconst options = {\n  executionProviders: ['wasm'], \n  graphOptimizationLevel: 'all'\n};\n\nvar downLoadingModel = true;\nconst model = \"./classifier_2_int8.onnx\";\n\nconst session = ort.InferenceSession.create(model, options);\nsession.then(t => { \n  downLoadingModel = false;\n  //warmup the VM\n  for(var i = 0; i < 10; i++) {\n    console.log(\"Inference warmup \" + i);\n    lm_inference(\"this is a warmup inference\");\n  }\n});\n\nconst tokenizer = loadTokenizer()\n\nconst STATUS_DEFAULT_DISPLAY = [\n  [\"Status\", \"Score\"],\n  ['false: normal system next step 👍',0],\n  ['ttrue: fail system next step 👎',0],\n];\n\nconst STATUS = [\n  'false: normal system next step 👍',\n  'true: fail system next step 👎'\n];\n\nfunction isDownloading() {\n  return downLoadingModel;\n}\n\nfunction sortResult(a, b) {\n  if (a[1] === b[1]) {\n      return 0;\n  }\n  else {\n      return (a[1] < b[1]) ? 1 : -1;\n  }\n}\n\nfunction sigmoid(t) {\n  return 1/(1+Math.pow(Math.E, -t));\n}\n\nfunction create_model_input(encoded) {\n  var input_ids = new Array(encoded.length+2);\n  var attention_mask = new Array(encoded.length+2);\n  var token_type_ids = new Array(encoded.length+2);\n  input_ids[0] = BigInt(101);\n  attention_mask[0] = BigInt(1);\n  token_type_ids[0] = BigInt(0);\n  var i = 0;\n  for(; i < encoded.length; i++) { \n    input_ids[i+1] = BigInt(encoded[i]);\n    attention_mask[i+1] = BigInt(1);\n    token_type_ids[i+1] = BigInt(0);\n  }\n  input_ids[i+1] = BigInt(102);\n  attention_mask[i+1] = BigInt(1);\n  token_type_ids[i+1] = BigInt(0);\n  const sequence_length = input_ids.length;\n  input_ids = new ort.Tensor('int64', BigInt64Array.from(input_ids), [1,sequence_length]);\n  attention_mask = new ort.Tensor('int64', BigInt64Array.from(attention_mask), [1,sequence_length]);\n  token_type_ids = new ort.Tensor('int64', BigInt64Array.from(token_type_ids), [1,sequence_length]);\n  return {\n    input_ids: input_ids,\n    attention_mask: attention_mask,\n    token_type_ids:token_type_ids\n  }\n}\n\nasync function lm_inference(text) {\n  try { \n    const encoded_ids = await tokenizer.then(t => {\n      return t.tokenize(text); \n    });\n    if(encoded_ids.length === 0) {\n      return [0.0, STATUS_DEFAULT_DISPLAY];\n    }\n    const start = performance.now();\n    const model_input = create_model_input(encoded_ids);\n    const output =  await session.then(s => { return s.run(model_input,['output_0'])});\n    const duration = (performance.now() - start).toFixed(1);\n    const probs = output['output_0'].data.map(sigmoid).map( t => Math.floor(t*100));\n    \n    const result = [];\n    for(var i = 0; i < STATUS.length;i++) {\n      const t = [STATUS[i], probs[i]];\n      result[i] = t;\n    }\n    result.sort(sortResult); \n    \n    const result_list = [];\n    result_list[0] = [\"Status\", \"Score\"];\n    for(i = 0; i < 2; i++) {\n       result_list[i+1] = result[i];\n    }\n    return [duration,result_list];    \n  } catch (e) {\n    return [0.0,STATUS_DEFAULT_DISPLAY];\n  }\n}    \n\nexport let inference = lm_inference \nexport let columnNames = STATUS_DEFAULT_DISPLAY\nexport let modelDownloadInProgress = isDownloading\n","/Users/nguyentrungchinh/project_20/src/bert_tokenizer.ts",[],[],"/Users/nguyentrungchinh/project_25/src/index.js",[],[],"/Users/nguyentrungchinh/project_25/src/reportWebVitals.js",[],[],"/Users/nguyentrungchinh/project_25/src/App.jsx",["210","211","212"],[],"import './App.css';\nimport './App.scss';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Component } from 'react';\nimport { useState } from 'react';\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport ReactFileReader from 'react-file-reader';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n      selectedFile: null,\n    };\n\n  }\n\n  componentDidMount() {\n\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n\n  onFileChange =event => {\n    this.setState({ selectedFile: event.target.files[0] });\n          const file = event.target.files[0]; \n          let reader = new FileReader();\n          reader.onload = function(event) {\n            const file = event.target.result;\n            console.log(file);\n            console.log(file.name);\n          };\n\n          reader.onerror = (e) => alert(e.target.error.name);\n          reader.readAsText(file); \n\n  }\n\n\n  onFileUpload=() => {\n\n    // axios.post('https://predictive-maintenance-v20.onrender.com/upload', {file: (this.state.selectedFile, this.state.selectedFile.name)}\n    axios.post('http://localhost:10000/upload', {file: (this.state.selectedFile, this.state.selectedFile.name)}\n          )\n          .then((res) => {\n            console.log(res);\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n        let reader = new FileReader();\n\n        reader.onload = () => {\n\n          const lines = reader.result.split(\"\\n\");\n          const headers = lines[0].split(',');\n          const currentLine = lines[1].split(',');\n          const textline = [];\n\n          for (let j = 0; j < headers.length; j++) {\n            if (j==0) {\n              textline[j] = (headers[j] + ' ' + currentLine[j] + '\\n');\n            } \n            else {\n              textline[j] = (textline[j-1]+ headers[j] + ' ' + currentLine[j] + '\\n');\n            }\n          }\n\n          this.setState({\n            text: textline[headers.length-1]\n          })\n\n          inference(textline[headers.length-1]).then( result => {\n            this.setState({\n              text : this.state.text,\n              data:result[1],\n              latency:result[0],\n            });\n          })\n\n        };\n        reader.readAsText(this.state.selectedFile);\n\n     };\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n      <header className=\"App-header\">   \n      <em>Precdictive Maintenance: Transformer Inference</em>\n      <div><font size=\"2\">If predictive result is true, based on uploading data, please check the components to prevent the system's failure in next step</font></div>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['yellow'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n      <div>\n        <h5>File Upload!</h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>\n            Upload!\n          </button>\n          <ReactFileReader  handleFiles={this.handleFiles} fileTypes={'.csv'}>\n          </ReactFileReader>\n          <textarea\n                cols={60}\n                rows={20}\n                value={this.state.text}\n                // value={this.state.csvData}\n                onChange={this.onFileChange}\n                style={{ marginTop: 15, width: \"50%\" }}\n            ></textarea> \n        </div>\n      </div>\n\n\n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n       <div><font size=\"4\">Inference Latency {this.state.latency} ms</font></div>\n  \n      </header> \n\n    </div>   \n    );\n\n\n  };\n  \n\n}\nexport default App;\n\n","/Users/nguyentrungchinh/project_25/src/inference.js",["213"],[],"/Users/nguyentrungchinh/project_25/src/bert_tokenizer.ts",[],[],"/Users/nguyentrungchinh/project_25b/src/index.js",[],[],"/Users/nguyentrungchinh/project_25b/src/reportWebVitals.js",[],[],"/Users/nguyentrungchinh/project_25b/src/App.jsx",["214","215","216"],[],"import './App.css';\nimport './App.scss';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Component } from 'react';\nimport { useState } from 'react';\n\nimport {inference} from './inference.js';\nimport {columnNames} from './inference.js';\nimport {modelDownloadInProgress} from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport ReactFileReader from 'react-file-reader';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      data:columnNames,\n      latency:0.0,\n      downloading:modelDownloadInProgress(),\n      selectedFile: null,\n    };\n\n  }\n\n  componentDidMount() {\n\n    this.timerID = setInterval(\n      () => this.checkModelStatus(),\n      1000\n    );\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress(),\n    });\n    if (!this.state.downloading) {\n      this.timerID = setInterval(\n        () => this.checkModelStatus,\n        5000000\n      );\n    }\n  }\n\n\n  onFileChange =event => {\n    this.setState({ selectedFile: event.target.files[0] });\n          const file = event.target.files[0]; \n          let reader = new FileReader();\n          reader.onload = function(event) {\n            const file = event.target.result;\n            console.log(file);\n            console.log(file.name);\n          };\n\n          reader.onerror = (e) => alert(e.target.error.name);\n          reader.readAsText(file); \n\n  }\n\n\n  onFileUpload=() => {\n\n    axios.post('https://predictivemaintenancev20.onrender.com/upload', {file: (this.state.selectedFile, this.state.selectedFile.name)}\n          )\n          .then((res) => {\n            console.log(res);\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n        let reader = new FileReader();\n\n        reader.onload = () => {\n\n          const lines = reader.result.split(\"\\n\");\n          const headers = lines[0].split(',');\n          const currentLine = lines[1].split(',');\n          const textline = [];\n\n          for (let j = 0; j < headers.length; j++) {\n            if (j==0) {\n              textline[j] = (headers[j] + ' ' + currentLine[j] + '\\n');\n            } \n            else {\n              textline[j] = (textline[j-1]+ headers[j] + ' ' + currentLine[j] + '\\n');\n            }\n          }\n\n          this.setState({\n            text: textline[headers.length-1]\n          })\n\n          inference(textline[headers.length-1]).then( result => {\n            this.setState({\n              text : this.state.text,\n              data:result[1],\n              latency:result[0],\n            });\n          })\n\n        };\n        reader.readAsText(this.state.selectedFile);\n\n     };\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n      <header className=\"App-header\">   \n      <em>Precdictive Maintenance: Transformer Inference</em>\n      <div><font size=\"2\">If predictive result is true, based on uploading data, please check the components to prevent the system's failure in next step</font></div>\n      <Chart  \n        width={'400px'}\n        height={'200px'}\n        chartType=\"BarChart\"\n        data={this.state.data}\n        options={{\n          chartArea: { width: '40%'},\n          colors: ['yellow'],\n          backgroundColor: '#282c34',\n          legend: { \n            textStyle: {color: 'white', fontSize: 10},\n            labels: {fontColor:'white'}\n          },\n          vAxis: {\n            textStyle: {\n            color: 'white',\n            fontSize: 13\n          }\n          },\n          hAxis: {\n            minValue: 5,\n            maxValue: 50,\n            textStyle: {\n              color: 'white'\n            }\n          }\n      }}\n      />\n\n      <div>\n        <h5>File Upload!</h5>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>\n            Upload!\n          </button>\n          <ReactFileReader  handleFiles={this.handleFiles} fileTypes={'.csv'}>\n          </ReactFileReader>\n          <textarea\n                cols={60}\n                rows={20}\n                value={this.state.text}\n                // value={this.state.csvData}\n                onChange={this.onFileChange}\n                style={{ marginTop: 15, width: \"50%\" }}\n            ></textarea> \n        </div>\n      </div>\n\n\n      {this.state.downloading && \n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\n        <Box sx={{ width: '400px' }}>\n        <LinearProgress />\n        </Box> \n        <p></p>\n        </div>\n      }\n\n       <div><font size=\"4\">Inference Latency {this.state.latency} ms</font></div>\n  \n      </header> \n\n    </div>   \n    );\n\n\n  };\n  \n\n}\nexport default App;\n\n","/Users/nguyentrungchinh/project_25b/src/inference.js",["217"],[],"/Users/nguyentrungchinh/project_25b/src/bert_tokenizer.ts",[],[],{"ruleId":"218","severity":1,"message":"219","line":8,"column":10,"nodeType":"220","messageId":"221","endLine":8,"endColumn":19},{"ruleId":"218","severity":1,"message":"222","line":9,"column":10,"nodeType":"220","messageId":"221","endLine":9,"endColumn":18},{"ruleId":"218","severity":1,"message":"223","line":37,"column":12,"nodeType":"220","messageId":"221","endLine":37,"endColumn":17},{"ruleId":"218","severity":1,"message":"224","line":38,"column":11,"nodeType":"220","messageId":"221","endLine":38,"endColumn":23},{"ruleId":"218","severity":1,"message":"225","line":6,"column":13,"nodeType":"220","messageId":"221","endLine":6,"endColumn":30},{"ruleId":"226","severity":2,"message":"227","line":7,"column":27,"nodeType":"228","endLine":7,"endColumn":41},{"ruleId":"226","severity":2,"message":"227","line":8,"column":27,"nodeType":"228","endLine":8,"endColumn":41},{"ruleId":"226","severity":2,"message":"227","line":9,"column":31,"nodeType":"228","endLine":9,"endColumn":45},{"ruleId":"226","severity":2,"message":"229","line":10,"column":24,"nodeType":"220","endLine":10,"endColumn":35},{"ruleId":"230","severity":2,"message":"231","line":10,"column":24,"nodeType":"220","messageId":"232","endLine":10,"endColumn":35},{"ruleId":"218","severity":1,"message":"225","line":6,"column":13,"nodeType":"220","messageId":"221","endLine":6,"endColumn":30},{"ruleId":"218","severity":1,"message":"233","line":11,"column":9,"nodeType":"220","messageId":"221","endLine":11,"endColumn":18},{"ruleId":"218","severity":1,"message":"234","line":12,"column":9,"nodeType":"220","messageId":"221","endLine":12,"endColumn":20},{"ruleId":"218","severity":1,"message":"235","line":13,"column":9,"nodeType":"220","messageId":"221","endLine":13,"endColumn":32},{"ruleId":"218","severity":1,"message":"236","line":14,"column":8,"nodeType":"220","messageId":"221","endLine":14,"endColumn":13},{"ruleId":"218","severity":1,"message":"237","line":15,"column":8,"nodeType":"220","messageId":"221","endLine":15,"endColumn":11},{"ruleId":"218","severity":1,"message":"238","line":16,"column":8,"nodeType":"220","messageId":"221","endLine":16,"endColumn":22},{"ruleId":"218","severity":1,"message":"239","line":23,"column":12,"nodeType":"220","messageId":"221","endLine":23,"endColumn":16},{"ruleId":"218","severity":1,"message":"240","line":23,"column":18,"nodeType":"220","messageId":"221","endLine":23,"endColumn":25},{"ruleId":"218","severity":1,"message":"241","line":23,"column":27,"nodeType":"220","messageId":"221","endLine":23,"endColumn":38},{"ruleId":"218","severity":1,"message":"219","line":8,"column":10,"nodeType":"220","messageId":"221","endLine":8,"endColumn":19},{"ruleId":"218","severity":1,"message":"222","line":20,"column":10,"nodeType":"220","messageId":"221","endLine":20,"endColumn":18},{"ruleId":"218","severity":1,"message":"242","line":22,"column":8,"nodeType":"220","messageId":"221","endLine":22,"endColumn":18},{"ruleId":"218","severity":1,"message":"243","line":23,"column":8,"nodeType":"220","messageId":"221","endLine":23,"endColumn":16},{"ruleId":"218","severity":1,"message":"244","line":24,"column":8,"nodeType":"220","messageId":"221","endLine":24,"endColumn":22},{"ruleId":"218","severity":1,"message":"245","line":37,"column":10,"nodeType":"220","messageId":"221","endLine":37,"endColumn":25},{"ruleId":"218","severity":1,"message":"246","line":38,"column":10,"nodeType":"220","messageId":"221","endLine":38,"endColumn":16},{"ruleId":"218","severity":1,"message":"247","line":43,"column":10,"nodeType":"220","messageId":"221","endLine":43,"endColumn":24},{"ruleId":"218","severity":1,"message":"248","line":48,"column":8,"nodeType":"220","messageId":"221","endLine":48,"endColumn":12},{"ruleId":"218","severity":1,"message":"249","line":1,"column":8,"nodeType":"220","messageId":"221","endLine":1,"endColumn":13},{"ruleId":"218","severity":1,"message":"250","line":3,"column":8,"nodeType":"220","messageId":"221","endLine":3,"endColumn":13},{"ruleId":"218","severity":1,"message":"233","line":6,"column":9,"nodeType":"220","messageId":"221","endLine":6,"endColumn":18},{"ruleId":"218","severity":1,"message":"234","line":7,"column":9,"nodeType":"220","messageId":"221","endLine":7,"endColumn":20},{"ruleId":"218","severity":1,"message":"235","line":8,"column":9,"nodeType":"220","messageId":"221","endLine":8,"endColumn":32},{"ruleId":"218","severity":1,"message":"236","line":9,"column":8,"nodeType":"220","messageId":"221","endLine":9,"endColumn":13},{"ruleId":"218","severity":1,"message":"237","line":10,"column":8,"nodeType":"220","messageId":"221","endLine":10,"endColumn":11},{"ruleId":"218","severity":1,"message":"238","line":11,"column":8,"nodeType":"220","messageId":"221","endLine":11,"endColumn":22},{"ruleId":"226","severity":2,"message":"251","line":18,"column":37,"nodeType":"220","endLine":18,"endColumn":45},{"ruleId":"218","severity":1,"message":"219","line":6,"column":10,"nodeType":"220","messageId":"221","endLine":6,"endColumn":19},{"ruleId":"218","severity":1,"message":"222","line":7,"column":10,"nodeType":"220","messageId":"221","endLine":7,"endColumn":18},{"ruleId":"218","severity":1,"message":"225","line":6,"column":13,"nodeType":"220","messageId":"221","endLine":6,"endColumn":30},{"ruleId":"218","severity":1,"message":"219","line":6,"column":10,"nodeType":"220","messageId":"221","endLine":6,"endColumn":19},{"ruleId":"218","severity":1,"message":"222","line":7,"column":10,"nodeType":"220","messageId":"221","endLine":7,"endColumn":18},{"ruleId":"252","severity":1,"message":"253","line":90,"column":18,"nodeType":"254","messageId":"255","endLine":90,"endColumn":20},{"ruleId":"218","severity":1,"message":"225","line":6,"column":13,"nodeType":"220","messageId":"221","endLine":6,"endColumn":30},{"ruleId":"218","severity":1,"message":"219","line":6,"column":10,"nodeType":"220","messageId":"221","endLine":6,"endColumn":19},{"ruleId":"218","severity":1,"message":"222","line":7,"column":10,"nodeType":"220","messageId":"221","endLine":7,"endColumn":18},{"ruleId":"252","severity":1,"message":"253","line":89,"column":18,"nodeType":"254","messageId":"255","endLine":89,"endColumn":20},{"ruleId":"218","severity":1,"message":"225","line":6,"column":13,"nodeType":"220","messageId":"221","endLine":6,"endColumn":30},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'value' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'wasmFeatureDetect' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"React.useState\" is called in function \"uploadfile\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","MemberExpression","React Hook \"useSelector\" is called in function \"uploadfile\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","no-undef","'useSelector' is not defined.","undef","'inference' is defined but never used.","'columnNames' is defined but never used.","'modelDownloadInProgress' is defined but never used.","'Chart' is defined but never used.","'Box' is defined but never used.","'LinearProgress' is defined but never used.","'data' is assigned a value but never used.","'latency' is assigned a value but never used.","'downloading' is assigned a value but never used.","'FileUpload' is defined but never used.","'FileList' is defined but never used.","'FileProcessing' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faPlus' is defined but never used.","'CsvToHtmlTable' is defined but never used.","'Papa' is defined but never used.","'React' is defined but never used.","'axios' is defined but never used.","React Hook \"useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]